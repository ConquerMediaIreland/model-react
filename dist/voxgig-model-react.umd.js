(function(global2, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("react"), require("@mui/material"), require("@emotion/styled"), require("@emotion/react"), require("react-redux"), require("@mui/icons-material"), require("react-router-dom"), require("react-dom")) : typeof define === "function" && define.amd ? define(["exports", "react", "@mui/material", "@emotion/styled", "@emotion/react", "react-redux", "@mui/icons-material", "react-router-dom", "react-dom"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.VoxgigModelReact = {}, global2.React, global2.material, global2.emStyled, global2.react, global2.reactRedux, global2.iconsMaterial, global2.reactRouterDom, global2.ReactDOM));
})(this, function(exports2, React, material, emStyled, react, reactRedux, iconsMaterial, reactRouterDom, ReactDOM) {
  "use strict";var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __pow = Math.pow;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

  function _interopNamespaceDefault(e) {
    const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
    if (e) {
      for (const k in e) {
        if (k !== "default") {
          const d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: () => e[k]
          });
        }
      }
    }
    n.default = e;
    return Object.freeze(n);
  }
  const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
  const ReactDOM__namespace = /* @__PURE__ */ _interopNamespaceDefault(ReactDOM);
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function getDefaultExportFromNamespaceIfPresent(n) {
    return n && Object.prototype.hasOwnProperty.call(n, "default") ? n["default"] : n;
  }
  function getDefaultExportFromNamespaceIfNotNamed(n) {
    return n && Object.prototype.hasOwnProperty.call(n, "default") && Object.keys(n).length === 1 ? n["default"] : n;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule)
      return n;
    var f = n.default;
    if (typeof f == "function") {
      var a = function a2() {
        if (this instanceof a2) {
          return Reflect.construct(f, arguments, this.constructor);
        }
        return f.apply(this, arguments);
      };
      a.prototype = f.prototype;
    } else
      a = {};
    Object.defineProperty(a, "__esModule", { value: true });
    Object.keys(n).forEach(function(k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function() {
          return n[k];
        }
      });
    });
    return a;
  }
  var jsxRuntime$2 = { exports: {} };
  var reactJsxRuntime_development = {};
  /**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactJsxRuntime_development;
  function requireReactJsxRuntime_development() {
    if (hasRequiredReactJsxRuntime_development)
      return reactJsxRuntime_development;
    hasRequiredReactJsxRuntime_development = 1;
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React$1 = React;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init2(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign2 = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match2 = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config2, self2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config2, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config2)) {
              {
                checkKeyStringCoercion(config2.key);
              }
              key = "" + config2.key;
            }
            if (hasValidRef(config2)) {
              ref = config2.ref;
              warnIfStringRefCannotBeAutoConverted(config2, self2);
            }
            for (propName in config2) {
              if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes2;
            if (typeof type === "function") {
              propTypes2 = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes2 = type.propTypes;
            } else {
              return;
            }
            if (propTypes2) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes2, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx = jsxWithValidationDynamic;
        var jsxs = jsxWithValidationStatic;
        reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
        reactJsxRuntime_development.jsx = jsx;
        reactJsxRuntime_development.jsxs = jsxs;
      })();
    }
    return reactJsxRuntime_development;
  }
  var reactJsxRuntime_production_min = {};
  /**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactJsxRuntime_production_min;
  function requireReactJsxRuntime_production_min() {
    if (hasRequiredReactJsxRuntime_production_min)
      return reactJsxRuntime_production_min;
    hasRequiredReactJsxRuntime_production_min = 1;
    "use strict";
    var f = React, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
    function q(c, a, g) {
      var b, d = {}, e = null, h = null;
      void 0 !== g && (e = "" + g);
      void 0 !== a.key && (e = "" + a.key);
      void 0 !== a.ref && (h = a.ref);
      for (b in a)
        m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
      if (c && c.defaultProps)
        for (b in a = c.defaultProps, a)
          void 0 === d[b] && (d[b] = a[b]);
      return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
    }
    reactJsxRuntime_production_min.Fragment = l;
    reactJsxRuntime_production_min.jsx = q;
    reactJsxRuntime_production_min.jsxs = q;
    return reactJsxRuntime_production_min;
  }
  var jsxRuntime$1 = jsxRuntime$2.exports;
  var hasRequiredJsxRuntime;
  function requireJsxRuntime() {
    if (hasRequiredJsxRuntime)
      return jsxRuntime$2.exports;
    hasRequiredJsxRuntime = 1;
    "use strict";
    if (process.env.NODE_ENV === "production") {
      jsxRuntime$2.exports = requireReactJsxRuntime_production_min();
    } else {
      jsxRuntime$2.exports = requireReactJsxRuntime_development();
    }
    return jsxRuntime$2.exports;
  }
  var jsxRuntimeExports = requireJsxRuntime();
  const jsxRuntime = /* @__PURE__ */ getDefaultExportFromCjs(jsxRuntimeExports);
  var entity = { exports: {} };
  var make_entity = {};
  "use strict";
  Object.defineProperty(make_entity, "__esModule", { value: true });
  var Entity_1 = make_entity.Entity = MakeEntity_1 = make_entity.MakeEntity = void 0;
  const proto = Object.getPrototypeOf;
  const toString_map = {
    // '': make_toString(),
  };
  const NO_ENTITY = null;
  const NO_ERROR = null;
  const DisallowAsDirective = {
    id$: true,
    custom$: true,
    directive$: true,
    merge$: true
  };
  function entargs(ent, args) {
    args.ent = ent;
    if (this.canon.name !== null) {
      args.name = this.canon.name;
    }
    if (this.canon.base !== null) {
      args.base = this.canon.base;
    }
    if (this.canon.zone !== null) {
      args.zone = this.canon.zone;
    }
    let directives = Object.keys(ent.directive$).filter((dname) => dname.endsWith("$") && !DisallowAsDirective[dname]);
    for (let dname of directives) {
      args[dname] = ent.directive$[dname];
    }
    return args;
  }
  class Entity {
    constructor(canon, seneca, options) {
      this.private$ = {
        canon: null,
        promise: false,
        get_instance: () => null,
        entargs,
        options: {}
      };
      const private$ = this.private$;
      private$.get_instance = function() {
        return seneca;
      };
      private$.canon = canon;
      private$.entargs = entargs;
      private$.options = options;
      this.private$ = this.private$;
      this.entity$ = this.canon$();
    }
    // Properties without '$' suffix are persisted
    // id property is special: created if not present when saving
    //   lack of id indicates new data record to create
    //   to set id of a new record, use id$
    // func$ functions provide persistence operations
    // args: (<zone>,<base>,<name>,<props>)
    // can be partially specified:
    // make$(name)
    // make$(base,name)
    // make$(zone,base,name)
    // make$(zone,base,null)
    // make$(zone,null,null)
    // props can specify zone$,base$,name$, but args override if present
    // escaped names: foo_$ is converted to foo
    make$(...args) {
      const self2 = this;
      let first = args[0];
      let last = args[args.length - 1];
      let promise = self2.private$.promise;
      if ("boolean" === typeof last) {
        promise = last;
        args = args.slice(0, args.length - 1);
      }
      let instance = self2.private$.get_instance();
      if (first && first.seneca) {
        instance = first;
        first = args[1];
        args = args.slice(1);
      }
      if (first && first.entity$ && "function" === typeof first.canon$) {
        return first;
      }
      const argprops = args[args.length - 1];
      let props = {};
      if (argprops && typeof argprops === "object") {
        args.pop();
        props = __spreadValues({}, argprops);
      }
      while (args.length < 3) {
        args.unshift(null);
      }
      let canon;
      if ("string" === typeof props.entity$) {
        canon = parsecanon(props.entity$);
      } else if (props.entity$ && "object" === typeof props.entity$) {
        canon = {};
        canon.zone = props.entity$.zone;
        canon.base = props.entity$.base;
        canon.name = props.entity$.name;
      } else {
        let argsname = args.pop();
        argsname = argsname == null ? props.name$ : argsname;
        canon = parsecanon(argsname);
      }
      const name = canon.name;
      let base = args.pop();
      base = base == null ? canon.base : base;
      base = base == null ? props.base$ : base;
      let zone = args.pop();
      zone = zone == null ? canon.zone : zone;
      zone = zone == null ? props.zone$ : zone;
      const new_canon = {};
      new_canon.name = name == null ? self2.private$.canon.name : name;
      new_canon.base = base == null ? self2.private$.canon.base : base;
      new_canon.zone = zone == null ? self2.private$.canon.zone : zone;
      const entity2 = MakeEntity(new_canon, instance, __spreadProps(__spreadValues({}, self2.private$.options), {
        promise
      }));
      for (const p in props) {
        if (Object.prototype.hasOwnProperty.call(props, p)) {
          if (!~p.indexOf("$")) {
            ;
            entity2[p] = props[p];
          } else if (p.length > 2 && p.slice(-2) === "_$") {
            ;
            entity2[p.slice(0, -2)] = props[p];
          }
        }
      }
      if (Object.prototype.hasOwnProperty.call(props, "id$")) {
        ;
        entity2.id$ = props.id$;
      }
      ;
      self2.log$ && self2.log$("make", entity2.canon$({ string: true }), entity2);
      return entity2;
    }
    /** Save the entity.
     *  param {object} [data] - Subset of entity field values.
     *  param {callback~save$} done - Callback function providing saved entity.
     */
    save$(data, done) {
      const self2 = this;
      const si = self2.private$.get_instance();
      let entmsg = __spreadValues({ cmd: "save", q: {} }, self2.private$.options.pattern_fix);
      let done$ = prepareCmd(self2, data, entmsg, done);
      entmsg = self2.private$.entargs(self2, entmsg);
      const promise = self2.private$.promise && !done$;
      let res = promise ? entityPromise(si, entmsg) : (si.act(entmsg, done$), promise ? NO_ENTITY : self2);
      return res;
    }
    /** Callback for Entity.save$.
     *  @callback callback~save$
     *  @param {error} error - Error object, if any.
     *  @param {Entity} entity - Saved Entity object containing updated data fields (in particular, `id`, if auto-generated).
     */
    // provide native database driver
    native$(done) {
      const self2 = this;
      const si = self2.private$.get_instance();
      const promise = self2.private$.promise;
      let entmsg = __spreadValues({ cmd: "native" }, self2.private$.options.pattern_fix);
      let done$ = prepareCmd(self2, void 0, entmsg, done);
      entmsg = self2.private$.entargs(self2, entmsg);
      let res = promise && !done ? entityPromise(si, entmsg) : (si.act(entmsg, done$), promise ? NO_ENTITY : self2);
      return res;
    }
    // load one
    // TODO: qin can be an entity, in which case, grab the id and reload
    // qin omitted => reload self
    /** Load the entity.
     *  param {object|string|number} [query] - Either a entity id, or a query object with field values that must match.
     *  param {callback~load$} done - Callback function providing loaded entity, if found.
     */
    load$(query, done) {
      const self2 = this;
      if ("function" === typeof query) {
        done = query;
        query = null;
      }
      const si = self2.private$.get_instance();
      const q = normalize_query(query, self2);
      let entmsg = __spreadValues({
        cmd: "load",
        q,
        qent: self2
      }, self2.private$.options.pattern_fix);
      let done$ = prepareCmd(self2, void 0, entmsg, done);
      entmsg = self2.private$.entargs(self2, entmsg);
      const promise = self2.private$.promise && !done$;
      if (emptyQuery(q)) {
        return promise ? NO_ENTITY : (done && done.call(si, NO_ERROR, NO_ENTITY), self2);
      }
      let res = promise ? entityPromise(si, entmsg) : (si.act(entmsg, done$), promise ? NO_ENTITY : self2);
      return res;
    }
    /** Callback for Entity.load$.
     *  @callback callback~load$
     *  @param {error} error - Error object, if any.
     *  @param {Entity} entity - Matching `Entity` object, if found.
     */
    // TODO: need an update$ - does an atomic upsert
    // list zero or more
    // qin is optional, if omitted, list all
    /** Load the entity.
     *  param {object|string|number} [query] - A query object with field values that must match, can be empty.
     *  param {callback~list$} done - Callback function providing list of matching `Entity` objects, if any.
     */
    // TODO: refactor list, remove, etc, as per save, load
    list$(query, done) {
      const self2 = this;
      if ("function" === typeof query) {
        done = query;
        query = null;
      }
      const si = self2.private$.get_instance();
      const q = normalize_query(query, self2, { inject_id: false });
      let entmsg = __spreadValues({
        cmd: "list",
        q,
        qent: self2
      }, self2.private$.options.pattern_fix);
      const done$ = prepareCmd(self2, void 0, entmsg, done);
      entmsg = self2.private$.entargs(self2, entmsg);
      const promise = self2.private$.promise && !done$;
      let res = promise ? entityPromise(si, entmsg) : (si.act(entmsg, done$), promise ? NO_ENTITY : self2);
      return res;
    }
    /** Callback for Entity.list$.
     *  @callback callback~list$
     *  @param {error} error - Error object, if any.
     *  @param {Entity} entity - Array of `Entity` objects matching query.
     */
    // remove one or more
    // TODO: make qin optional, in which case, use id
    /** Remove the `Entity`.
     *  param {object|string|number} [query] - Either a entity id, or a query object with field values that must match.
     *  param {callback~remove$} done - Callback function to confirm removal.
     */
    remove$(query, done) {
      const self2 = this;
      if ("function" === typeof query) {
        done = query;
        query = null;
      }
      const si = self2.private$.get_instance();
      const q = normalize_query(query, self2);
      let entmsg = self2.private$.entargs(self2, __spreadValues({
        cmd: "remove",
        q,
        qent: self2
      }, self2.private$.options.pattern_fix));
      let done$ = prepareCmd(self2, void 0, entmsg, done);
      const promise = self2.private$.promise && !done$;
      if (emptyQuery(q)) {
        return promise ? NO_ENTITY : (done$ && done$.call(si, NO_ERROR, NO_ENTITY), self2);
      }
      let res = promise ? entityPromise(si, entmsg) : (si.act(entmsg, done$), promise ? NO_ENTITY : self2);
      return res;
    }
    // DEPRECATE: legacy
    delete$(query, done) {
      return this.remove$(query, done);
    }
    /** Callback for Entity.remove$.
     *  @callback callback~remove$
     *  @param {error} error - Error object, if any.
     */
    fields$() {
      const self2 = this;
      const fields = [];
      for (const p in self2) {
        if (Object.prototype.hasOwnProperty.call(self2, p) && typeof self2[p] !== "function" && p.charAt(p.length - 1) !== "$") {
          fields.push(p);
        }
      }
      return fields;
    }
    // TODO: remove
    close$(done) {
      const self2 = this;
      const si = self2.private$.get_instance();
      let entmsg = self2.private$.entargs(self2, __spreadValues({
        cmd: "close"
      }, self2.private$.options.pattern_fix));
      let done$ = prepareCmd(self2, void 0, entmsg, done);
      const promise = self2.private$.promise && !done$;
      self2.log$ && self2.log$("close");
      return promise ? si.post(entmsg) : (si.act(entmsg, done$), self2);
    }
    is$(canonspec) {
      const self2 = this;
      const canon = canonspec ? canonspec.entity$ ? canonspec.canon$({ object: true }) : parsecanon(canonspec) : null;
      if (!canon)
        return false;
      let selfcanon = self2.canon$({ object: true });
      let sckeys = Object.keys(selfcanon);
      let match2 = sckeys.length === Object.keys(canon).length;
      if (match2) {
        for (let key of sckeys) {
          match2 = match2 && selfcanon[key] === canon[key];
        }
      }
      return match2;
    }
    canon$(opt) {
      const self2 = this;
      const canon = self2.private$.canon;
      if (opt) {
        if (opt.isa) {
          const isa = parsecanon(opt.isa);
          return isa.zone == canon.zone && isa.base == canon.base && isa.name == canon.name;
        } else if (opt.parse) {
          return parsecanon(opt.parse);
        } else if (opt.change) {
          canon.zone = opt.change.zone == null ? canon.zone : opt.change.zone;
          canon.base = opt.change.base == null ? canon.base : opt.change.base;
          canon.name = opt.change.name == null ? canon.name : opt.change.name;
          if (null == opt.zone)
            delete canon.zone;
          if (null == opt.base)
            delete canon.base;
          if (null == opt.name)
            delete canon.name;
          self2.entity$ = self2.canon$();
        }
      }
      return null == opt || opt.string || opt.string$ ? (
        // ? [
        //   (opt && opt.string$ ? '$' : '') +
        //   (null == canon.zone ? '-' : canon.zone),
        //   null == canon.base ? '-' : canon.base,
        //   null == canon.name ? '-' : canon.name,
        // ].join('/') // TODO: make joiner an option
        (opt && opt.string$ ? "$" : "") + canonstr(canon)
      ) : opt.array ? [canon.zone, canon.base, canon.name] : opt.array$ ? [canon.zone, canon.base, canon.name] : opt.object ? { zone: canon.zone, base: canon.base, name: canon.name } : opt.object$ ? { zone$: canon.zone, base$: canon.base, name$: canon.name } : [canon.zone, canon.base, canon.name];
    }
    // data = object, or true|undef = include $, false = exclude $
    data$(data, canonkind) {
      const self2 = this;
      let val;
      if (data && "object" === typeof data) {
        for (const f in data) {
          if (f.charAt(0) !== "$" && f.charAt(f.length - 1) !== "$") {
            val = data[f];
            if (val && "object" === typeof val && val.entity$) {
              self2[f] = val.id;
            } else {
              self2[f] = val;
            }
          }
        }
        if (data.id$ != null) {
          self2.id$ = data.id$;
        }
        if (null != data.merge$) {
          self2.merge$ = data.merge$;
        }
        if (null != data.custom$) {
          self2.custom$(data.custom$);
        }
        if (null != data.directive$) {
          self2.directive$(data.directive$);
        }
        return self2;
      } else {
        const include_$ = null == data ? true : !!data;
        data = {};
        if (include_$) {
          canonkind = canonkind || "object";
          let canonformat = {};
          canonformat[canonkind] = true;
          data.entity$ = self2.canon$(canonformat);
          if (0 < Object.keys(self2.custom$).length) {
            data.custom$ = self2.private$.get_instance().util.deep(self2.custom$);
          }
        }
        const fields = self2.fields$();
        for (let fI = 0; fI < fields.length; fI++) {
          if (!~fields[fI].indexOf("$")) {
            val = self2[fields[fI]];
            if (val && "object" === typeof val && val.entity$) {
              data[fields[fI]] = val.id;
            } else if (void 0 !== val) {
              data[fields[fI]] = val;
            }
          }
        }
        return data;
      }
    }
    clone$() {
      const self2 = this;
      let deep = this.private$.get_instance().util.deep;
      let clone = self2.make$(deep({}, self2.data$()));
      if (0 < Object.keys(self2.custom$).length) {
        clone.custom$(self2.custom$);
      }
      if (0 < Object.keys(self2.directive$).length) {
        clone.directive$(self2.directive$);
      }
      return clone;
    }
    custom$(_props) {
      return this;
    }
    directive$(_directiveMap) {
      return this;
    }
  }
  Entity_1 = make_entity.Entity = Entity;
  function entityPromise(si, entmsg) {
    var _a;
    let attachMeta = true === ((_a = entmsg.q) === null || _a === void 0 ? void 0 : _a.meta$);
    return new Promise((res, rej) => {
      si.act(entmsg, (err, out, meta) => {
        err ? rej((attachMeta ? err.meta$ = meta : null, err)) : res((attachMeta ? ((out === null || out === void 0 ? void 0 : out.entity$) ? proto(out) : out || (out = { entity$: null })).meta$ = meta : null, out));
      });
    });
  }
  function prepareCmd(ent, data, entmsg, done) {
    if ("function" === typeof data) {
      done = data;
    } else if (data && "object" === typeof data) {
      ent.data$(data);
      entmsg.q = data;
    }
    return null == done ? void 0 : ent.done$ ? ent.done$(done) : done;
  }
  function emptyQuery(q) {
    return null == q || 0 === Object.keys(q).length;
  }
  function normalize_query(qin, ent, flags) {
    let q = qin;
    let inject_id = flags ? false === flags.inject_id ? false : true : true;
    if (inject_id) {
      if ((null == qin || "function" === typeof qin) && ent.id != null) {
        q = { id: ent.id };
      } else if ("string" === typeof qin || "number" === typeof qin) {
        q = qin === "" ? null : { id: qin };
      } else if ("function" === typeof qin) {
        q = null;
      }
    }
    if (null != q) {
      for (let k in q) {
        if (void 0 === q[k]) {
          delete q[k];
        }
      }
    }
    return q;
  }
  function parsecanon(str) {
    let out = {};
    if (Array.isArray(str)) {
      return {
        zone: str[0],
        base: str[1],
        name: str[2]
      };
    }
    if (str && "object" === typeof str && "function" !== typeof str)
      return str;
    if ("string" !== typeof str)
      return out;
    const m = /\$?((\w+|-)\/)?((\w+|-)\/)?(\w+|-)/.exec(str);
    if (m) {
      const zi = m[4] == null ? 4 : 2;
      const bi = m[4] == null ? 2 : 4;
      out.zone = m[zi] === "-" ? void 0 : m[zi];
      out.base = m[bi] === "-" ? void 0 : m[bi];
      out.name = m[5] === "-" ? void 0 : m[5];
    } else {
      throw new Error(`Invalid entity canon: ${str}; expected format: zone/base/name.`);
    }
    return out;
  }
  function canonstr(canon) {
    canon = canon || { name: "" };
    return [
      null == canon.zone || "" === canon.zone ? "-" : canon.zone,
      null == canon.base || "" === canon.base ? "-" : canon.base,
      null == canon.name || "" === canon.name ? "-" : canon.name
    ].join("/");
  }
  function handle_options(entopts, seneca) {
    var _a;
    entopts = entopts || /* @__PURE__ */ Object.create(null);
    let Jsonic2 = seneca.util.Jsonic;
    if (entopts.hide) {
      Object.keys(entopts.hide).forEach((hidden_fields) => {
        const canon_in = entopts.hide[hidden_fields];
        const canon = parsecanon(canon_in);
        const canon_str = [
          canon.zone == null ? "-" : canon.zone,
          canon.base == null ? "-" : canon.base,
          canon.name == null ? "-" : canon.name
        ].join("/");
        toString_map[canon_str] = make_toString(canon_str, hidden_fields, entopts, Jsonic2);
      });
    }
    if (false === ((_a = entopts.meta) === null || _a === void 0 ? void 0 : _a.provide)) {
      ;
      Entity.prototype.done$ = (done) => {
        return null == done ? void 0 : function(err, out) {
          done.call(this, err, out);
        };
      };
    }
    return entopts;
  }
  function make_toString(canon_str, hidden_fields_spec, opts, Jsonic2) {
    opts = opts || { jsonic: {} };
    let hidden_fields = [];
    if (Array.isArray(hidden_fields_spec)) {
      hidden_fields.concat(hidden_fields_spec);
    } else if (hidden_fields_spec && "object" === typeof hidden_fields_spec) {
      Object.keys(hidden_fields_spec).forEach((k) => {
        hidden_fields.push(k);
      });
    }
    hidden_fields.push("id");
    return function() {
      return [
        "$",
        canon_str || this.canon$({ string: true }),
        ";id=",
        this.id,
        ";",
        jsonic_stringify(this, {
          omit: hidden_fields,
          depth: opts.jsonic.depth,
          maxitems: opts.jsonic.maxitems,
          maxchars: opts.jsonic.maxchars
        })
      ].join("");
    };
  }
  function MakeEntity(canon, seneca, opts) {
    opts = handle_options(opts, seneca);
    const deep = seneca.util.deep;
    const ent = new Entity(canon, seneca, opts);
    let canon_str = ent.canon$({ string: true });
    let toString2 = (toString_map[canon_str] || toString_map[""] || (toString_map[""] = make_toString(void 0, void 0, void 0, seneca.util.Jsonic))).bind(ent);
    let custom$ = function(props) {
      if (null != props && ("object" === typeof props || "function" === typeof props)) {
        Object.assign(this.custom$, deep(props));
      }
      return ent;
    };
    let hidden = Object.create(Object.getPrototypeOf(ent));
    hidden.toString = toString2;
    hidden.custom$ = custom$;
    hidden.directive$ = function(directiveMap) {
      if (null != directiveMap && "object" === typeof directiveMap) {
        Object.assign(this.directive$, deep(directiveMap));
      }
      return ent;
    };
    hidden.private$ = ent.private$;
    hidden.private$.promise = !!opts.promise;
    Object.setPrototypeOf(ent, hidden);
    delete ent.private$;
    return ent;
  }
  var MakeEntity_1 = make_entity.MakeEntity = MakeEntity;
  MakeEntity.parsecanon = parsecanon;
  MakeEntity.canonstr = canonstr;
  function jsonic_strify(val, opts, depth) {
    depth++;
    if (null == val)
      return "null";
    var type = Object.prototype.toString.call(val).charAt(8);
    if ("F" === type && !opts.showfunc)
      return null;
    if (opts.custom) {
      if (val.hasOwnProperty("toString")) {
        return val.toString();
      } else if (val.hasOwnProperty("inspect")) {
        return val.inspect();
      }
    }
    var out, i = 0, j, k;
    if ("N" === type) {
      return isNaN(val) ? "null" : val.toString();
    } else if ("O" === type) {
      out = [];
      if (depth <= opts.depth) {
        j = 0;
        for (let i2 in val) {
          if (j >= opts.maxitems)
            break;
          var pass = true;
          for (k = 0; k < opts.exclude.length && pass; k++) {
            pass = !~i2.indexOf(opts.exclude[k]);
          }
          pass = pass && !opts.omit[i2];
          var str = jsonic_strify(val[i2], opts, depth);
          if (null != str && pass) {
            var n = i2.match(/^[a-zA-Z0-9_$]+$/) ? i2 : JSON.stringify(i2);
            out.push(n + ":" + str);
            j++;
          }
        }
      }
      return "{" + out.join(",") + "}";
    } else if ("A" === type) {
      out = [];
      if (depth <= opts.depth) {
        for (; i < val.length && i < opts.maxitems; i++) {
          var str = jsonic_strify(val[i], opts, depth);
          if (null != str) {
            out.push(str);
          }
        }
      }
      return "[" + out.join(",") + "]";
    } else {
      var valstr = val.toString();
      if (~` "'\r
	,}]`.indexOf(valstr[0]) || !~valstr.match(/,}]/) || ~" \r\n	".indexOf(valstr[valstr.length - 1])) {
        valstr = "'" + valstr.replace(/'/g, "\\'") + "'";
      }
      return valstr;
    }
  }
  function jsonic_stringify(val, callopts) {
    try {
      var callopts = callopts || {};
      var opts = {};
      opts.showfunc = callopts.showfunc || callopts.f || false;
      opts.custom = callopts.custom || callopts.c || false;
      opts.depth = callopts.depth || callopts.d || 3;
      opts.maxitems = callopts.maxitems || callopts.mi || 11;
      opts.maxchars = callopts.maxchars || callopts.mc || 111;
      opts.exclude = callopts.exclude || callopts.x || ["$"];
      var omit = callopts.omit || callopts.o || [];
      opts.omit = {};
      for (var i = 0; i < omit.length; i++) {
        opts.omit[omit[i]] = true;
      }
      var str = jsonic_strify(val, opts, 0);
      str = null == str ? "" : str.substring(0, opts.maxchars);
      return str;
    } catch (e) {
      return "ERROR: jsonic.stringify: " + e + " input was: " + JSON.stringify(val);
    }
  }
  var store = {};
  "use strict";
  Object.defineProperty(store, "__esModule", { value: true });
  var Store_1 = store.Store = Intern_1 = store.Intern = void 0;
  const allcmds = ["save", "load", "list", "remove", "close", "native"];
  function Store(plugin_opts) {
    const tag_count_map = {};
    function make_tag(store_name) {
      tag_count_map[store_name] = (tag_count_map[store_name] || 0) + 1;
      return tag_count_map[store_name];
    }
    const store2 = {
      cmds: allcmds.slice(0),
      // opts.map = { canon: [cmds] }
      // canon is in string format zone/base/name, with empty or - indicating undefined
      init: function(instance, store_opts, store3, cb) {
        const entspecs = [];
        if (store_opts.map) {
          for (const canon in store_opts.map) {
            let cmds = store_opts.map[canon];
            if (cmds === "*") {
              cmds = allcmds;
            }
            entspecs.push({ canon, cmds });
          }
        } else {
          entspecs.push({ canon: "-/-/-", cmds: allcmds });
        }
        const plugin_tag = instance.fixedargs && instance.fixedargs.plugin$ && instance.fixedargs.plugin$.tag;
        const tag = plugin_tag == null || plugin_tag === "-" ? make_tag(store3.name) : plugin_tag;
        const storedesc = [store3.name, tag];
        for (let esI = 0; esI < entspecs.length; esI++) {
          const entspec = entspecs[esI];
          storedesc.push(entspec.canon);
          let zone;
          let base;
          let name;
          let m = /^(\w*|-)\/(\w*|-)\/(\w*|-)$/.exec(entspec.canon);
          if (m) {
            zone = m[1];
            base = m[2];
            name = m[3];
          } else if (m = /^(\w*|-)\/(\w*|-)$/.exec(entspec.canon)) {
            base = m[1];
            name = m[2];
          } else if (m = /^(\w*|-)$/.exec(entspec.canon)) {
            name = m[1];
          }
          zone = zone === "-" ? void 0 : zone;
          base = base === "-" ? void 0 : base;
          name = name === "-" ? void 0 : name;
          const entargs2 = {};
          if (void 0 !== name)
            entargs2.name = name;
          if (void 0 !== base)
            entargs2.base = base;
          if (void 0 !== zone)
            entargs2.zone = zone;
          entspec.cmds.forEach(function(cmd) {
            const args = __spreadValues(__spreadProps(__spreadValues({}, entargs2), { cmd }), plugin_opts.pattern_fix);
            const orig_cmdfunc = store3[cmd];
            let cmdfunc = orig_cmdfunc;
            if (null == cmdfunc) {
              return instance.die("store_cmd_missing", {
                cmd,
                store: storedesc
              });
            }
            cmdfunc = Intern.reify_entity_wrap(cmdfunc, cmd, zone, base, name);
            for (const p in orig_cmdfunc) {
              cmdfunc[p] = orig_cmdfunc[p];
            }
            if (cmd !== "close") {
              instance.add(args, cmdfunc);
            } else if (cmd === "close") {
              instance.add("role:seneca,cmd:close", function(close_args, done) {
                const closer = this;
                if (!store3.closed$) {
                  cmdfunc.call(closer, close_args, function(err) {
                    if (err)
                      closer.log.error("close-error", close_args, err);
                    store3.closed$ = true;
                    closer.prior(close_args, done);
                  });
                } else {
                  return closer.prior(close_args, done);
                }
              });
            }
          });
        }
        if (cb) {
          cb.call(instance, null, tag, storedesc.join("~"));
        } else {
          return {
            tag,
            desc: storedesc.join("~")
          };
        }
      }
    };
    return store2;
  }
  Store_1 = store.Store = Store;
  const Intern = {
    // Ensure entity objects are instantiated
    reify_entity_wrap: function(cmdfunc, cmd, zone, base, name) {
      const outfunc = function(msg, reply, meta) {
        if ("save" !== msg.cmd) {
          if (null == msg.q) {
            msg.q = {};
            if (null != msg.id) {
              msg.q.id = msg.id;
              delete msg.id;
            }
          }
          if (null == msg.qent) {
            msg.qent = this.make$({
              entity$: {
                name: msg.name,
                base: msg.base,
                zone: msg.zone
              }
            });
          }
        }
        if (null != msg.ent && "function" != typeof msg.ent.canon$) {
          msg.ent = this.make$({
            entity$: {
              name: msg.name,
              base: msg.base,
              zone: msg.zone
            }
          }).data$(msg.ent);
        }
        return cmdfunc.call(this, msg, reply, meta);
      };
      Object.defineProperty(outfunc, "name", {
        value: "entity_" + cmd + (null == zone ? "" : zone + "_") + (null == base ? "" : base + "_") + (null == name ? "" : name)
      });
      return outfunc;
    }
  };
  var Intern_1 = store.Intern = Intern;
  var memStore$1 = { exports: {} };
  var intern = {};
  var hasRequiredIntern;
  function requireIntern() {
    if (hasRequiredIntern)
      return intern;
    hasRequiredIntern = 1;
    "use strict";
    Object.defineProperty(intern, "__esModule", { value: true });
    intern.intern = void 0;
    let intern$1 = class intern2 {
      static is_new(ent) {
        return null != ent && null == ent.id;
      }
      static is_upsert(msg) {
        const { ent, q } = msg;
        return intern2.is_new(ent) && q && Array.isArray(q.upsert$);
      }
      static find_mement(entmap, base_ent, filter2) {
        const { base, name } = base_ent.canon$({ object: true });
        const entset = entmap[base] && entmap[base][name];
        if (null == entset) {
          return null;
        }
        let out = null;
        for (const ent_id in entset) {
          const mement = entset[ent_id];
          if (matches(mement, filter2)) {
            out = mement;
            break;
          }
        }
        return out;
        function matches(ent, filter3) {
          for (const fp in filter3) {
            if (fp in ent && filter3[fp] === ent[fp]) {
              continue;
            }
            return false;
          }
          return true;
        }
      }
      static update_mement(entmap, base_ent, filter2, new_attrs) {
        const ent_to_update = intern2.find_mement(entmap, base_ent, filter2);
        if (ent_to_update) {
          Object.assign(ent_to_update, new_attrs);
          return ent_to_update;
        }
        return null;
      }
      static should_merge(ent, plugin_opts) {
        return !(false === plugin_opts.merge || false === ent.merge$);
      }
      // NOTE: Seneca supports a reasonable set of features
      // in terms of listing. This function can handle
      // sorting, skiping, limiting and general retrieval.
      //
      static listents(seneca, entmap, qent, q, done) {
        let list = [];
        let canon = qent.canon$({ object: true });
        let base = canon.base;
        let name = canon.name;
        let entset = entmap[base] ? entmap[base][name] : null;
        let ent;
        if (null != entset && null != q) {
          if ("string" == typeof q) {
            ent = entset[q];
            if (ent) {
              list.push(ent);
            }
          } else if (Array.isArray(q)) {
            q.forEach(function(id) {
              let ent2 = entset[id];
              if (ent2) {
                ent2 = qent.make$(ent2);
                list.push(ent2);
              }
            });
          } else if ("object" === typeof q) {
            let entids = Object.keys(entset);
            next_ent:
              for (let id of entids) {
                ent = entset[id];
                for (let p in q) {
                  let qv = q[p];
                  let ev = ent[p];
                  if (-1 === p.indexOf("$")) {
                    if (Array.isArray(qv)) {
                      if (-1 === qv.indexOf(ev)) {
                        continue next_ent;
                      }
                    } else if (intern2.is_object(qv)) {
                      if (null != qv.$ne && qv.$ne == ev || null != qv.$gte && qv.$gte > ev || null != qv.$gt && qv.$gt >= ev || null != qv.$lt && qv.$lt <= ev || null != qv.$lte && qv.$lte < ev || null != qv.$in && -1 === qv.$in.indexOf(ev) || null != qv.$nin && -1 !== qv.$nin.indexOf(ev) || false) {
                        continue next_ent;
                      }
                    } else {
                      if (intern2.is_date(qv)) {
                        if (!(intern2.is_date(ev) && intern2.eq_dates(qv, ev))) {
                          continue next_ent;
                        }
                      } else if (qv !== ev) {
                        continue next_ent;
                      }
                    }
                  }
                }
                ent = qent.make$(ent);
                list.push(ent);
              }
          }
        }
        if (null != q && q.sort$) {
          let sf;
          for (sf in q.sort$) {
            break;
          }
          let sd = q.sort$[sf] < 0 ? -1 : 1;
          list = list.sort(function(a, b) {
            return sd * (a[sf] < b[sf] ? -1 : a[sf] === b[sf] ? 0 : 1);
          });
        }
        if (null != q && q.skip$ && q.skip$ > 0) {
          list = list.slice(q.skip$);
        }
        if (null != q && q.limit$ && q.limit$ >= 0) {
          list = list.slice(0, q.limit$);
        }
        if (null != q && q.fields$) {
          for (let i = 0; i < list.length; i++) {
            let entfields = list[i].fields$();
            for (let j = 0; j < entfields.length; j++) {
              if ("id" !== entfields[j] && -1 == q.fields$.indexOf(entfields[j])) {
                delete list[i][entfields[j]];
              }
            }
          }
        }
        done.call(seneca, null, list);
      }
      static clean_array(ary) {
        return ary.filter((prop) => !prop.includes("$"));
      }
      static is_object(x) {
        return "[object Object]" === toString.call(x);
      }
      static is_date(x) {
        return "[object Date]" === toString.call(x);
      }
      static eq_dates(lv, rv) {
        return lv.getTime() === rv.getTime();
      }
    };
    intern.intern = intern$1;
    return intern;
  }
  var memStore = memStore$1.exports;
  var hasRequiredMemStore;
  function requireMemStore() {
    if (hasRequiredMemStore)
      return memStore$1.exports;
    hasRequiredMemStore = 1;
    (function(module2, exports3) {
      "use strict";
      Object.defineProperty(exports3, "__esModule", { value: true });
      const intern_1 = requireIntern();
      let internals = {
        name: "mem-store"
      };
      function mem_store(options) {
        let seneca = this;
        let init2 = seneca.export("entity/init");
        options = seneca.util.deepextend({
          prefix: "/mem-store",
          idlen: 6,
          web: {
            dump: false
          },
          // TODO: use seneca.export once it allows for null values
          generate_id: seneca.root.private$.exports["entity/generate_id"]
        }, options);
        let desc;
        let entmap = {};
        let store2 = {
          // The name of the plugin, this is what is the name you would
          // use in seneca.use(), eg seneca.use('mem-store').
          name: internals.name,
          save: function(msg, reply) {
            let seneca2 = this;
            let ent = msg.ent;
            let canon = ent.canon$({ object: true });
            let zone = canon.zone;
            let base = canon.base;
            let name = canon.name;
            const is_new = intern_1.intern.is_new(ent);
            return is_new ? do_create() : do_save();
            function do_save(id, isnew) {
              entmap[base] = entmap[base] || {};
              entmap[base][name] = entmap[base][name] || {};
              const mement = ent.data$(true, "string");
              let mement_ptr = null;
              let operation = null;
              if (intern_1.intern.is_upsert(msg)) {
                operation = "upsert";
                mement_ptr = try_upsert(mement, msg);
              }
              if (null == mement_ptr) {
                operation = intern_1.intern.is_new(msg.ent) ? "insert" : "update";
                mement_ptr = complete_save(mement, msg, id, isnew);
              }
              const result_mement = seneca2.util.deep(mement_ptr);
              const result_ent = ent.make$(result_mement);
              seneca2.log.debug("save/" + operation, ent.canon$({ string: 1 }), mement_ptr, desc);
              return reply(null, result_ent);
              function try_upsert(mement2, msg2) {
                const { q, ent: ent2 } = msg2;
                const upsert_on = intern_1.intern.clean_array(q.upsert$);
                if (0 < upsert_on.length) {
                  const has_upsert_fields = upsert_on.every((p) => p in mement2);
                  if (has_upsert_fields) {
                    const match_by = upsert_on.reduce((h, p) => {
                      h[p] = mement2[p];
                      return h;
                    }, {});
                    const updated_ent = intern_1.intern.update_mement(entmap, ent2, match_by, mement2);
                    return updated_ent;
                  }
                }
                return null;
              }
              function complete_save(mement2, msg2, id2, isnew2) {
                const { ent: ent2 } = msg2;
                if (null != id2) {
                  mement2.id = id2;
                }
                const prev2 = entmap[base][name][mement2.id];
                if (isnew2 && prev2) {
                  seneca2.fail("entity-id-exists", {
                    type: ent2.entity$,
                    id: mement2.id
                  });
                  return;
                }
                const should_merge = intern_1.intern.should_merge(ent2, options);
                if (should_merge) {
                  mement2 = Object.assign(prev2 || {}, mement2);
                }
                entmap[base][name][mement2.id] = mement2;
                return mement2;
              }
            }
            function do_create() {
              let id;
              if (null != ent.id$) {
                id = ent.id$;
                delete ent.id$;
                return do_save(id, true);
              }
              id = options.generate_id ? options.generate_id(ent) : void 0;
              if (null == id) {
                seneca2.fail("generate-invalid-entity-id", {
                  type: ent.entity$,
                  id
                });
              } else {
                return do_save(id, true);
              }
            }
          },
          load: function(msg, reply) {
            let qent = msg.qent;
            let q = msg.q || {};
            return intern_1.intern.listents(this, entmap, qent, q, function(err, list) {
              let ent = list[0] || null;
              this.log.debug("load", q, qent.canon$({ string: 1 }), ent, desc);
              reply(err, ent);
            });
          },
          list: function(msg, reply) {
            let qent = msg.qent;
            let q = msg.q || {};
            return intern_1.intern.listents(this, entmap, qent, q, function(err, list) {
              this.log.debug("list", q, qent.canon$({ string: 1 }), list.length, list[0], desc);
              reply(err, list);
            });
          },
          remove: function(msg, reply) {
            let seneca2 = this;
            let qent = msg.qent;
            let q = msg.q || {};
            let all = q.all$;
            let load = q.load$ === true;
            return intern_1.intern.listents(seneca2, entmap, qent, q, function(err, list) {
              if (err) {
                return reply(err);
              }
              list = list || [];
              list = all ? list : list.slice(0, 1);
              list.forEach(function(ent2) {
                let canon = qent.canon$({
                  object: true
                });
                delete entmap[canon.base][canon.name][ent2.id];
                seneca2.log.debug("remove/" + (all ? "all" : "one"), q, qent.canon$({ string: 1 }), ent2, desc);
              });
              let ent = !all && load && list[0] || null;
              reply(null, ent);
            });
          },
          close: function(_msg, reply) {
            this.log.debug("close", desc);
            reply();
          },
          // .native() is used to handle calls to the underlying driver. Since
          // there is no underlying driver for mem-store we simply return the
          // default entityMap object.
          native: function(_msg, reply) {
            reply(null, entmap);
          }
        };
        let meta = init2(seneca, options, store2);
        desc = meta.desc;
        seneca.add({ role: store2.name, cmd: "dump" }, function(_msg, reply) {
          reply(null, entmap);
        });
        seneca.add({ role: store2.name, cmd: "export" }, function(_msg, reply) {
          let entjson = JSON.stringify(entmap);
          reply(null, { json: entjson });
        });
        seneca.add({ role: store2.name, cmd: "import" }, function(msg, reply) {
          let imported = JSON.parse(msg.json);
          entmap = msg.merge ? this.util.deepextend(entmap, imported) : imported;
          reply();
        });
        seneca.init(function(reply) {
          var _a;
          if ((_a = options === null || options === void 0 ? void 0 : options.web) === null || _a === void 0 ? void 0 : _a.dump) {
            this.act("role:web", {
              use: {
                prefix: options.prefix,
                pin: { role: "mem-store", cmd: "*" },
                map: { dump: true }
              },
              default$: {}
            });
          }
          return reply();
        });
        return {
          name: store2.name,
          tag: meta.tag,
          exportmap: {
            native: entmap
          }
        };
      }
      mem_store.preload = function() {
        let seneca = this;
        let meta = {
          name: internals.name,
          exportmap: {
            native: function() {
              seneca.export(internals.name + "/native").apply(this, arguments);
            }
          }
        };
        return meta;
      };
      mem_store.defaults = {
        "entity-id-exists": "Entity of type <%=type%> with id = <%=id%> already exists."
      };
      mem_store.intern = intern_1.intern;
      Object.defineProperty(mem_store, "name", { value: "mem-store" });
      exports3.default = mem_store;
      if (true) {
        module2.exports = mem_store;
      }
    })(memStore$1, memStore$1.exports);
    return memStore$1.exports;
  }
  var entity_1 = entity.exports;
  (function(module2, exports3) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", { value: true });
    const make_entity_1 = make_entity;
    const store_1 = store;
    function entity2(_options) {
      return {
        // Define name, as tools like rollup will rename this function, breaking stuff.
        name: "entity"
      };
    }
    entity2.defaults = {
      mem_store: true,
      generate_id,
      pattern_fix: { sys: "entity" },
      // Control stringification of entities
      jsonic: {
        depth: 7,
        maxitems: 11,
        maxchars: 111
      },
      log: {
        active: false
      },
      // hide: Open({}),
      meta: {
        // Provide action meta object as third argument to callbacks.
        provide: true
      }
    };
    function preload(context) {
      var _a;
      const seneca = this;
      const options = context.options;
      seneca.util.parsecanon = seneca.util.parsecanon || make_entity_1.MakeEntity.parsecanon;
      const sd = seneca.delegate();
      seneca.private$.entity = seneca.private$.entity || (0, make_entity_1.MakeEntity)({}, sd, options);
      seneca.private$.exports.Entity = seneca.private$.exports.Entity || make_entity_1.Entity;
      function build_api_make(promise) {
        let entityAPI = function entityAPI2() {
          let ent = seneca.private$.entity.make$(this, ...[...arguments, promise]);
          return ent;
        };
        return entityAPI;
      }
      let make = build_api_make(false);
      let entity3 = build_api_make(true);
      if (!seneca.make$) {
        seneca.decorate("make$", make);
      }
      if (!seneca.make) {
        seneca.decorate("make", make);
      }
      if (!seneca.entity) {
        seneca.decorate("entity", entity3);
      }
      seneca.translate("role:entity,cmd:load", "sys:entity,role:null").translate("role:entity,cmd:save", "sys:entity,role:null").translate("role:entity,cmd:list", "sys:entity,role:null").translate("role:entity,cmd:remove", "sys:entity,role:null");
      const store2 = (0, store_1.Store)(options);
      if (options.mem_store) {
        seneca.root.use(requireMemStore());
      }
      if ((_a = options.log) === null || _a === void 0 ? void 0 : _a.active) {
        seneca.root.private$.exports.Entity.prototype.log$ = function() {
          const seneca2 = this.private$.get_instance();
          seneca2.log.apply(seneca2, arguments);
        };
      }
      return {
        // Define name, as tools like rollup will rename this function, breaking stuff.
        name: "entity",
        exports: {
          store: store2,
          init: store2.init,
          generate_id: options.generate_id.bind(seneca)
        }
      };
    }
    entity2.preload = preload;
    const nidCache = [];
    function generate_id(msg, reply) {
      let seneca = this;
      let Nid = seneca.util.Nid;
      let actnid = null == msg ? Nid({}) : null;
      if (null == actnid) {
        const length2 = "object" === typeof msg ? parseInt(msg.length, 10) || 6 : parseInt(msg, 10);
        if (length2 < 65) {
          actnid = nidCache[length2] || (nidCache[length2] = Nid({ length: length2 }));
        } else {
          actnid = Nid({ length: length2 });
        }
      }
      return reply ? reply(actnid()) : actnid();
    }
    Object.defineProperty(entity2, "name", { value: "entity" });
    exports3.default = entity2;
    if (true) {
      module2.exports = entity2;
    }
  })(entity, entity.exports);
  var entityExports = entity.exports;
  const SenecaEntity = /* @__PURE__ */ getDefaultExportFromCjs(entityExports);
  function S(t) {
    let e = this, o = e.export("entity/init"), u = t.handleResponse, i = ["save", "load", "list", "remove"].reduce(
      (n, r2) => (n[r2] = u[r2] || u.any, n),
      {}
    );
    const b = [];
    function m(n, r2, c) {
      let a = {}, s = c.apimsg;
      for (let l in s) {
        let f = s[l];
        typeof f == "function" ? a[l] = f(n, r2, c) : a[l] = JSON.parse(JSON.stringify(f));
      }
      return a;
    }
    let d = {
      name: "BrowserStore",
      save: function(n, r2, c) {
        let a = t.debug && v(arguments), s = t.prepareCtx(n), l = m(n, s, t);
        a && w(a, s, l), this.act(
          l,
          function(g, _2, p) {
            return a && h(a, arguments), i.save(this, s, r2, g, _2, p, a);
          }
        );
      },
      load: function(n, r2, c) {
        let a = t.debug && v(arguments), s = t.prepareCtx(n), l = m(n, s, t);
        a && w(a, s, l), this.act(
          l,
          function(g, _2, p) {
            return a && h(a, arguments), i.load(this, s, r2, g, _2, p, a);
          }
        );
      },
      list: function(n, r2, c) {
        let a = t.debug && v(arguments), s = t.prepareCtx(n), l = m(n, s, t);
        a && w(a, s, l), this.act(
          l,
          function(g, _2, p) {
            return a && h(a, arguments), i.list(this, s, r2, g, _2, p, a);
          }
        );
      },
      remove: function(n, r2, c) {
        let a = t.debug && v(arguments), s = t.prepareCtx(n), l = m(n, s, t);
        a && w(a, s, l), this.act(
          l,
          function(g, _2, p) {
            return a && h(a, arguments), i.remove(
              this,
              s,
              r2,
              g,
              _2,
              p,
              a
            );
          }
        );
      },
      close: function(n, r2) {
        r2();
      },
      native: function(n, r2) {
        r2();
      }
    }, $ = o(e, t, d);
    function v(n) {
      let r2 = t.debug && {
        msg: n[0],
        meta: n[2],
        start: Date.now()
      };
      return r2 && b.push(r2), r2;
    }
    function w(n, r2, c) {
      return n.apistart = Date.now(), n.ctx = r2, n.apimsg = c, n;
    }
    function h(n, r2) {
      return n.apiend = Date.now(), n.err = r2[0], n.res = r2[1], n.apimeta = r2[2], n;
    }
    return {
      name: d.name,
      tag: $.tag,
      exports: {
        makeApiMsg: m,
        msglog: b
      }
    };
  }
  function y(t, e) {
    return t.entity(e.zone, e.base, e.name).canon$();
  }
  S.defaults = {
    debug: false,
    apimsg: {
      aim: "req",
      on: "entity",
      debounce$: true,
      q: (t, e) => t.q,
      ent: (t, e) => t.ent,
      // cmd: (_msg: any, ctx: any) => ctx.cmd,
      save: (t, e) => e.cmd === "save" ? "entity" : void 0,
      load: (t, e) => e.cmd === "load" ? "entity" : void 0,
      list: (t, e) => e.cmd === "list" ? "entity" : void 0,
      remove: (t, e) => e.cmd === "remove" ? "entity" : void 0,
      store: (t, e) => e.store,
      name: (t, e) => e.name,
      base: (t, e) => e.base,
      zone: (t, e) => e.zone
    },
    prepareCtx: (t, e) => {
      e = e || {};
      let o = t.q;
      e.store = o.store$ !== false, delete o.store$, e.cmd = t.cmd;
      let u = t.ent || t.qent;
      if (u) {
        if (u.canon$)
          Object.assign(e, u.canon$({ object: true }));
        else if (u.entity$) {
          let i = u.entity$.split("/");
          Object.assign(e, {
            zone: i[0] === "-" ? null : i[0],
            base: i[1] === "-" ? null : i[1],
            name: i[2] === "-" ? null : i[2]
          });
        }
      }
      return e;
    },
    handleResponse: {
      any: function(t, e, o, u, i, b, m) {
        if (m && (m.end = Date.now()), u)
          return o(u);
        if (i && i.ok)
          return o(i.ent);
        {
          let d = i && i.err;
          return d = d || new Error(
            `BrowserStore: ${e.cmd} ${y(t, e)}: unknown error`
          ), o(d);
        }
      },
      list: function(t, e, o, u, i, b, m) {
        if (m && (m.end = Date.now()), u && o(u), i && i.ok && i.list) {
          let d = t.entity({ zone: e.zone, base: e.base, name: e.name }), $ = i.list.map((v) => d.make$().data$(v));
          m && (m.end = Date.now()), o($);
        } else {
          let d = i && i.err;
          d = d || new Error(
            `BrowserStore: ${e.cmd} ${y(t, e)}: unknown list error`
          ), o(d);
        }
      }
    }
  };
  Object.defineProperty(S, "name", { value: "BrowserStore" });
  var gubu_min$2 = { exports: {} };
  var gubu_min = gubu_min$2.exports;
  (function(module2, exports3) {
    !function(e) {
      if (true)
        module2.exports = e();
      else if (false)
        (void 0)([], e);
      else {
        ("undefined" != typeof window ? window : "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : this).Gubu = e();
      }
    }(function() {
      var e = {}, t = {};
      Object.defineProperty(t, "__esModule", { value: true }), t.Gubu = void 0;
      const n = Symbol.for("gubu$"), l = { gubu$: n, v$: "6.0.1" }, r2 = Symbol.for("gubu$nil"), i = /^[A-Z]/, o = "gubu", s = "name", u = "nan", a = "never", c = "number", f = "required", p = "array", h = "function", v = "object", d = "string", g = "boolean", m = "undefined", y2 = "any", b = "list", x = "instance", $ = "null", I = "type", k = "closed", j = "shape", w = "check", O = "Object", N = "Array", S2 = "Function", V = "Value", R = "Above", A = "All", D = "Below", E = "Max", C = "Min", G = "Len", B = "One", T = "Some", M = " for property ", L = '"$PATH"', F = '"$VALUE"', P = (e2) => Object.keys(e2), z = (e2, t2, n2) => Object.defineProperty(e2, t2, n2), q = (e2) => Array.isArray(e2), W = (e2) => JSON.parse(e2), _2 = (e2, t2) => JSON.stringify(e2, t2);
      class J {
        constructor(e2, t2, n2, l2) {
          this.match = false, this.dI = 0, this.nI = 2, this.cI = -1, this.pI = 0, this.sI = -1, this.valType = a, this.isRoot = false, this.key = "", this.type = a, this.stop = true, this.nextSibling = true, this.fromDefault = false, this.ignoreVal = void 0, this.curerr = [], this.err = [], this.parents = [], this.keys = [], this.path = [], this.root = e2, this.vals = [e2, -1], this.node = t2, this.nodes = [t2, -1], this.ctx = n2 || {}, this.match = !!l2;
        }
        next() {
          this.stop = false, this.fromDefault = false, this.ignoreVal = void 0, this.isRoot = 0 === this.pI, this.check = void 0;
          let e2 = this.nodes[this.pI];
          for (; +e2; )
            this.dI--, this.ctx.log && -1 < this.dI && this.ctx.log("e" + (q(this.parents[this.pI]) ? "a" : "o"), this), this.pI = +e2, e2 = this.nodes[this.pI];
          e2 ? (this.node = e2, this.updateVal(this.vals[this.pI]), this.key = this.keys[this.pI], this.cI = this.pI, this.sI = this.pI + 1, this.parent = this.parents[this.pI], this.nextSibling = true, this.type = this.node.t, this.path[this.dI] = this.key, this.oval = this.val, this.curerr.length = 0) : this.stop = true;
        }
        updateVal(e2) {
          this.val = e2, this.valType = typeof this.val, c === this.valType && isNaN(this.val) && (this.valType = u), this.isRoot && !this.match && (this.root = this.val);
        }
      }
      class H extends TypeError {
        constructor(e2, t2, n2, l2) {
          var r3;
          super((t2 = null == t2 ? "" : t2 + ": ") + n2.map((e3) => e3.t).join("\n")), this.gubu = true, this.name = "GubuError", this.code = e2, this.prefix = t2, this.desc = () => ({ name: "GubuError", code: e2, err: n2, ctx: l2 }), this.stack = null === (r3 = this.stack) || void 0 === r3 ? void 0 : r3.replace(/.*\/gubu\/gubu\.[tj]s.*\n/g, ""), this.props = n2.map((e3) => {
            var t3;
            return { path: e3.p, what: e3.w, type: null === (t3 = e3.n) || void 0 === t3 ? void 0 : t3.t, value: e3.v };
          });
        }
        toJSON() {
          return Object.assign(Object.assign({}, this), { err: this.desc().err, name: this.name, message: this.message });
        }
      }
      const U = { String: true, Number: true, Boolean: true, Object: true, Array: true, Function: true, Symbol: true, BigInt: true }, K = { string: "", number: 0, boolean: false, object: {}, array: [], symbol: Symbol(""), bigint: BigInt(0), null: null };
      function Z(e2, t2, o2) {
        var s2, a2, f2, g2;
        if (Q === e2)
          e2 = void 0;
        else if (null != e2 && (null === (s2 = e2.$) || void 0 === s2 ? void 0 : s2.gubu$)) {
          if (n === e2.$.gubu$)
            return e2.d = null == t2 ? e2.d : t2, e2;
          if (true === e2.$.gubu$) {
            let l2 = Object.assign({}, e2);
            return l2.$ = Object.assign(Object.assign({ v$: "6.0.1" }, l2.$), { gubu$: n }), l2.v = null != l2.v && v === typeof l2.v ? Object.assign({}, l2.v) : l2.v, l2.t = l2.t || typeof l2.v, h === l2.t && U[l2.v.name] && (l2.t = l2.v.name.toLowerCase(), l2.v = Me(K[l2.t]), l2.f = l2.v), l2.r = !!l2.r, l2.p = !!l2.p, l2.d = null == t2 ? null == l2.d ? -1 : l2.d : t2, l2.b = l2.b || [], l2.a = l2.a || [], l2.u = l2.u || {}, l2.m = l2.m || o2 || {}, l2;
          }
        }
        let b2 = null === e2 ? $ : typeof e2;
        b2 = m === b2 ? y2 : b2;
        let I2 = e2, k2 = I2, j2 = r2, w2 = false, N2 = {}, V2 = [], R2 = [];
        if (v === b2)
          k2 = void 0, q(I2) ? (b2 = p, 1 === I2.length && (j2 = I2[0], I2 = [])) : null != I2 && Function !== I2.constructor && Object !== I2.constructor && null != I2.constructor ? (b2 = x, N2.n = I2.constructor.name, N2.i = I2.constructor, k2 = I2) : 0 === P(I2).length && (j2 = oe());
        else if (h === b2)
          if (U[e2.name])
            b2 = e2.name.toLowerCase(), w2 = true, I2 = Me(K[b2]), k2 = I2, O === e2.name && (j2 = oe());
          else if (I2.gubu === l || true === (null === (a2 = I2.$) || void 0 === a2 ? void 0 : a2.gubu)) {
            let e3 = I2.node ? I2.node() : I2;
            b2 = e3.t, I2 = e3.v, k2 = I2, w2 = e3.r, N2 = Object.assign({}, e3.u), V2 = [...e3.a], R2 = [...e3.b];
          } else
            S2 === I2.constructor.name && i.test(I2.name) && (b2 = x, w2 = true, N2.n = null === (g2 = null === (f2 = I2.prototype) || void 0 === f2 ? void 0 : f2.constructor) || void 0 === g2 ? void 0 : g2.name, N2.i = I2);
        else
          c === b2 && isNaN(I2) ? b2 = u : d === b2 && "" === I2 && (N2.empty = true);
        let A2 = null == I2 || v !== b2 && p !== b2 ? I2 : Object.assign({}, I2);
        return { $: l, t: b2, v: A2, f: k2, n: null != A2 && v === typeof A2 ? P(A2).length : 0, c: j2, r: w2, p: false, d: null == t2 ? -1 : t2, k: [], e: true, u: N2, a: V2, b: R2, m: o2 || {} };
      }
      function Q(t2, i2) {
        const o2 = null == i2 ? {} : i2;
        o2.name = null == o2.name ? "G" + ("" + Math.random()).substring(2, 8) : "" + o2.name, o2.prefix = null == o2.prefix ? void 0 : o2.prefix;
        let s2 = o2.meta = o2.meta || {};
        s2.active = true === s2.active || false, s2.suffix = d == typeof s2.suffix ? s2.suffix : "$$";
        let u2 = o2.keyexpr = o2.keyexpr || {};
        u2.active = false !== u2.active;
        let c2 = Z(t2, 0);
        function h2(e2, t3, n2) {
          let l2 = new J(e2, c2, t3, n2);
          for (; l2.next(), !l2.stop; ) {
            let t4 = l2.node, n3 = false, i3 = false;
            if (0 < t4.b.length)
              for (let e3 = 0; e3 < t4.b.length; e3++) {
                let r3 = Y(t4.b[e3], l2);
                t4 = l2.node, void 0 !== r3.done && (n3 = r3.done), i3 = i3 || !!r3.fatal;
              }
            if (!n3) {
              let n4 = true, i4 = void 0 === l2.val;
              if (a === l2.type)
                l2.curerr.push(Ge(a, l2, 1070));
              else if (v === l2.type) {
                let e3;
                if (t4.r && i4 ? (l2.ignoreVal = true, l2.curerr.push(Ge(f, l2, 1010))) : i4 || null !== l2.val && v === l2.valType && !q(l2.val) ? !t4.p && i4 && void 0 !== t4.f ? (l2.updateVal(t4.f), l2.fromDefault = true, e3 = l2.val, n4 = false) : t4.p && i4 || (l2.updateVal(l2.val || (l2.fromDefault = true, {})), e3 = l2.val) : (l2.curerr.push(Ge(I, l2, 1020)), e3 = q(l2.val) ? l2.val : {}), n4 && (e3 = null == e3 && false === l2.ctx.err ? {} : e3, null != e3)) {
                  l2.ctx.log && l2.ctx.log("so", l2);
                  let n5 = false, i5 = P(t4.v), o4 = l2.nI;
                  if (0 < i5.length) {
                    n5 = true, l2.pI = o4;
                    for (let n6 = 0; n6 < i5.length; n6++) {
                      let r3, o5 = i5[n6];
                      if (s2.active && o5.endsWith(s2.suffix)) {
                        if (r3 = { short: "" }, d === typeof t4.v[o5] ? r3.short = t4.v[o5] : r3 = Object.assign(Object.assign({}, r3), t4.v[o5]), delete t4.v[o5], n6++, i5.length <= n6)
                          break;
                        if (i5[n6] !== o5.substring(0, o5.length - s2.suffix.length))
                          throw new Error("Invalid meta key: " + o5);
                        o5 = i5[n6];
                      }
                      let a3 = o5, c3 = t4.v[o5];
                      if (u2.active) {
                        let e4 = /^\s*("(\\.|[^"\\])*"|[^\s]+):\s*(.*?)\s*$/.exec(o5);
                        e4 && (a3 = e4[1], c3 = X({ src: e4[3], val: c3 }), delete t4.v[o5]);
                      }
                      let f2 = Z(c3, 1 + l2.dI, r3);
                      t4.v[a3] = f2, t4.k.includes(a3) || t4.k.push(a3), l2.nodes[l2.nI] = f2, l2.vals[l2.nI] = e3[a3], l2.parents[l2.nI] = e3, l2.keys[l2.nI] = a3, l2.nI++;
                    }
                  }
                  let a2 = P(e3).filter((e4) => void 0 === t4.v[e4]);
                  if (0 < a2.length)
                    if (r2 === t4.c)
                      l2.ignoreVal = true, l2.curerr.push(Ge(k, l2, 1100, void 0, { k: a2 }));
                    else {
                      n5 = true, l2.pI = o4;
                      for (let n6 of a2) {
                        let r3 = t4.c = Z(t4.c, 1 + l2.dI);
                        l2.nodes[l2.nI] = r3, l2.vals[l2.nI] = e3[n6], l2.parents[l2.nI] = e3, l2.keys[l2.nI] = n6, l2.nI++;
                      }
                    }
                  n5 ? (l2.dI++, l2.nodes[l2.nI] = l2.sI, l2.parents[l2.nI] = e3, l2.nextSibling = false, l2.nI++) : l2.ctx.log && l2.ctx.log("eo", l2);
                }
              } else if (p === l2.type)
                if (t4.r && i4)
                  l2.ignoreVal = true, l2.curerr.push(Ge(f, l2, 1030));
                else if (i4 || q(l2.val)) {
                  if (!t4.p && i4 && void 0 !== t4.f)
                    l2.updateVal(t4.f), l2.fromDefault = true;
                  else if (!t4.p || null != l2.val) {
                    l2.updateVal(l2.val || (l2.fromDefault = true, []));
                    let n5 = r2 !== t4.c, i5 = 0 < l2.val.length, o4 = P(t4.v).filter((e3) => !isNaN(+e3)), s3 = 0 < o4.length;
                    if (l2.ctx.log && l2.ctx.log("sa", l2), i5 || s3) {
                      l2.pI = l2.nI;
                      let e3 = 0;
                      if (s3)
                        if (o4.length < l2.val.length && !n5)
                          l2.ignoreVal = true, l2.curerr.push(Ge(k, l2, 1090, void 0, { k: o4.length }));
                        else
                          for (; e3 < o4.length; e3++) {
                            let n6 = t4.v[e3] = Z(t4.v[e3], 1 + l2.dI);
                            l2.nodes[l2.nI] = n6, l2.vals[l2.nI] = l2.val[e3], l2.parents[l2.nI] = l2.val, l2.keys[l2.nI] = "" + e3, l2.nI++;
                          }
                      if (n5 && i5) {
                        let n6 = t4.c = Z(t4.c, 1 + l2.dI);
                        for (; e3 < l2.val.length; e3++)
                          l2.nodes[l2.nI] = n6, l2.vals[l2.nI] = l2.val[e3], l2.parents[l2.nI] = l2.val, l2.keys[l2.nI] = "" + e3, l2.nI++;
                      }
                      l2.ignoreVal || (l2.dI++, l2.nodes[l2.nI] = l2.sI, l2.parents[l2.nI] = l2.val, l2.nextSibling = false, l2.nI++);
                    } else
                      l2.ctx.log && n5 && null == e2 && l2.ctx.log("kv", Object.assign(Object.assign({}, l2), { key: 0, val: t4.c })), l2.ctx.log && l2.ctx.log("ea", l2);
                  }
                } else
                  l2.curerr.push(Ge(I, l2, 1040));
              else if (y2 === l2.type || b === l2.type || void 0 === l2.val || l2.type === l2.valType || x === l2.type && t4.u.i && l2.val instanceof t4.u.i || $ === l2.type && null === l2.val)
                if (void 0 === l2.val) {
                  let e3 = l2.path[l2.dI];
                  !t4.r || m === l2.type && l2.parent.hasOwnProperty(e3) ? void 0 !== t4.f && !t4.p || m === l2.type ? (l2.updateVal(t4.f), l2.fromDefault = true) : y2 === l2.type && (l2.ignoreVal = void 0 === l2.ignoreVal || l2.ignoreVal) : (l2.ignoreVal = true, l2.curerr.push(Ge(f, l2, 1060))), l2.ctx.log && l2.ctx.log("kv", l2);
                } else
                  d !== l2.type || "" !== l2.val || t4.u.empty || l2.curerr.push(Ge(f, l2, 1080)), l2.ctx.log && l2.ctx.log("kv", l2);
              else
                l2.curerr.push(Ge(I, l2, 1050));
            }
            if (0 < t4.a.length)
              for (let e3 = 0; e3 < t4.a.length; e3++) {
                let r3 = Y(t4.a[e3], l2);
                t4 = l2.node, void 0 !== r3.done && (n3 = r3.done), i3 = i3 || !!r3.fatal;
              }
            let o3 = l2.node.p ? false !== l2.ignoreVal : !!l2.ignoreVal;
            !l2.match && null != l2.parent && !n3 && !o3 && (l2.parent[l2.key] = l2.val), l2.nextSibling && (l2.pI = l2.sI), (l2.node.e || i3) && l2.err.push(...l2.curerr);
          }
          if (0 < l2.err.length) {
            if (q(l2.ctx.err))
              l2.ctx.err.push(...l2.err);
            else if (!l2.match && false !== l2.ctx.err)
              throw new H(j, o2.prefix, l2.err, l2.ctx);
          }
          return l2.match ? 0 === l2.err.length : l2.root;
        }
        function g2(e2, t3) {
          return h2(e2, t3, false);
        }
        g2.valid = function(e2, t3) {
          let n2 = t3 || {};
          return n2.err = n2.err || [], h2(e2, n2, false), 0 === n2.err.length;
        }, g2.match = (e2, t3) => h2(e2, t3 = t3 || {}, true), g2.error = (e2, t3) => {
          let n2 = t3 || {};
          return n2.err = n2.err || [], h2(e2, n2, false), n2.err;
        }, g2.spec = () => (g2(void 0, { err: false }), W(Te(c2, (e2, t3) => n === t3 || t3, false, true))), g2.node = () => (g2.spec(), c2);
        let w2 = "";
        return g2.toString = () => (w2 = ne("" === w2 ? Te(c2 && c2.$ && (n === c2.$.gubu$ || true === c2.$.gubu$) ? c2.v : c2) : w2), `[Gubu ${o2.name} ${w2}]`), e.inspect && e.inspect.custom && (g2[e.inspect.custom] = g2.toString), g2.gubu = l, g2.spec(), g2;
      }
      function X(e2) {
        let t2 = false;
        if (null == e2.tokens) {
          t2 = true, e2.tokens = [];
          let n3 = /\s*,?\s*([)(\.]|"(\\.|[^"\\])*"|\/(\\.|[^\/\\])*\/[a-z]?|[^)(,\s]+)\s*/g, l3 = null;
          for (; l3 = n3.exec(e2.src); )
            e2.tokens.push(l3[1]);
        }
        e2.i = e2.i || 0;
        let n2 = e2.tokens[e2.i], l2 = Fe[n2];
        if (")" === e2.tokens[e2.i])
          return e2.i++, e2.val;
        e2.i++;
        let r3 = { Number, String, Boolean };
        if (null == l2)
          try {
            return r3[n2] || (m === n2 ? void 0 : "NaN" === n2 ? NaN : n2.match(/^\/.+\/$/) ? new RegExp(n2.substring(1, n2.length - 1)) : W(n2));
          } catch (s2) {
            throw new SyntaxError(`Gubu: unexpected token ${n2} in builder expression ${e2.src}`);
          }
        "(" === e2.tokens[e2.i] && e2.i++;
        let i2 = [], o2 = null;
        for (; null != (o2 = e2.tokens[e2.i]) && ")" !== o2; ) {
          let t3 = X(e2);
          i2.push(t3);
        }
        return e2.i++, e2.val = l2.call(e2.val, ...i2), "." === e2.tokens[e2.i] ? (e2.i++, X(e2)) : t2 && e2.i < e2.tokens.length ? X(e2) : e2.val;
      }
      function Y(e2, t2) {
        var n2;
        let l2, r3 = {}, i2 = false;
        try {
          i2 = !(void 0 !== t2.val || !(null === (n2 = e2.gubu$) || void 0 === n2 ? void 0 : n2.Check)) || (t2.check = e2, e2(t2.val, r3, t2));
        } catch (s2) {
          l2 = s2;
        }
        let o2 = q(r3.err) ? 0 < r3.err.length : null != r3.err;
        if (!i2 || o2) {
          if (void 0 === t2.val && (t2.node.p || !t2.node.r) && true !== r3.done)
            return delete r3.err, r3;
          let n3 = r3.why || w, i3 = ee(t2);
          if (d === typeof r3.err)
            t2.curerr.push(Ce(t2, r3.err));
          else if (v === typeof r3.err)
            t2.curerr.push(...[r3.err].flat().filter((e3) => null != e3).map((e3) => (e3.p = null == e3.p ? i3 : e3.p, e3.m = null == e3.m ? 2010 : e3.m, e3)));
          else {
            let r4 = e2.name;
            null != r4 && "" != r4 || (r4 = ne(e2.toString().replace(/[ \t\r\n]+/g, " "))), t2.curerr.push(Ge(n3, t2, 1045, void 0, { thrown: l2 }, r4));
          }
          r3.done = null == r3.done || r3.done;
        }
        return r3.hasOwnProperty("uval") ? (t2.updateVal(r3.uval), t2.ignoreVal = false) : void 0 === r3.val || Number.isNaN(r3.val) || (t2.updateVal(r3.val), t2.ignoreVal = false), void 0 !== r3.node && (t2.node = r3.node), void 0 !== r3.type && (t2.type = r3.type), r3;
      }
      function ee(e2) {
        return e2.path.slice(1, e2.dI + 1).filter((e3) => null != e3).join(".");
      }
      function te(e2) {
        return c === typeof e2 ? e2 : c === typeof (null == e2 ? void 0 : e2.length) ? e2.length : null != e2 && v === typeof e2 ? P(e2).length : NaN;
      }
      function ne(e2, t2) {
        let n2 = String(e2), l2 = null == t2 || isNaN(t2) ? 30 : t2 < 0 ? 0 : ~~t2, r3 = null == e2 ? 0 : n2.length, i2 = null == e2 ? "" : n2.substring(0, r3);
        return i2 = l2 < r3 ? i2.substring(0, l2 - 3) + "..." : i2, i2.substring(0, l2);
      }
      const le = function(e2) {
        let t2 = Ee(this, e2);
        return t2.r = true, t2.p = false, void 0 === e2 && 1 === arguments.length && (t2.t = m, t2.v = void 0), t2;
      }, re = function(e2) {
        let t2 = Ee(this, e2);
        return t2.c = oe(), t2;
      }, ie = function(e2) {
        let t2 = Ee(this, e2);
        return t2.r = false, void 0 === e2 && 1 === arguments.length && (t2.t = m, t2.v = void 0), t2;
      }, oe = function(e2) {
        let t2 = Ee(this, e2);
        return t2.t = y2, void 0 !== e2 && (t2.v = e2, t2.f = e2), t2;
      }, se = function(e2, t2) {
        let n2 = Ee(this, t2);
        return n2.z = e2, n2;
      }, ue = function(e2) {
        let t2 = Ee(this, e2);
        return t2.r = false, t2.p = true, t2;
      }, ae = function(e2) {
        let t2 = Ee(this, e2);
        return t2.r = false, t2.p = true, t2.e = false, t2.a.push(function(e3, t3, n2) {
          return 0 < n2.curerr.length && (t3.uval = void 0, t3.done = false), true;
        }), t2;
      }, ce = function(e2) {
        let t2 = Ee(this);
        return t2.t = h, t2.v = e2, t2.f = e2, t2;
      }, fe = function(e2, t2) {
        let n2 = Ee(this, void 0 === t2 ? e2 : t2);
        return n2.r = false, n2.f = e2, h === typeof e2 && U[e2.name] && (n2.t = e2.name.toLowerCase(), n2.f = Me(K[n2.t])), n2.p = false, n2;
      }, pe = function(e2) {
        let t2 = Ee(this, e2);
        return t2.u.empty = true, t2;
      }, he = function(e2) {
        let t2 = Ee(this, e2);
        return t2.t = a, t2;
      }, ve = function(e2, t2) {
        let n2 = Ee(this), l2 = c === typeof e2;
        n2.t = d, l2 && null == t2 && (n2 = Z([]));
        let r3 = null;
        return h === typeof e2 && (r3 = e2, n2 = oe()), n2.b.push(function(n3, i2, o2) {
          if (r3)
            i2.val = r3(o2.path, o2);
          else if (l2) {
            let n4 = e2;
            i2.val = o2.path.slice(o2.path.length - 1 - (0 <= n4 ? n4 : 0), o2.path.length - 1 + (0 <= n4 ? 0 : 1)), d === typeof t2 && (i2.val = i2.val.join(t2));
          } else
            null == e2 && (i2.val = o2.path[o2.path.length - 2]);
          return true;
        }), n2;
      }, de = function(...e2) {
        let t2 = Ee();
        t2.t = b, t2.r = true;
        let n2 = e2.map((e3) => Pe(e3));
        return t2.u.list = e2, t2.b.push(function(t3, l2, r3) {
          let i2 = true;
          for (let e3 of n2) {
            let n3 = Object.assign(Object.assign({}, r3.ctx), { err: [] });
            e3(t3, n3), 0 < n3.err.length && (i2 = false);
          }
          return i2 || (l2.why = A, l2.err = [Ce(r3, V + " " + F + M + L + " does not satisfy all of: " + e2.map((e3) => Te(e3, null, true)).join(", "))]), i2;
        }), t2;
      }, ge = function(...e2) {
        let t2 = Ee();
        t2.t = b, t2.r = true;
        let n2 = e2.map((e3) => Pe(e3));
        return t2.u.list = e2, t2.b.push(function(t3, l2, r3) {
          let i2 = false;
          for (let e3 of n2) {
            let n3 = Object.assign(Object.assign({}, r3.ctx), { err: [] }), o2 = e3.match(t3, n3);
            o2 && (l2.val = e3(t3, n3)), i2 || (i2 = o2);
          }
          return i2 || (l2.why = T, l2.err = [Ce(r3, V + " " + F + M + L + " does not satisfy any of: " + e2.map((e3) => Te(e3, null, true)).join(", "))]), i2;
        }), t2;
      }, me = function(...e2) {
        let t2 = Ee();
        t2.t = b, t2.r = true;
        let n2 = e2.map((e3) => Pe(e3));
        return t2.u.list = e2, t2.b.push(function(t3, l2, r3) {
          let i2 = 0;
          for (let e3 of n2) {
            let n3 = Object.assign(Object.assign({}, r3.ctx), { err: [] });
            if (e3.match(t3, n3)) {
              i2++, l2.val = e3(t3, n3);
              break;
            }
          }
          return 1 !== i2 && (l2.why = B, l2.err = [Ce(r3, V + " " + F + M + L + " does not satisfy one of: " + e2.map((e3) => Te(e3, null, true)).join(", "))]), true;
        }), t2;
      }, ye = function(...e2) {
        let t2 = Ee();
        return t2.b.push(function(t3, n2, l2) {
          for (let r3 = 0; r3 < e2.length; r3++)
            if (t3 === e2[r3])
              return true;
          return n2.err = Ce(l2, V + " " + F + M + L + " must be exactly one of: " + l2.node.s + "."), n2.done = true, false;
        }), t2.s = e2.map((e3) => Te(e3, null, true)).join(", "), t2;
      }, be = function(e2, t2) {
        let n2 = Ee(this, t2);
        return n2.b.push(e2), n2;
      }, xe = function(e2, t2) {
        let n2 = Ee(this, t2);
        return n2.a.push(e2), n2;
      }, $e = function(e2, t2) {
        let n2 = Ee(this, t2);
        if (h === typeof e2) {
          let t3 = e2;
          t3.gubu$ = t3.gubu$ || {}, t3.gubu$.Check = true, n2.b.push(e2), n2.s = (null == n2.s ? "" : n2.s + ";") + Te(e2, null, true), n2.r = true;
        } else if (v === typeof e2) {
          if (Object.prototype.toString.call(e2).includes("RegExp")) {
            let t3 = (t4) => null != t4 && !Number.isNaN(t4) && !!String(t4).match(e2);
            z(t3, s, { value: String(e2) }), z(t3, "gubu$", { value: { Check: true } }), n2.b.push(t3), n2.s = Te(e2), n2.r = true;
          }
        } else
          d === typeof e2 && (n2.t = e2, n2.r = true);
        return n2;
      }, Ie = function(e2) {
        let t2 = Ee(this, e2);
        return p === t2.t && r2 !== t2.c && 0 === t2.n ? (t2.v = [t2.c], t2.c = r2) : t2.c = r2, t2;
      }, ke = function(e2, t2) {
        let n2 = Ee(this, t2), l2 = d === typeof e2 ? e2 : (v === typeof e2 && e2 || {}).name;
        return null != l2 && "" != l2 && n2.b.push(function(e3, t3, n3) {
          return (n3.ctx.ref = n3.ctx.ref || {})[l2] = n3.node, true;
        }), n2;
      }, je = function(e2, t2) {
        let n2 = Ee(this, t2), l2 = v === typeof e2 && e2 || {}, r3 = d === typeof e2 ? e2 : l2.name, i2 = !!l2.fill;
        return null != r3 && "" != r3 && n2.b.push(function(e3, t3, n3) {
          if (void 0 !== e3 || i2) {
            let e4 = n3.ctx.ref = n3.ctx.ref || {};
            if (void 0 !== e4[r3]) {
              let n4 = Object.assign({}, e4[r3]);
              n4.t = n4.t || a, t3.node = n4, t3.type = n4.t;
            }
          }
          return true;
        }), n2;
      }, we = function(e2, t2) {
        let n2 = Ee(this, t2), l2 = v === typeof e2 && e2 || {}, r3 = d === typeof e2 ? e2 : l2.name, i2 = g === typeof l2.keep ? l2.keep : void 0, o2 = q(l2.claim) ? l2.claim : [];
        if (null != r3 && "" != r3) {
          let e3 = (e4, t4, n3) => {
            if (void 0 === e4 && 0 < o2.length) {
              n3.ctx.Rename = n3.ctx.Rename || {}, n3.ctx.Rename.fromDefault = n3.ctx.Rename.fromDefault || {};
              for (let e5 of o2) {
                let l3 = n3.ctx.Rename.fromDefault[e5] || {};
                if (void 0 !== n3.parent[e5] && !l3.yes) {
                  t4.val = n3.parent[e5], n3.match || (n3.parent[r3] = t4.val), t4.node = l3.node;
                  for (let e6 = 0; e6 < n3.err.length; e6++)
                    n3.err[e6].k === l3.key && (n3.err.splice(e6, 1), e6--);
                  if (i2) {
                    let t5 = n3.cI + 1;
                    n3.nodes.splice(t5, 0, Z(l3.dval)), n3.vals.splice(t5, 0, void 0), n3.parents.splice(t5, 0, n3.parent), n3.keys.splice(t5, 0, e5), n3.nI++, n3.pI++;
                  } else
                    delete n3.parent[e5];
                  break;
                }
              }
              void 0 === t4.val && (t4.val = n3.node.v);
            }
            return true;
          };
          z(e3, s, { value: "Rename:" + r3 }), n2.b.push(e3);
          let t3 = (e4, t4, n3) => (n3.parent[r3] = e4, n3.match || i2 || n3.key === r3 || q(n3.parent) && false !== i2 || (delete n3.parent[n3.key], t4.done = true), n3.ctx.Rename = n3.ctx.Rename || {}, n3.ctx.Rename.fromDefault = n3.ctx.Rename.fromDefault || {}, n3.ctx.Rename.fromDefault[r3] = { yes: n3.fromDefault, key: n3.key, dval: n3.node.v, node: n3.node }, true);
          z(t3, s, { value: "Rename:" + r3 }), n2.a.push(t3);
        }
        return n2;
      }, Oe = function(e2, t2) {
        let n2 = Ee(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = te(t3);
          if (e2 <= r3)
            return true;
          l2.checkargs = { min: 1 };
          let i2 = c === typeof t3 ? "" : "length ";
          return n3.err = Ce(l2, V + " " + F + M + L + ` must be a minimum ${i2}of ${e2} (was ${r3}).`), false;
        }), n2.s = C + "(" + e2 + (null == t2 ? "" : "," + Te(t2)) + ")", n2;
      }, Ne = function(e2, t2) {
        let n2 = Ee(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = te(t3);
          if (r3 <= e2)
            return true;
          let i2 = c === typeof t3 ? "" : "length ";
          return n3.err = Ce(l2, V + " " + F + M + L + ` must be a maximum ${i2}of ${e2} (was ${r3}).`), false;
        }), n2.s = E + "(" + e2 + (null == t2 ? "" : "," + Te(t2)) + ")", n2;
      }, Se = function(e2, t2) {
        let n2 = Ee(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = te(t3);
          if (e2 < r3)
            return true;
          let i2 = c === typeof t3 ? "be" : "have length";
          return n3.err = Ce(l2, V + " " + F + M + L + ` must ${i2} above ${e2} (was ${r3}).`), false;
        }), n2.s = R + "(" + e2 + (null == t2 ? "" : "," + Te(t2)) + ")", n2;
      }, Ve = function(e2, t2) {
        let n2 = Ee(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = te(t3);
          if (r3 < e2)
            return true;
          let i2 = c === typeof t3 ? "be" : "have length";
          return n3.err = Ce(l2, V + " " + F + M + L + ` must ${i2} below ${e2} (was ${r3}).`), false;
        }), n2.s = D + "(" + e2 + (null == t2 ? "" : "," + Te(t2)) + ")", n2;
      }, Re = function(e2, t2) {
        let n2 = Ee(this, t2 || oe());
        return n2.b.push(function(t3, n3, l2) {
          let r3 = te(t3);
          if (e2 === r3)
            return true;
          let i2 = c === typeof t3 ? "" : " in length";
          return n3.err = Ce(l2, V + " " + F + M + L + ` must be exactly ${e2}${i2} (was ${r3}).`), false;
        }), n2.s = G + "(" + e2 + (null == t2 ? "" : "," + Te(t2)) + ")", n2;
      }, Ae = function(e2, t2) {
        let n2 = Ee(this, t2 || {});
        return n2.c = Z(e2), n2;
      }, De = function(e2, t2) {
        let n2 = Ee(this, t2 || []);
        return n2.t = "array", n2.c = Z(e2), n2.m = n2.m || {}, n2.m.rest = true, n2;
      };
      function Ee(e2, t2) {
        let n2 = Z(null == e2 || e2.window === e2 || e2.global === e2 ? t2 : e2);
        return Object.assign(n2, { Above: Se, After: xe, Any: oe, Before: be, Below: Ve, Check: $e, Child: Ae, Closed: Ie, Define: ke, Empty: pe, Exact: ye, Fault: se, Ignore: ae, Len: Re, Max: Ne, Min: Oe, Never: he, Open: re, Refer: je, Rename: we, Required: le, Skip: ue, Rest: De });
      }
      function Ce(e2, t2, n2, l2) {
        return Ge(n2 || w, e2, 4e3, t2, l2);
      }
      function Ge(e2, t2, n2, l2, r3, i2) {
        var o2;
        let s2 = { k: t2.key, n: t2.node, v: t2.val, p: ee(t2), w: e2, c: (null === (o2 = t2.check) || void 0 === o2 ? void 0 : o2.name) || "none", a: t2.checkargs || {}, m: n2, t: "", u: r3 || {} }, u2 = ne((void 0 === t2.val ? m : Te(t2.val)).replace(/"/g, ""));
        if (null == (l2 = l2 || t2.node.z) || "" === l2) {
          let n3 = u2.startsWith("[") ? p : u2.startsWith("{") ? v : null == t2.val || c === typeof t2.val && isNaN(t2.val) ? "value" : typeof t2.val, l3 = u2.startsWith("[") || q(t2.parents[t2.pI]) ? "index" : "property", o3 = "is", h2 = null == r3 ? void 0 : r3.k;
          h2 = q(h2) ? (l3 = 1 < h2.length ? (o3 = "are", "properties") : l3, h2.join(", ")) : h2, s2.t = "Validation failed for " + (0 < s2.p.length ? `${l3} "${s2.p}" with ` : "") + `${n3} "${u2}" because ` + (I === e2 ? x === t2.node.t ? `the ${n3} is not an instance of ${t2.node.u.n}` : `the ${n3} is not of type ${t2.node.t}` : f === e2 ? "" === t2.val ? "an empty string is not allowed" : `the ${n3} is required` : "closed" === e2 ? `the ${l3} "${h2}" ${o3} not allowed` : a === e2 ? "no value is allowed" : `check "${null == i2 ? e2 : i2}" failed`) + (s2.u.thrown ? " (threw: " + s2.u.thrown.message + ")" : ".");
        } else
          s2.t = l2.replace(/\$VALUE/g, u2).replace(/\$PATH/g, s2.p);
        return s2;
      }
      function Be(e2) {
        return null != e2.s && "" !== e2.s ? e2.s : e2.r || void 0 === e2.v ? e2.t : e2.v;
      }
      function Te(e2, t2, l2, r3) {
        let i2;
        r3 || !e2 || !e2.$ || n !== e2.$.gubu$ && true !== e2.$.gubu$ || (e2 = Be(e2));
        try {
          i2 = _2(e2, (e3, l3) => {
            var i3, o2;
            if (t2 && (l3 = t2(e3, l3)), null != l3 && v === typeof l3 && l3.constructor && O !== l3.constructor.name && N !== l3.constructor.name)
              l3 = h === typeof l3.toString ? l3.toString() : l3.constructor.name;
            else if (h === typeof l3)
              l3 = h === typeof Q[l3.name] && isNaN(+e3) ? void 0 : null != l3.name && "" !== l3.name ? l3.name : ne(l3.toString().replace(/[ \t\r\n]+/g, " "));
            else if ("bigint" == typeof l3)
              l3 = String(l3.toString());
            else {
              if (Number.isNaN(l3))
                return "NaN";
              true === r3 || true !== (null === (i3 = null == l3 ? void 0 : l3.$) || void 0 === i3 ? void 0 : i3.gubu$) && n !== (null === (o2 = null == l3 ? void 0 : l3.$) || void 0 === o2 ? void 0 : o2.gubu$) || (l3 = Be(l3));
            }
            return l3;
          }), i2 = String(i2);
        } catch (o2) {
          i2 = _2(String(e2));
        }
        return true === l2 && (i2 = i2.replace(/^"/, "").replace(/"$/, "")), i2;
      }
      function Me(e2) {
        return null == e2 || v !== typeof e2 ? e2 : W(_2(e2));
      }
      const Le = (e2) => Z(Object.assign(Object.assign({}, e2), { $: { gubu$: true } })), Fe = { Above: Se, After: xe, All: de, Any: oe, Before: be, Below: Ve, Check: $e, Child: Ae, Closed: Ie, Default: fe, Define: ke, Empty: pe, Exact: ye, Fault: se, Func: ce, Ignore: ae, Key: ve, Len: Re, Max: Ne, Min: Oe, Never: he, One: me, Open: re, Optional: ie, Refer: je, Rename: we, Required: le, Skip: ue, Some: ge, Rest: De };
      if (m !== typeof window)
        for (let We in Fe)
          z(Fe[We], s, { value: We });
      Object.assign(Q, Object.assign(Object.assign(Object.assign({ Gubu: Q }, Fe), Object.entries(Fe).reduce((e2, t2) => (e2["G" + t2[0]] = t2[1], e2), {})), { isShape: (e2) => e2 && l === e2.gubu, G$: Le, buildize: Ee, makeErr: Ce, stringify: Te, truncate: ne, nodize: Z, expr: X, MakeArgu: ze })), z(Q, s, { value: o });
      const Pe = Q;
      t.Gubu = Pe;
      function ze(e2) {
        return function(t2, n2, l2) {
          let r3 = false;
          d === typeof t2 && (r3 = true, l2 = n2, n2 = t2);
          const i2 = Pe(l2 = l2 || n2, { prefix: e2 + (n2 = d === typeof n2 ? " (" + n2 + ")" : "") }), o2 = i2.node(), s2 = o2.k;
          let u2 = t2, a2 = {}, c2 = 0, f2 = 0;
          for (; c2 < s2.length; c2++) {
            let e3 = o2.v[s2[c2]];
            e3.p && (e3 = o2.v[s2[c2]] = ((t3) => xe(function(e4, n3, l3) {
              if (0 < l3.curerr.length) {
                f2++;
                for (let e5 = s2.length - 1; e5 > t3; e5--)
                  o2.v[s2[e5]].m.rest ? a2[s2[e5]].splice(o2.v[s2[e5]].m.rest_pos + t3 - e5, 0, a2[s2[e5 - 1]]) : (l3.vals[l3.pI + e5 - t3] = l3.vals[l3.pI + e5 - t3 - 1], a2[s2[e5]] = a2[s2[e5 - 1]]);
                n3.uval = void 0, n3.done = false;
              }
              return true;
            }, e3))(c2), e3.e = false), c2 !== s2.length - 1 || o2.v[s2[c2]].m.rest || (o2.v[s2[c2]] = xe(function(e4, t3, n3) {
              return !(s2.length - f2 < u2.length && (0 === n3.curerr.length && (t3.err = `Too many arguments for type signature (was ${u2.length}, expected ${s2.length - f2})`), t3.fatal = true, 1));
            }, o2.v[s2[c2]]));
          }
          function p2(e3) {
            for (let t3 = 0; t3 < s2.length; t3++) {
              let n3 = o2.v[s2[t3]];
              n3.m.rest ? (a2[s2[t3]] = [...e3].slice(t3), n3.m.rest_pos = a2[s2[t3]].length) : a2[s2[t3]] = e3[t3];
            }
            return a2;
          }
          return r3 ? function(e3) {
            return u2 = e3, a2 = {}, c2 = 0, f2 = 0, i2(p2(e3));
          } : i2(p2(t2));
        };
      }
      const { Gubu: qe } = t;
      return qe;
    });
  })(gubu_min$2, gubu_min$2.exports);
  var gubu_minExports = gubu_min$2.exports;
  const gubu_min$1 = /* @__PURE__ */ getDefaultExportFromCjs(gubu_minExports);
  function VxgSeneca() {
    const seneca = this;
    const { Exact: Exact2 } = seneca.valid;
    seneca.root.context.cmap = cmap;
    seneca.root.context.vmap = vmap;
    seneca.message(
      "aim:app,prepare:app,redux$:true",
      function prepareApp(_msg, meta) {
        return __async(this, null, function* () {
          let state = meta.custom.state();
          let model = seneca.context.model;
          let frame = model.app.web.frame.private;
          let viewMap = frame.view;
          let sectionMap = frame.nav.section;
          state.current = {
            view: ""
          };
          state.view = cmap(viewMap, {
            name: cmap.COPY,
            active: cmap.FILTER
          });
          state.nav = {
            mode: "shown",
            section: cmap(sectionMap, {
              name: cmap.COPY,
              active: cmap.FILTER,
              item: (x) => cmap(x, {
                active: cmap.FILTER,
                view: cmap.COPY,
                name: cmap.COPY
              })
            })
          };
        });
      }
    ).message(
      "aim:app,set:view,redux$:true",
      { view: String },
      function setView(msg, meta) {
        return __async(this, null, function* () {
          meta.custom.state().current.view = msg.view;
        });
      }
    ).message(
      "aim:app,area:nav,set:mode,redux$:true",
      { mode: Exact2("shown", "hidden") },
      function setMode(msg, meta) {
        return __async(this, null, function* () {
          meta.custom.state().nav.mode = msg.mode;
        });
      }
    ).prepare(function() {
      return __async(this, null, function* () {
        yield this.post("aim:app,prepare:app");
      });
    });
  }
  function cmap(o, p) {
    return Object.entries(o).reduce((r2, n, _2) => (_2 = Object.entries(p).reduce((s, m) => cmap.FILTER === s ? s : (s[m[0]] = // transfom(val,key,current,parentkey,parent)
    "function" === typeof m[1] ? m[1](n[1][m[0]], {
      skey: m[0],
      self: n[1],
      key: n[0],
      parent: o
    }) : m[1], cmap.FILTER === s[m[0]] ? cmap.FILTER : s), {}), cmap.FILTER === _2 ? 0 : r2[n[0]] = _2, r2), {});
  }
  cmap.COPY = (x) => x;
  cmap.FILTER = (x) => "function" === typeof x ? (y2, p, _2) => (_2 = x(y2, p), Array.isArray(_2) ? !_2[0] ? _2[1] : cmap.FILTER : _2) : x ? x : cmap.FILTER;
  cmap.KEY = (_2, p) => p.key;
  function vmap(o, p) {
    return Object.entries(o).reduce((r2, n, _2) => (_2 = Object.entries(p).reduce((s, m) => vmap.FILTER === s ? s : (s[m[0]] = // transfom(val,key,current,parentkey,parent)
    // 'function' === typeof m[1] ? m[1](n[1][m[0]], m[0], n[1], n[0], o) : m[1]
    "function" === typeof m[1] ? m[1](n[1][m[0]], {
      skey: m[0],
      self: n[1],
      key: n[0],
      parent: o
    }) : m[1], vmap.FILTER === s[m[0]] ? vmap.FILTER : s), {}), vmap.FILTER === _2 ? 0 : r2.push(_2), r2), []);
  }
  vmap.COPY = (x) => x;
  vmap.FILTER = (x) => "function" === typeof x ? (y2, p, _2) => (_2 = x(y2, p), Array.isArray(_2) ? !_2[0] ? _2[1] : vmap.FILTER : _2) : x ? x : vmap.FILTER;
  vmap.KEY = (_2, p) => p.key;
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var propTypes$1 = { exports: {} };
  var ReactPropTypesSecret_1;
  var hasRequiredReactPropTypesSecret;
  function requireReactPropTypesSecret() {
    if (hasRequiredReactPropTypesSecret)
      return ReactPropTypesSecret_1;
    hasRequiredReactPropTypesSecret = 1;
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    ReactPropTypesSecret_1 = ReactPropTypesSecret;
    return ReactPropTypesSecret_1;
  }
  var factoryWithThrowingShims;
  var hasRequiredFactoryWithThrowingShims;
  function requireFactoryWithThrowingShims() {
    if (hasRequiredFactoryWithThrowingShims)
      return factoryWithThrowingShims;
    hasRequiredFactoryWithThrowingShims = 1;
    "use strict";
    var ReactPropTypesSecret = requireReactPropTypesSecret();
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      ;
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      ;
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    return factoryWithThrowingShims;
  }
  var reactIs$3 = { exports: {} };
  var reactIs_development$1 = {};
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_development$1;
  function requireReactIs_development$1() {
    if (hasRequiredReactIs_development$1)
      return reactIs_development$1;
    hasRequiredReactIs_development$1 = 1;
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        reactIs_development$1.AsyncMode = AsyncMode;
        reactIs_development$1.ConcurrentMode = ConcurrentMode;
        reactIs_development$1.ContextConsumer = ContextConsumer;
        reactIs_development$1.ContextProvider = ContextProvider;
        reactIs_development$1.Element = Element2;
        reactIs_development$1.ForwardRef = ForwardRef;
        reactIs_development$1.Fragment = Fragment;
        reactIs_development$1.Lazy = Lazy;
        reactIs_development$1.Memo = Memo;
        reactIs_development$1.Portal = Portal2;
        reactIs_development$1.Profiler = Profiler;
        reactIs_development$1.StrictMode = StrictMode;
        reactIs_development$1.Suspense = Suspense;
        reactIs_development$1.isAsyncMode = isAsyncMode;
        reactIs_development$1.isConcurrentMode = isConcurrentMode;
        reactIs_development$1.isContextConsumer = isContextConsumer;
        reactIs_development$1.isContextProvider = isContextProvider;
        reactIs_development$1.isElement = isElement2;
        reactIs_development$1.isForwardRef = isForwardRef;
        reactIs_development$1.isFragment = isFragment;
        reactIs_development$1.isLazy = isLazy;
        reactIs_development$1.isMemo = isMemo;
        reactIs_development$1.isPortal = isPortal;
        reactIs_development$1.isProfiler = isProfiler;
        reactIs_development$1.isStrictMode = isStrictMode;
        reactIs_development$1.isSuspense = isSuspense;
        reactIs_development$1.isValidElementType = isValidElementType;
        reactIs_development$1.typeOf = typeOf;
      })();
    }
    return reactIs_development$1;
  }
  var reactIs_production_min$1 = {};
  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_production_min$1;
  function requireReactIs_production_min$1() {
    if (hasRequiredReactIs_production_min$1)
      return reactIs_production_min$1;
    hasRequiredReactIs_production_min$1 = 1;
    "use strict";
    var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r2 = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y2 = b ? Symbol.for("react.scope") : 60119;
    function z(a) {
      if ("object" === typeof a && null !== a) {
        var u = a.$$typeof;
        switch (u) {
          case c:
            switch (a = a.type, a) {
              case l:
              case m:
              case e:
              case g:
              case f:
              case p:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case n:
                  case t:
                  case r2:
                  case h:
                    return a;
                  default:
                    return u;
                }
            }
          case d:
            return u;
        }
      }
    }
    function A(a) {
      return z(a) === m;
    }
    reactIs_production_min$1.AsyncMode = l;
    reactIs_production_min$1.ConcurrentMode = m;
    reactIs_production_min$1.ContextConsumer = k;
    reactIs_production_min$1.ContextProvider = h;
    reactIs_production_min$1.Element = c;
    reactIs_production_min$1.ForwardRef = n;
    reactIs_production_min$1.Fragment = e;
    reactIs_production_min$1.Lazy = t;
    reactIs_production_min$1.Memo = r2;
    reactIs_production_min$1.Portal = d;
    reactIs_production_min$1.Profiler = g;
    reactIs_production_min$1.StrictMode = f;
    reactIs_production_min$1.Suspense = p;
    reactIs_production_min$1.isAsyncMode = function(a) {
      return A(a) || z(a) === l;
    };
    reactIs_production_min$1.isConcurrentMode = A;
    reactIs_production_min$1.isContextConsumer = function(a) {
      return z(a) === k;
    };
    reactIs_production_min$1.isContextProvider = function(a) {
      return z(a) === h;
    };
    reactIs_production_min$1.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === c;
    };
    reactIs_production_min$1.isForwardRef = function(a) {
      return z(a) === n;
    };
    reactIs_production_min$1.isFragment = function(a) {
      return z(a) === e;
    };
    reactIs_production_min$1.isLazy = function(a) {
      return z(a) === t;
    };
    reactIs_production_min$1.isMemo = function(a) {
      return z(a) === r2;
    };
    reactIs_production_min$1.isPortal = function(a) {
      return z(a) === d;
    };
    reactIs_production_min$1.isProfiler = function(a) {
      return z(a) === g;
    };
    reactIs_production_min$1.isStrictMode = function(a) {
      return z(a) === f;
    };
    reactIs_production_min$1.isSuspense = function(a) {
      return z(a) === p;
    };
    reactIs_production_min$1.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r2 || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y2 || a.$$typeof === v);
    };
    reactIs_production_min$1.typeOf = z;
    return reactIs_production_min$1;
  }
  var reactIs$2 = reactIs$3.exports;
  var hasRequiredReactIs;
  function requireReactIs() {
    if (hasRequiredReactIs)
      return reactIs$3.exports;
    hasRequiredReactIs = 1;
    "use strict";
    if (process.env.NODE_ENV === "production") {
      reactIs$3.exports = requireReactIs_production_min$1();
    } else {
      reactIs$3.exports = requireReactIs_development$1();
    }
    return reactIs$3.exports;
  }
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  var objectAssign;
  var hasRequiredObjectAssign;
  function requireObjectAssign() {
    if (hasRequiredObjectAssign)
      return objectAssign;
    hasRequiredObjectAssign = 1;
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty.call(from2, key)) {
            to[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to;
    };
    return objectAssign;
  }
  var has;
  var hasRequiredHas;
  function requireHas() {
    if (hasRequiredHas)
      return has;
    hasRequiredHas = 1;
    has = Function.call.bind(Object.prototype.hasOwnProperty);
    return has;
  }
  var checkPropTypes_1;
  var hasRequiredCheckPropTypes;
  function requireCheckPropTypes() {
    if (hasRequiredCheckPropTypes)
      return checkPropTypes_1;
    hasRequiredCheckPropTypes = 1;
    "use strict";
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      var ReactPropTypesSecret = requireReactPropTypesSecret();
      var loggedTypeFailures = {};
      var has2 = requireHas();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
      if (process.env.NODE_ENV !== "production") {
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (process.env.NODE_ENV !== "production") {
        loggedTypeFailures = {};
      }
    };
    checkPropTypes_1 = checkPropTypes;
    return checkPropTypes_1;
  }
  var factoryWithTypeCheckers;
  var hasRequiredFactoryWithTypeCheckers;
  function requireFactoryWithTypeCheckers() {
    if (hasRequiredFactoryWithTypeCheckers)
      return factoryWithTypeCheckers;
    hasRequiredFactoryWithTypeCheckers = 1;
    "use strict";
    var ReactIs2 = requireReactIs();
    var assign2 = requireObjectAssign();
    var ReactPropTypesSecret = requireReactPropTypesSecret();
    var has2 = requireHas();
    var checkPropTypes = requireCheckPropTypes();
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess2) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y2) {
        if (x === y2) {
          return x !== 0 || 1 / x === 1 / y2;
        } else {
          return x !== x && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== "production") {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess2) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs2.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (process.env.NODE_ENV !== "production") {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has2(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode2(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has2(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode2);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode2(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode2(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    return factoryWithTypeCheckers;
  }
  var propTypes = propTypes$1.exports;
  if (process.env.NODE_ENV !== "production") {
    var ReactIs = requireReactIs();
    var throwOnDirectAccess = true;
    propTypes$1.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
  } else {
    propTypes$1.exports = requireFactoryWithThrowingShims()();
  }
  var propTypesExports = propTypes$1.exports;
  const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e))
        for (t = 0; t < e.length; t++)
          e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
      else
        for (t in e)
          e[t] && (n && (n += " "), n += t);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = ""; f < arguments.length; )
      (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  function chainPropTypes(propType1, propType2) {
    if (process.env.NODE_ENV === "production") {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }
  function isPlainObject(item) {
    return item !== null && typeof item === "object" && item.constructor === Object;
  }
  function deepClone(source) {
    if (!isPlainObject(source)) {
      return source;
    }
    const output = {};
    Object.keys(source).forEach((key) => {
      output[key] = deepClone(source[key]);
    });
    return output;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? _extends({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach((key) => {
        if (key === "__proto__") {
          return;
        }
        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
          output[key] = deepmerge(target[key], source[key], options);
        } else if (options.clone) {
          output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }
  function isClassComponent$1(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for Emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent$1(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);
  function isClassComponent(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementTypeAcceptingRef$1 = chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);
  const specialProperty = "exact-prop: ​";
  function exactProp(propTypes2) {
    if (process.env.NODE_ENV === "production") {
      return propTypes2;
    }
    return _extends({}, propTypes2, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes2.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }
  function formatMuiErrorMessage(code) {
    let url = "https://mui.com/production-error/?code=" + code;
    for (let i = 1; i < arguments.length; i += 1) {
      url += "&args[]=" + encodeURIComponent(arguments[i]);
    }
    return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
  }
  var reactIs$1 = { exports: {} };
  var reactIs_development = {};
  /**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_development;
  function requireReactIs_development() {
    if (hasRequiredReactIs_development)
      return reactIs_development;
    hasRequiredReactIs_development = 1;
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        reactIs_development.ContextConsumer = ContextConsumer;
        reactIs_development.ContextProvider = ContextProvider;
        reactIs_development.Element = Element2;
        reactIs_development.ForwardRef = ForwardRef;
        reactIs_development.Fragment = Fragment;
        reactIs_development.Lazy = Lazy;
        reactIs_development.Memo = Memo;
        reactIs_development.Portal = Portal2;
        reactIs_development.Profiler = Profiler;
        reactIs_development.StrictMode = StrictMode;
        reactIs_development.Suspense = Suspense;
        reactIs_development.SuspenseList = SuspenseList;
        reactIs_development.isAsyncMode = isAsyncMode;
        reactIs_development.isConcurrentMode = isConcurrentMode;
        reactIs_development.isContextConsumer = isContextConsumer;
        reactIs_development.isContextProvider = isContextProvider;
        reactIs_development.isElement = isElement2;
        reactIs_development.isForwardRef = isForwardRef;
        reactIs_development.isFragment = isFragment;
        reactIs_development.isLazy = isLazy;
        reactIs_development.isMemo = isMemo;
        reactIs_development.isPortal = isPortal;
        reactIs_development.isProfiler = isProfiler;
        reactIs_development.isStrictMode = isStrictMode;
        reactIs_development.isSuspense = isSuspense;
        reactIs_development.isSuspenseList = isSuspenseList;
        reactIs_development.isValidElementType = isValidElementType;
        reactIs_development.typeOf = typeOf;
      })();
    }
    return reactIs_development;
  }
  var reactIs_production_min = {};
  /**
   * @license React
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_production_min;
  function requireReactIs_production_min() {
    if (hasRequiredReactIs_production_min)
      return reactIs_production_min;
    hasRequiredReactIs_production_min = 1;
    "use strict";
    var b = Symbol.for("react.element"), c = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
    u = Symbol.for("react.module.reference");
    function v(a) {
      if ("object" === typeof a && null !== a) {
        var r2 = a.$$typeof;
        switch (r2) {
          case b:
            switch (a = a.type, a) {
              case d:
              case f:
              case e:
              case m:
              case n:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case h:
                  case l:
                  case q:
                  case p:
                  case g:
                    return a;
                  default:
                    return r2;
                }
            }
          case c:
            return r2;
        }
      }
    }
    reactIs_production_min.ContextConsumer = h;
    reactIs_production_min.ContextProvider = g;
    reactIs_production_min.Element = b;
    reactIs_production_min.ForwardRef = l;
    reactIs_production_min.Fragment = d;
    reactIs_production_min.Lazy = q;
    reactIs_production_min.Memo = p;
    reactIs_production_min.Portal = c;
    reactIs_production_min.Profiler = f;
    reactIs_production_min.StrictMode = e;
    reactIs_production_min.Suspense = m;
    reactIs_production_min.SuspenseList = n;
    reactIs_production_min.isAsyncMode = function() {
      return false;
    };
    reactIs_production_min.isConcurrentMode = function() {
      return false;
    };
    reactIs_production_min.isContextConsumer = function(a) {
      return v(a) === h;
    };
    reactIs_production_min.isContextProvider = function(a) {
      return v(a) === g;
    };
    reactIs_production_min.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === b;
    };
    reactIs_production_min.isForwardRef = function(a) {
      return v(a) === l;
    };
    reactIs_production_min.isFragment = function(a) {
      return v(a) === d;
    };
    reactIs_production_min.isLazy = function(a) {
      return v(a) === q;
    };
    reactIs_production_min.isMemo = function(a) {
      return v(a) === p;
    };
    reactIs_production_min.isPortal = function(a) {
      return v(a) === c;
    };
    reactIs_production_min.isProfiler = function(a) {
      return v(a) === f;
    };
    reactIs_production_min.isStrictMode = function(a) {
      return v(a) === e;
    };
    reactIs_production_min.isSuspense = function(a) {
      return v(a) === m;
    };
    reactIs_production_min.isSuspenseList = function(a) {
      return v(a) === n;
    };
    reactIs_production_min.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? true : false;
    };
    reactIs_production_min.typeOf = v;
    return reactIs_production_min;
  }
  var reactIs = reactIs$1.exports;
  "use strict";
  if (process.env.NODE_ENV === "production") {
    reactIs$1.exports = requireReactIs_production_min();
  } else {
    reactIs$1.exports = requireReactIs_development();
  }
  var reactIsExports = reactIs$1.exports;
  const index$1 = /* @__PURE__ */ getDefaultExportFromCjs(reactIsExports);
  const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    const match2 = `${fn}`.match(fnNameMatchRegex);
    const name = match2 && match2[1];
    return name || "";
  }
  function getFunctionComponentName(Component, fallback = "") {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
  }
  function getDisplayName(Component) {
    if (Component == null) {
      return void 0;
    }
    if (typeof Component === "string") {
      return Component;
    }
    if (typeof Component === "function") {
      return getFunctionComponentName(Component, "Component");
    }
    if (typeof Component === "object") {
      switch (Component.$$typeof) {
        case reactIsExports.ForwardRef:
          return getWrappedName(Component, Component.render, "ForwardRef");
        case reactIsExports.Memo:
          return getWrappedName(Component, Component.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (process.env.NODE_ENV === "production") {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }
  const ponyfillGlobal = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
  const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }
  function debounce$1(func, wait = 166) {
    let timeout;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout);
    };
    return debounced;
  }
  function deprecatedPropType(validator2, reason) {
    if (process.env.NODE_ENV === "production") {
      return () => null;
    }
    return (props, propName, componentName, location, propFullName) => {
      const componentNameSafe = componentName || "<<anonymous>>";
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error(`The ${location} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
      }
      return null;
    };
  }
  function isMuiElement(element, muiNames) {
    var _muiName, _element$type;
    return /* @__PURE__ */ React__namespace.isValidElement(element) && muiNames.indexOf(
      // For server components `muiName` is avaialble in element.type._payload.value.muiName
      // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
      // eslint-disable-next-line no-underscore-dangle
      (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName
    ) !== -1;
  }
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }
  function requirePropFactory(componentNameInError, Component) {
    if (process.env.NODE_ENV === "production") {
      return () => null;
    }
    const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;
    const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
      const propFullNameSafe = propFullName || propName;
      const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
      if (defaultTypeChecker) {
        const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
        if (typeCheckerResult) {
          return typeCheckerResult;
        }
      }
      if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
        return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
      }
      return null;
    };
    return requireProp;
  }
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }
  "use client";
  const useEnhancedEffect = typeof window !== "undefined" ? React__namespace.useLayoutEffect : React__namespace.useEffect;
  "use client";
  "use client";
  let globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React__namespace.useState(idOverride);
    const id = idOverride || defaultId;
    React__namespace.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  const maybeReactUseId = React__namespace["useId".toString()];
  function useId(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }
  "use client";
  function unsupportedProp(props, propName, componentName, location, propFullName) {
    if (process.env.NODE_ENV === "production") {
      return null;
    }
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }
  "use client";
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React__namespace.useRef(controlled !== void 0);
    const [valueState, setValue] = React__namespace.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React__namespace.useRef(defaultProp);
      React__namespace.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React__namespace.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }
  "use client";
  "use client";
  function useEventCallback(fn) {
    const ref = React__namespace.useRef(fn);
    useEnhancedEffect(() => {
      ref.current = fn;
    });
    return React__namespace.useRef((...args) => (
      // @ts-expect-error hide `this`
      (0, ref.current)(...args)
    )).current;
  }
  "use client";
  "use client";
  function useForkRef(...refs) {
    return React__namespace.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance) => {
        refs.forEach((ref) => {
          setRef(ref, instance);
        });
      };
    }, refs);
  }
  "use client";
  "use client";
  let hadKeyboardEvent = true;
  let hadFocusVisibleRecently = false;
  let hadFocusVisibleRecentlyTimeout;
  const inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node2) {
    const {
      type,
      tagName
    } = node2;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node2.readOnly) {
      return true;
    }
    if (node2.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown$1(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown$1, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function teardown(doc) {
    doc.removeEventListener("keydown", handleKeyDown$1, true);
    doc.removeEventListener("mousedown", handlePointerDown, true);
    doc.removeEventListener("pointerdown", handlePointerDown, true);
    doc.removeEventListener("touchstart", handlePointerDown, true);
    doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    const {
      target
    } = event;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function useIsFocusVisible() {
    const ref = React__namespace.useCallback((node2) => {
      if (node2 != null) {
        prepare(node2.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = React__namespace.useRef(false);
    function handleBlurVisible() {
      if (isFocusVisibleRef.current) {
        hadFocusVisibleRecently = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
        hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
          hadFocusVisibleRecently = false;
        }, 100);
        isFocusVisibleRef.current = false;
        return true;
      }
      return false;
    }
    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }
      return false;
    }
    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }
  let cachedType;
  function detectScrollType() {
    if (cachedType) {
      return cachedType;
    }
    const dummy = document.createElement("div");
    const container = document.createElement("div");
    container.style.width = "10px";
    container.style.height = "1px";
    dummy.appendChild(container);
    dummy.dir = "rtl";
    dummy.style.fontSize = "14px";
    dummy.style.width = "4px";
    dummy.style.height = "1px";
    dummy.style.position = "absolute";
    dummy.style.top = "-1000px";
    dummy.style.overflow = "scroll";
    document.body.appendChild(dummy);
    cachedType = "reverse";
    if (dummy.scrollLeft > 0) {
      cachedType = "default";
    } else {
      dummy.scrollLeft = 1;
      if (dummy.scrollLeft === 0) {
        cachedType = "negative";
      }
    }
    document.body.removeChild(dummy);
    return cachedType;
  }
  function getNormalizedScrollLeft(element, direction) {
    const scrollLeft = element.scrollLeft;
    if (direction !== "rtl") {
      return scrollLeft;
    }
    const type = detectScrollType();
    switch (type) {
      case "negative":
        return element.scrollWidth - element.clientWidth + scrollLeft;
      case "reverse":
        return element.scrollWidth - element.clientWidth - scrollLeft;
      default:
        return scrollLeft;
    }
  }
  "use client";
  const usePreviousProps = (value) => {
    const ref = React__namespace.useRef({});
    React__namespace.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };
  function getValidReactChildren(children) {
    return React__namespace.Children.toArray(children).filter((child) => /* @__PURE__ */ React__namespace.isValidElement(child));
  }
  const visuallyHidden = {
    border: 0,
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: -1,
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    whiteSpace: "nowrap",
    width: "1px"
  };
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  const isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  const integerPropType = process.env.NODE_ENV === "production" ? validatorNoop : validator;
  function resolveProps(defaultProps2, props) {
    const output = _extends({}, props);
    Object.keys(defaultProps2).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output[propName] = _extends({}, defaultProps2[propName], output[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps2[propName] || {};
        const slotProps = props[propName];
        output[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output[propName] = slotProps;
        } else {
          output[propName] = _extends({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
          });
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps2[propName];
      }
    });
    return output;
  }
  function composeClasses(slots, getUtilityClass, classes = void 0) {
    const output = {};
    Object.keys(slots).forEach(
      // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      (slot) => {
        output[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            const utilityClass = getUtilityClass(key);
            if (utilityClass !== "") {
              acc.push(utilityClass);
            }
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(" ");
      }
    );
    return output;
  }
  const defaultGenerator = (componentName) => componentName;
  const createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  const ClassNameGenerator = createClassNameGenerator();
  const globalStateClassesMapping = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    open: "open",
    readOnly: "readOnly",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator.generate(componentName)}-${slot}`;
  }
  function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
    });
    return result;
  }
  "use client";
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? process.env.NODE_ENV === "production" : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (process.env.NODE_ENV !== "production") {
        var isImportRule2 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule2 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule2;
      }
      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (process.env.NODE_ENV !== "production" && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
      if (process.env.NODE_ENV !== "production") {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var PAGE = "@page";
  var MEDIA = "@media";
  var IMPORT = "@import";
  var CHARSET = "@charset";
  var VIEWPORT = "@viewport";
  var SUPPORTS = "@supports";
  var DOCUMENT = "@document";
  var NAMESPACE = "@namespace";
  var KEYFRAMES = "@keyframes";
  var FONT_FACE = "@font-face";
  var COUNTER_STYLE = "@counter-style";
  var FONT_FEATURE_VALUES = "@font-feature-values";
  var LAYER = "@layer";
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash$2(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index2) {
    return value.charCodeAt(index2) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var line = 1;
  var column = 1;
  var length = 0;
  var position$1 = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position$1 > 0 ? charat(characters, --position$1) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position$1 < length ? charat(characters, position$1++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position$1);
  }
  function caret() {
    return position$1;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position$1 = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position$1 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function tokenize(value) {
    return dealloc(tokenizer(alloc(value)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function tokenizer(children) {
    while (next())
      switch (token(character)) {
        case 0:
          append(identifier(position$1 - 1), children);
          break;
        case 2:
          append(delimit(character), children);
          break;
        default:
          append(from(character), children);
      }
    return children;
  }
  function escaping(index2, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position$1;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position$1;
  }
  function commenter(type, index2) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index2, position$1 - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index2) {
    while (!token(peek()))
      next();
    return slice(index2, position$1);
  }
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules2, rulesets, pseudo, points, declarations) {
    var index2 = 0;
    var offset2 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules2;
    var children = rulesets;
    var reference2 = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index2++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset2:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference2 = ruleset(characters2, root, parent, index2, offset2, rules2, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root, reference2, reference2, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules2, points, type, rules2, props = [], length2), children), rules2, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                  }
          }
          index2 = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index2, offset2, rules2, points, type, props, children, length2) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules2 : [""];
    var size2 = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index2; ++i)
      for (var x = 0, y2 = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size2; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y2 : replace(y2, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset2 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  function prefix$1(value, length2, children) {
    switch (hash$2(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 4789:
        return MOZ + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
      case 6828:
      case 4268:
      case 2903:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/g, "") + (!match(value, /flex-|baseline/) ? MS + "grid-row-" + replace(value, /flex-|-self/g, "") : "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/g, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4200:
        if (!match(value, /flex-|baseline/))
          return MS + "grid-column-align" + substr(value, length2) + value;
        break;
      case 2592:
      case 3360:
        return MS + replace(value, "template-", "") + value;
      case 4384:
      case 3616:
        if (children && children.some(function(element, index2) {
          return length2 = index2, match(element.props, /grid-\w+-end/);
        })) {
          return ~indexof(value + (children = children[length2].value), "span") ? value : MS + replace(value, "-start", "") + value + MS + "grid-row-span:" + (~indexof(children, "span") ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ";";
        }
        return MS + replace(value, "-start", "") + value;
      case 4896:
      case 4128:
        return children && children.some(function(element) {
          return match(element.props, /grid-\w+-start/);
        }) ? value : MS + replace(replace(value, "-end", "-span"), "span ", "") + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix$1(replace(value, "stretch", "fill-available"), length2, children) + value : value;
          }
        break;
      case 5152:
      case 5920:
        return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_2, a, b, c, d, e, f) {
          return MS + a + ":" + b + f + (c ? MS + a + "-span:" + (d ? e : +e - +b) + f : "") + value;
        });
      case 4949:
        if (charat(value, length2 + 6) === 121)
          return replace(value, ":", ":" + WEBKIT) + value;
        break;
      case 6444:
        switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
          case 120:
            return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
          case 100:
            return replace(value, ":", ":" + MS) + value;
        }
        break;
      case 5719:
      case 2647:
      case 2135:
      case 3927:
      case 2391:
        return replace(value, "scroll-", "scroll-snap-") + value;
    }
    return value;
  }
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index2, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index2, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index2, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }
  function prefixer$1(element, index2, children, callback) {
    if (element.length > -1) {
      if (!element.return)
        switch (element.type) {
          case DECLARATION:
            element.return = prefix$1(element.value, element.length, children);
            return;
          case KEYFRAMES:
            return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                  case "::placeholder":
                    return serialize([
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                    ], callback);
                }
                return "";
              });
        }
    }
  }
  function namespace(element) {
    switch (element.type) {
      case RULESET:
        element.props = element.props.map(function(value) {
          return combine(tokenize(value), function(value2, index2, children) {
            switch (charat(value2, 0)) {
              case 12:
                return substr(value2, 1, strlen(value2));
              case 0:
              case 40:
              case 43:
              case 62:
              case 126:
                return value2;
              case 58:
                if (children[++index2] === "global")
                  children[index2] = "", children[++index2] = "\f" + substr(children[index2], index2 = 1, -1);
              case 32:
                return index2 === 1 ? "" : value2;
              default:
                switch (index2) {
                  case 0:
                    element = value2;
                    return sizeof(children) > 1 ? "" : value2;
                  case (index2 = sizeof(children) - 1):
                  case 2:
                    return index2 === 2 ? value2 + element + element : value2 + element;
                  default:
                    return value2;
                }
            }
          });
        });
    }
  }
  var weakMemoize = function weakMemoize2(func) {
    var cache2 = /* @__PURE__ */ new WeakMap();
    return function(arg) {
      if (cache2.has(arg)) {
        return cache2.get(arg);
      }
      var ret = func(arg);
      cache2.set(arg, ret);
      return ret;
    };
  };
  function memoize$1(fn) {
    var cache2 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache2[arg] === void 0)
        cache2[arg] = fn(arg);
      return cache2[arg];
    };
  }
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index2] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position$1);
  };
  var toRules = function toRules2(parsed, points) {
    var index2 = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index2] = 1;
          }
          parsed[index2] += identifierWithPointTracking(position$1 - 1, points, index2);
          break;
        case 2:
          parsed[index2] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index2] = peek() === 58 ? "&\f" : "";
            points[index2] = parsed[index2].length;
            break;
          }
        default:
          parsed[index2] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules2 = getRules(value, points);
    var parentRules = parent.props;
    for (var i = 0, k = 0; i < rules2.length; i++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i] ? rules2[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules2[i];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (
        // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98
      ) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache2) {
    return function(element, index2, children) {
      if (element.type !== "rule" || cache2.compat)
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses) {
        var isNested = !!element.parent;
        var commentContainer = isNested ? element.parent.children : (
          // global rule at the root level
          children
        );
        for (var i = commentContainer.length - 1; i >= 0; i--) {
          var node2 = commentContainer[i];
          if (node2.line < element.line) {
            break;
          }
          if (node2.column < element.column) {
            if (isIgnoringComment(node2)) {
              return;
            }
            break;
          }
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
    for (var i = index2 - 1; i >= 0; i--) {
      if (!isImportRule(children[i])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index2, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index2, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  function prefix(value, length2) {
    switch (hash$2(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element, index2, children, callback) {
    if (element.length > -1) {
      if (!element["return"])
        switch (element.type) {
          case DECLARATION:
            element["return"] = prefix(element.value, element.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element, {
              value: replace(element.value, "@", "@" + WEBKIT)
            })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, {
                      props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                    })], callback);
                  case "::placeholder":
                    return serialize([copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
        }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (process.env.NODE_ENV !== "production" && !key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (process.env.NODE_ENV !== "production") {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(
        // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
        function(node2) {
          var attrib = node2.getAttribute("data-emotion").split(" ");
          for (var i = 1; i < attrib.length; i++) {
            inserted[attrib[i]] = true;
          }
          nodesToHydrate.push(node2);
        }
      );
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (process.env.NODE_ENV !== "production") {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache2.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify, process.env.NODE_ENV !== "production" ? function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== COMMENT) {
            currentSheet.insert(element.value + "{}");
          }
        }
      } : rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles2) {
        return serialize(compile(styles2), serializer);
      };
      _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (process.env.NODE_ENV !== "production" && serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet.insert(rule + serialized.map);
            }
          };
        }
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache2.inserted[serialized.name] = true;
        }
      };
    }
    var cache2 = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache2.sheet.hydrate(nodesToHydrate);
    return cache2;
  };
  "use client";
  let cache;
  if (typeof document === "object") {
    cache = createCache({
      key: "css",
      prepend: true
    });
  }
  function StyledEngineProvider(props) {
    const {
      injectFirst,
      children
    } = props;
    return injectFirst && cache ? /* @__PURE__ */ jsxRuntimeExports.jsx(react.CacheProvider, {
      value: cache,
      children
    }) : children;
  }
  process.env.NODE_ENV !== "production" ? StyledEngineProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * By default, the styles are injected last in the <head> element of the page.
     * As a result, they gain more specificity than any other style sheet.
     * If you want to override MUI's styles, set this prop.
     */
    injectFirst: PropTypes.bool
  } : void 0;
  "use client";
  "use client";
  function isEmpty$4(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0;
  }
  function GlobalStyles$2(props) {
    const {
      styles: styles2,
      defaultTheme: defaultTheme2 = {}
    } = props;
    const globalStyles = typeof styles2 === "function" ? (themeInput) => styles2(isEmpty$4(themeInput) ? defaultTheme2 : themeInput) : styles2;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(react.Global, {
      styles: globalStyles
    });
  }
  process.env.NODE_ENV !== "production" ? GlobalStyles$2.propTypes = {
    defaultTheme: PropTypes.object,
    styles: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object, PropTypes.func])
  } : void 0;
  "use client";
  /**
   * @mui/styled-engine v5.15.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use client";
  function styled$2(tag, options) {
    const stylesFactory = emStyled(tag, options);
    if (process.env.NODE_ENV !== "production") {
      return (...styles2) => {
        const component = typeof tag === "string" ? `"${tag}"` : "component";
        if (styles2.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
        } else if (styles2.some((style2) => style2 === void 0)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }
        return stylesFactory(...styles2);
      };
    }
    return stylesFactory;
  }
  const internal_processStyles = (tag, processor) => {
    if (Array.isArray(tag.__emotion_styles)) {
      tag.__emotion_styles = processor(tag.__emotion_styles);
    }
  };
  const _excluded$1d = ["values", "unit", "step"];
  const breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
  const sortBreakpointsValues = (values2) => {
    const breakpointsAsArray = Object.keys(values2).map((key) => ({
      key,
      val: values2[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints2) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values2 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5
    } = breakpoints2, other = _objectWithoutPropertiesLoose(breakpoints2, _excluded$1d);
    const sortedValues = sortBreakpointsValues(values2);
    const keys = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start2, end2) {
      const endIndex = keys.indexOf(end2);
      return `@media (min-width:${typeof values2[start2] === "number" ? values2[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys[endIndex]] === "number" ? values2[keys[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }
  const shape = {
    borderRadius: 4
  };
  const responsivePropType = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) : {};
  function merge(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  const values$1 = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values$1[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index2) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index2])] = styleFromPropValue(propValue[index2]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function breakpoints(styleFunction) {
    const newStyleFunction = (props) => {
      const theme = props.theme || {};
      const base = styleFunction(props);
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      const extended = themeBreakpoints.keys.reduce((acc, key) => {
        if (props[key]) {
          acc = acc || {};
          acc[themeBreakpoints.up(key)] = styleFunction(_extends({
            theme
          }, props[key]));
        }
        return acc;
      }, null);
      return merge(base, extended);
    };
    newStyleFunction.propTypes = process.env.NODE_ENV !== "production" ? _extends({}, styleFunction.propTypes, {
      xs: PropTypes.object,
      sm: PropTypes.object,
      md: PropTypes.object,
      lg: PropTypes.object,
      xl: PropTypes.object
    }) : {};
    newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
    return newStyleFunction;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys2, style2) {
    return breakpointKeys2.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style2);
  }
  function mergeBreakpointsInOrder(breakpointsInput, ...styles2) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [emptyBreakpoints, ...styles2].reduce((prev2, next2) => deepmerge(prev2, next2), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
  }
  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    if (typeof breakpointValues !== "object") {
      return {};
    }
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i) => {
        if (i < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach((breakpoint) => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }
    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) {
      return breakpointValues;
    }
    let previous;
    return keys.reduce((acc, breakpoint, i) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
        previous = i;
      } else if (typeof breakpointValues === "object") {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
        previous = breakpoint;
      } else {
        acc[breakpoint] = breakpointValues;
      }
      return acc;
    }, {});
  }
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style$2(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue$1(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = process.env.NODE_ENV !== "production" ? {
      [prop]: responsivePropType
    } : {};
    fn.filterProps = [prop];
    return fn;
  }
  function memoize(fn) {
    const cache2 = {};
    return (arg) => {
      if (cache2[arg] === void 0) {
        cache2[arg] = fn(arg);
      }
      return cache2[arg];
    };
  }
  const properties = {
    m: "margin",
    p: "padding"
  };
  const directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  const aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  const getCssProperties = memoize((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  const spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (process.env.NODE_ENV !== "production") {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (process.env.NODE_ENV !== "production") {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (process.env.NODE_ENV !== "production") {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style$1(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
  }
  function margin(props) {
    return style$1(props, marginKeys);
  }
  margin.propTypes = process.env.NODE_ENV !== "production" ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style$1(props, paddingKeys);
  }
  padding.propTypes = process.env.NODE_ENV !== "production" ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style$1(props, spacingKeys);
  }
  spacing.propTypes = process.env.NODE_ENV !== "production" ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing2 = (...argsInput) => {
      if (process.env.NODE_ENV !== "production") {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }
  function compose(...styles2) {
    const handlers = styles2.reduce((acc, style2) => {
      style2.filterProps.forEach((prop) => {
        acc[prop] = style2;
      });
      return acc;
    }, {});
    const fn = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn.propTypes = process.env.NODE_ENV !== "production" ? styles2.reduce((acc, style2) => Object.assign(acc, style2.propTypes), {}) : {};
    fn.filterProps = styles2.reduce((acc, style2) => acc.concat(style2.filterProps), []);
    return fn;
  }
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle(prop, transform) {
    return style$2({
      prop,
      themeKey: "borders",
      transform
    });
  }
  const border = createBorderStyle("border", borderTransform);
  const borderTop = createBorderStyle("borderTop", borderTransform);
  const borderRight = createBorderStyle("borderRight", borderTransform);
  const borderBottom = createBorderStyle("borderBottom", borderTransform);
  const borderLeft = createBorderStyle("borderLeft", borderTransform);
  const borderColor = createBorderStyle("borderColor");
  const borderTopColor = createBorderStyle("borderTopColor");
  const borderRightColor = createBorderStyle("borderRightColor");
  const borderBottomColor = createBorderStyle("borderBottomColor");
  const borderLeftColor = createBorderStyle("borderLeftColor");
  const outline = createBorderStyle("outline", borderTransform);
  const outlineColor = createBorderStyle("outlineColor");
  const borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = process.env.NODE_ENV !== "production" ? {
    borderRadius: responsivePropType
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  const borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
  const gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = process.env.NODE_ENV !== "production" ? {
    gap: responsivePropType
  } : {};
  gap.filterProps = ["gap"];
  const columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = process.env.NODE_ENV !== "production" ? {
    columnGap: responsivePropType
  } : {};
  columnGap.filterProps = ["columnGap"];
  const rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = process.env.NODE_ENV !== "production" ? {
    rowGap: responsivePropType
  } : {};
  rowGap.filterProps = ["rowGap"];
  const gridColumn = style$2({
    prop: "gridColumn"
  });
  const gridRow = style$2({
    prop: "gridRow"
  });
  const gridAutoFlow = style$2({
    prop: "gridAutoFlow"
  });
  const gridAutoColumns = style$2({
    prop: "gridAutoColumns"
  });
  const gridAutoRows = style$2({
    prop: "gridAutoRows"
  });
  const gridTemplateColumns = style$2({
    prop: "gridTemplateColumns"
  });
  const gridTemplateRows = style$2({
    prop: "gridTemplateRows"
  });
  const gridTemplateAreas = style$2({
    prop: "gridTemplateAreas"
  });
  const gridArea = style$2({
    prop: "gridArea"
  });
  const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  const color = style$2({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  const bgcolor = style$2({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  const backgroundColor = style$2({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  const palette = compose(color, bgcolor, backgroundColor);
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  const width = style$2({
    prop: "width",
    transform: sizingTransform
  });
  const maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme2;
        const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  const minWidth = style$2({
    prop: "minWidth",
    transform: sizingTransform
  });
  const height = style$2({
    prop: "height",
    transform: sizingTransform
  });
  const maxHeight = style$2({
    prop: "maxHeight",
    transform: sizingTransform
  });
  const minHeight = style$2({
    prop: "minHeight",
    transform: sizingTransform
  });
  const sizeWidth = style$2({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  const sizeHeight = style$2({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  const boxSizing = style$2({
    prop: "boxSizing"
  });
  const sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  const defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue2(prop, val, theme, config2) {
      const props = {
        [prop]: val,
        theme
      };
      const options = config2[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style2
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme, themeKey) || {};
      if (style2) {
        return style2(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue$1(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx2(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config2 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config2[styleKey]) {
                css = merge(css, getThemeValue2(styleKey, value, theme, config2));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css[styleKey] = styleFunctionSx2({
                    sx: value,
                    theme
                  });
                } else {
                  css = merge(css, breakpointsValues);
                }
              }
            } else {
              css = merge(css, getThemeValue2(styleKey, value, theme, config2));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx2;
  }
  const styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  const _excluded$1c = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme$1(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded$1c);
    const breakpoints2 = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints: breakpoints2,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing: spacing2,
      shape: _extends({}, shape, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  "use client";
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme$3(defaultTheme2 = null) {
    const contextTheme = React__namespace.useContext(react.ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
  }
  "use client";
  const systemDefaultTheme$1 = createTheme$1();
  function useTheme$2(defaultTheme2 = systemDefaultTheme$1) {
    return useTheme$3(defaultTheme2);
  }
  "use client";
  function GlobalStyles$1({
    styles: styles2,
    themeId,
    defaultTheme: defaultTheme2 = {}
  }) {
    const upperTheme = useTheme$2(defaultTheme2);
    const globalStyles = typeof styles2 === "function" ? styles2(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles2;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
      styles: globalStyles
    });
  }
  process.env.NODE_ENV !== "production" ? GlobalStyles$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    defaultTheme: PropTypes.object,
    /**
     * @ignore
     */
    styles: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool]),
    /**
     * @ignore
     */
    themeId: PropTypes.string
  } : void 0;
  "use client";
  const displayPrint = style$2({
    prop: "displayPrint",
    cssProperty: false,
    transform: (value) => ({
      "@media print": {
        display: value
      }
    })
  });
  const displayRaw = style$2({
    prop: "display"
  });
  const overflow = style$2({
    prop: "overflow"
  });
  const textOverflow = style$2({
    prop: "textOverflow"
  });
  const visibility = style$2({
    prop: "visibility"
  });
  const whiteSpace = style$2({
    prop: "whiteSpace"
  });
  const display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
  const flexBasis = style$2({
    prop: "flexBasis"
  });
  const flexDirection = style$2({
    prop: "flexDirection"
  });
  const flexWrap = style$2({
    prop: "flexWrap"
  });
  const justifyContent = style$2({
    prop: "justifyContent"
  });
  const alignItems = style$2({
    prop: "alignItems"
  });
  const alignContent = style$2({
    prop: "alignContent"
  });
  const order$1 = style$2({
    prop: "order"
  });
  const flex = style$2({
    prop: "flex"
  });
  const flexGrow = style$2({
    prop: "flexGrow"
  });
  const flexShrink = style$2({
    prop: "flexShrink"
  });
  const alignSelf = style$2({
    prop: "alignSelf"
  });
  const justifyItems = style$2({
    prop: "justifyItems"
  });
  const justifySelf = style$2({
    prop: "justifySelf"
  });
  const flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order$1, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  const position = style$2({
    prop: "position"
  });
  const zIndex$1 = style$2({
    prop: "zIndex",
    themeKey: "zIndex"
  });
  const top$1 = style$2({
    prop: "top"
  });
  const right$1 = style$2({
    prop: "right"
  });
  const bottom$1 = style$2({
    prop: "bottom"
  });
  const left$1 = style$2({
    prop: "left"
  });
  const positions = compose(position, zIndex$1, top$1, right$1, bottom$1, left$1);
  const boxShadow = style$2({
    prop: "boxShadow",
    themeKey: "shadows"
  });
  const fontFamily = style$2({
    prop: "fontFamily",
    themeKey: "typography"
  });
  const fontSize = style$2({
    prop: "fontSize",
    themeKey: "typography"
  });
  const fontStyle = style$2({
    prop: "fontStyle",
    themeKey: "typography"
  });
  const fontWeight = style$2({
    prop: "fontWeight",
    themeKey: "typography"
  });
  const letterSpacing = style$2({
    prop: "letterSpacing"
  });
  const textTransform = style$2({
    prop: "textTransform"
  });
  const lineHeight = style$2({
    prop: "lineHeight"
  });
  const textAlign = style$2({
    prop: "textAlign"
  });
  const typographyVariant = style$2({
    prop: "typography",
    cssProperty: false,
    themeKey: "typography"
  });
  const typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
  const _excluded$1b = ["sx"];
  const splitProps = (props) => {
    var _props$theme$unstable, _props$theme;
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config2 = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig;
    Object.keys(props).forEach((prop) => {
      if (config2[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1b);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!isPlainObject(result)) {
          return systemProps;
        }
        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }
    return _extends({}, otherProps, {
      sx: finalSx
    });
  }
  const filterPropsMapping = {
    borders: borders.filterProps,
    display: display.filterProps,
    flexbox: flexbox.filterProps,
    grid: grid.filterProps,
    positions: positions.filterProps,
    palette: palette.filterProps,
    shadows: boxShadow.filterProps,
    sizing: sizing.filterProps,
    spacing: spacing.filterProps,
    typography: typography.filterProps
  };
  const styleFunctionMapping = {
    borders,
    display,
    flexbox,
    grid,
    positions,
    palette,
    shadows: boxShadow,
    sizing,
    spacing,
    typography
  };
  const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
    filterPropsMapping[styleFnName].forEach((propName) => {
      acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
  }, {});
  function getThemeValue(prop, value, theme) {
    const inputProps = {
      [prop]: value,
      theme
    };
    const styleFunction = propToStyleFunction[prop];
    return styleFunction ? styleFunction(inputProps) : {
      [prop]: value
    };
  }
  "use client";
  const _excluded$1a = ["className", "component"];
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme2,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = styled$2("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx);
    const Box2 = /* @__PURE__ */ React__namespace.forwardRef(function Box3(inProps, ref) {
      const theme = useTheme$2(defaultTheme2);
      const _extendSxProp = extendSxProp(inProps), {
        className,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded$1a);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(BoxRoot, _extends({
        as: component,
        ref,
        className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme[themeId] || theme : theme
      }, other));
    });
    return Box2;
  }
  const boxClasses$1 = generateUtilityClasses("MuiBox", ["root"]);
  "use client";
  const Box$1 = createBox({
    defaultClassName: boxClasses$1.root,
    generateClassName: ClassNameGenerator.generate
  });
  process.env.NODE_ENV !== "production" ? Box$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  const _excluded$19 = ["variant"];
  function isEmpty$3(string) {
    return string.length === 0;
  }
  function propsToClassKey(props) {
    const {
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$19);
    let classKey = variant || "";
    Object.keys(other).sort().forEach((key) => {
      if (key === "color") {
        classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
      } else {
        classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
      }
    });
    return classKey;
  }
  const _excluded$18 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  function isEmpty$2(obj) {
    return Object.keys(obj).length === 0;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
  }
  const getStyleOverrides = (name, theme) => {
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
      return theme.components[name].styleOverrides;
    }
    return null;
  };
  const transformVariants = (variants) => {
    const variantsStyles = {};
    if (variants) {
      variants.forEach((definition) => {
        const key = propsToClassKey(definition.props);
        variantsStyles[key] = definition.style;
      });
    }
    return variantsStyles;
  };
  const getVariantStyles = (name, theme) => {
    let variants = [];
    if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
      variants = theme.components[name].variants;
    }
    return transformVariants(variants);
  };
  const variantsResolver = (props, styles2, variants) => {
    const {
      ownerState = {}
    } = props;
    const variantsStyles = [];
    if (variants) {
      variants.forEach((variant) => {
        let isMatch = true;
        Object.keys(variant.props).forEach((key) => {
          if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
            isMatch = false;
          }
        });
        if (isMatch) {
          variantsStyles.push(styles2[propsToClassKey(variant.props)]);
        }
      });
    }
    return variantsStyles;
  };
  const themeVariantsResolver = (props, styles2, theme, name) => {
    var _theme$components;
    const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
    return variantsResolver(props, styles2, themeVariants);
  };
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  const systemDefaultTheme = createTheme$1();
  const lowercaseFirstLetter = (string) => {
    if (!string) {
      return string;
    }
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function resolveTheme({
    defaultTheme: defaultTheme2,
    theme,
    themeId
  }) {
    return isEmpty$2(theme) ? defaultTheme2 : theme[themeId] || theme;
  }
  function defaultOverridesResolver(slot) {
    if (!slot) {
      return null;
    }
    return (props, styles2) => styles2[slot];
  }
  const muiStyledFunctionResolver = ({
    styledArg,
    props,
    defaultTheme: defaultTheme2,
    themeId
  }) => {
    const resolvedStyles = styledArg(_extends({}, props, {
      theme: resolveTheme(_extends({}, props, {
        defaultTheme: defaultTheme2,
        themeId
      }))
    }));
    let optionalVariants;
    if (resolvedStyles && resolvedStyles.variants) {
      optionalVariants = resolvedStyles.variants;
      delete resolvedStyles.variants;
    }
    if (optionalVariants) {
      const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
      return [resolvedStyles, ...variantsStyles];
    }
    return resolvedStyles;
  };
  function createStyled(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme2 = systemDefaultTheme,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    const systemSx = (props) => {
      return styleFunctionSx(_extends({}, props, {
        theme: resolveTheme(_extends({}, props, {
          defaultTheme: defaultTheme2,
          themeId
        }))
      }));
    };
    systemSx.__mui_systemSx = true;
    return (tag, inputOptions = {}) => {
      internal_processStyles(tag, (styles2) => styles2.filter((style2) => !(style2 != null && style2.__mui_systemSx)));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver: overridesResolver2 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded$18);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
      );
      const skipSx = inputSkipSx || false;
      let label;
      if (process.env.NODE_ENV !== "production") {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root" || componentSlot === "root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = styled$2(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const muiStyledResolver = (styleArg, ...expressions) => {
        const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
          if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg) {
            return (props) => muiStyledFunctionResolver({
              styledArg: stylesArg,
              props,
              defaultTheme: defaultTheme2,
              themeId
            });
          }
          if (isPlainObject(stylesArg)) {
            let transformedStylesArg = stylesArg;
            let styledArgVariants;
            if (stylesArg && stylesArg.variants) {
              styledArgVariants = stylesArg.variants;
              delete transformedStylesArg.variants;
              transformedStylesArg = (props) => {
                let result = stylesArg;
                const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
                variantStyles.forEach((variantStyle) => {
                  result = deepmerge(result, variantStyle);
                });
                return result;
              };
            }
            return transformedStylesArg;
          }
          return stylesArg;
        }) : [];
        let transformedStyleArg = styleArg;
        if (isPlainObject(styleArg)) {
          let styledArgVariants;
          if (styleArg && styleArg.variants) {
            styledArgVariants = styleArg.variants;
            delete transformedStyleArg.variants;
            transformedStyleArg = (props) => {
              let result = styleArg;
              const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
              variantStyles.forEach((variantStyle) => {
                result = deepmerge(result, variantStyle);
              });
              return result;
            };
          }
        } else if (typeof styleArg === "function" && // On the server Emotion doesn't use React.forwardRef for creating components, so the created
        // component stays as a function. This condition makes sure that we do not interpolate functions
        // which are basically components used as a selectors.
        styleArg.__emotion_real !== styleArg) {
          transformedStyleArg = (props) => muiStyledFunctionResolver({
            styledArg: styleArg,
            props,
            defaultTheme: defaultTheme2,
            themeId
          });
        }
        if (componentName && overridesResolver2) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }));
            const styleOverrides = getStyleOverrides(componentName, theme);
            if (styleOverrides) {
              const resolvedStyleOverrides = {};
              Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends({}, props, {
                  theme
                })) : slotStyle;
              });
              return overridesResolver2(props, resolvedStyleOverrides);
            }
            return null;
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }));
            return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push(systemSx);
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        }
        const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (process.env.NODE_ENV !== "production") {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${capitalize(componentSlot || "")}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${getDisplayName(tag)})`;
          }
          Component.displayName = displayName;
        }
        if (tag.muiName) {
          Component.muiName = tag.muiName;
        }
        return Component;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }
  const styled$1 = createStyled();
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name].defaultProps, props);
  }
  "use client";
  function useThemeProps$1({
    props,
    name,
    defaultTheme: defaultTheme2,
    themeId
  }) {
    let theme = useTheme$2(defaultTheme2);
    if (themeId) {
      theme = theme[themeId] || theme;
    }
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }
  "use client";
  function clamp$3(value, min2 = 0, max2 = 1) {
    if (process.env.NODE_ENV !== "production") {
      if (value < min2 || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
      }
    }
    return Math.min(Math.max(min2, value), max2);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n) => n + n);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index2) => {
      return index2 < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function intToHex(int) {
    const hex = int.toString(16);
    return hex.length === 1 ? `0${hex}` : hex;
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color2));
    }
    let values2 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values2 = values2.split(" ");
      colorSpace = values2.shift();
      if (values2.length === 4 && values2[3].charAt(0) === "/") {
        values2[3] = values2[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
      }
    } else {
      values2 = values2.split(",");
    }
    values2 = values2.map((value) => parseFloat(value));
    return {
      type,
      values: values2,
      colorSpace
    };
  }
  const colorChannel = (color2) => {
    const decomposedColor = decomposeColor(color2);
    return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
  };
  const private_safeColorChannel = (color2, warning) => {
    try {
      return colorChannel(color2);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  };
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values2
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf("hsl") !== -1) {
      values2[1] = `${values2[1]}%`;
      values2[2] = `${values2[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values2 = `${colorSpace} ${values2.join(" ")}`;
    } else {
      values2 = `${values2.join(", ")}`;
    }
    return `${type}(${values2})`;
  }
  function rgbToHex(color2) {
    if (color2.indexOf("#") === 0) {
      return color2;
    }
    const {
      values: values2
    } = decomposeColor(color2);
    return `#${values2.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values2
    } = color2;
    const h = values2[0];
    const s = values2[1] / 100;
    const l = values2[2] / 100;
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values2[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : __pow((val + 0.055) / 1.055, 2.4);
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clamp$3(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function private_safeAlpha(color2, value, warning) {
    try {
      return alpha(color2, value);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp$3(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function private_safeDarken(color2, coefficient, warning) {
    try {
      return darken(color2, coefficient);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp$3(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (255 - color2.values[i]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (1 - color2.values[i]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function private_safeLighten(color2, coefficient, warning) {
    try {
      return lighten(color2, coefficient);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  function emphasize(color2, coefficient = 0.15) {
    return getLuminance(color2) > 0.5 ? darken(color2, coefficient) : lighten(color2, coefficient);
  }
  function private_safeEmphasize(color2, coefficient, warning) {
    try {
      return private_safeEmphasize(color2, coefficient);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  const ThemeContext = /* @__PURE__ */ React__namespace.createContext(null);
  if (process.env.NODE_ENV !== "production") {
    ThemeContext.displayName = "ThemeContext";
  }
  function useTheme$1() {
    const theme = React__namespace.useContext(ThemeContext);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useDebugValue(theme);
    }
    return theme;
  }
  const hasSymbol = typeof Symbol === "function" && Symbol.for;
  const nested = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(outerTheme);
      if (process.env.NODE_ENV !== "production") {
        if (!mergedTheme) {
          console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends({}, outerTheme, localTheme);
  }
  function ThemeProvider$2(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme$1();
    if (process.env.NODE_ENV !== "production") {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const theme = React__namespace.useMemo(() => {
      const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext.Provider, {
      value: theme,
      children
    });
  }
  process.env.NODE_ENV !== "production" ? ThemeProvider$2.propTypes = {
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    process.env.NODE_ENV !== "production" ? ThemeProvider$2.propTypes = exactProp(ThemeProvider$2.propTypes) : void 0;
  }
  /**
   * @mui/private-theming v5.15.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use client";
  const EMPTY_THEME = {};
  function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return React__namespace.useMemo(() => {
      const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(resolvedTheme);
        const result = themeId ? _extends({}, upperTheme, {
          [themeId]: mergedTheme
        }) : mergedTheme;
        if (isPrivate) {
          return () => result;
        }
        return result;
      }
      return themeId ? _extends({}, upperTheme, {
        [themeId]: localTheme
      }) : _extends({}, upperTheme, localTheme);
    }, [themeId, upperTheme, localTheme, isPrivate]);
  }
  function ThemeProvider$1(props) {
    const {
      children,
      theme: localTheme,
      themeId
    } = props;
    const upperTheme = useTheme$3(EMPTY_THEME);
    const upperPrivateTheme = useTheme$1() || EMPTY_THEME;
    if (process.env.NODE_ENV !== "production") {
      if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$2, {
      theme: privateTheme,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(react.ThemeContext.Provider, {
        value: engineTheme,
        children
      })
    });
  }
  process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,
    /**
     * The design system's unique id for getting the corresponded theme when there are multiple design systems.
     */
    themeId: PropTypes.string
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes) : void 0;
  }
  "use client";
  const DEFAULT_MODE_STORAGE_KEY = "mode";
  const DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
  const DEFAULT_ATTRIBUTE = "data-color-scheme";
  function getInitColorSchemeScript$1(options) {
    const {
      defaultMode = "light",
      defaultLightColorScheme = "light",
      defaultDarkColorScheme = "dark",
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      attribute = DEFAULT_ATTRIBUTE,
      colorSchemeNode = "document.documentElement"
    } = options || {};
    return /* @__PURE__ */ jsxRuntimeExports.jsx("script", {
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML: {
        __html: `(function() {
try {
  var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  var colorScheme = '';
  if (mode === 'system') {
    // handle system mode
    var mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
    } else {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
    }
  }
  if (mode === 'light') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  }
  if (mode === 'dark') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  }
  if (colorScheme) {
    ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
  }
} catch(e){}})();`
      }
    }, "mui-color-scheme-init");
  }
  "use client";
  function getSystemMode(mode) {
    if (typeof window !== "undefined" && mode === "system") {
      const mql = window.matchMedia("(prefers-color-scheme: dark)");
      if (mql.matches) {
        return "dark";
      }
      return "light";
    }
    return void 0;
  }
  function processState(state, callback) {
    if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
      return callback("light");
    }
    if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
      return callback("dark");
    }
    return void 0;
  }
  function getColorScheme(state) {
    return processState(state, (mode) => {
      if (mode === "light") {
        return state.lightColorScheme;
      }
      if (mode === "dark") {
        return state.darkColorScheme;
      }
      return void 0;
    });
  }
  function initializeValue(key, defaultValue) {
    if (typeof window === "undefined") {
      return void 0;
    }
    let value;
    try {
      value = localStorage.getItem(key) || void 0;
      if (!value) {
        localStorage.setItem(key, defaultValue);
      }
    } catch (e) {
    }
    return value || defaultValue;
  }
  function useCurrentColorScheme(options) {
    const {
      defaultMode = "light",
      defaultLightColorScheme,
      defaultDarkColorScheme,
      supportedColorSchemes = [],
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      storageWindow = typeof window === "undefined" ? void 0 : window
    } = options;
    const joinedColorSchemes = supportedColorSchemes.join(",");
    const [state, setState] = React__namespace.useState(() => {
      const initialMode = initializeValue(modeStorageKey, defaultMode);
      const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
      const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
      return {
        mode: initialMode,
        systemMode: getSystemMode(initialMode),
        lightColorScheme,
        darkColorScheme
      };
    });
    const colorScheme = getColorScheme(state);
    const setMode = React__namespace.useCallback((mode) => {
      setState((currentState) => {
        if (mode === currentState.mode) {
          return currentState;
        }
        const newMode = !mode ? defaultMode : mode;
        try {
          localStorage.setItem(modeStorageKey, newMode);
        } catch (e) {
        }
        return _extends({}, currentState, {
          mode: newMode,
          systemMode: getSystemMode(newMode)
        });
      });
    }, [modeStorageKey, defaultMode]);
    const setColorScheme = React__namespace.useCallback((value) => {
      if (!value) {
        setState((currentState) => {
          try {
            localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
            localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
          } catch (e) {
          }
          return _extends({}, currentState, {
            lightColorScheme: defaultLightColorScheme,
            darkColorScheme: defaultDarkColorScheme
          });
        });
      } else if (typeof value === "string") {
        if (value && !joinedColorSchemes.includes(value)) {
          console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
        } else {
          setState((currentState) => {
            const newState = _extends({}, currentState);
            processState(currentState, (mode) => {
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
              } catch (e) {
              }
              if (mode === "light") {
                newState.lightColorScheme = value;
              }
              if (mode === "dark") {
                newState.darkColorScheme = value;
              }
            });
            return newState;
          });
        }
      } else {
        setState((currentState) => {
          const newState = _extends({}, currentState);
          const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
          const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
          if (newLightColorScheme) {
            if (!joinedColorSchemes.includes(newLightColorScheme)) {
              console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.lightColorScheme = newLightColorScheme;
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
              } catch (error) {
              }
            }
          }
          if (newDarkColorScheme) {
            if (!joinedColorSchemes.includes(newDarkColorScheme)) {
              console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.darkColorScheme = newDarkColorScheme;
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
              } catch (error) {
              }
            }
          }
          return newState;
        });
      }
    }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
    const handleMediaQuery = React__namespace.useCallback((e) => {
      if (state.mode === "system") {
        setState((currentState) => _extends({}, currentState, {
          systemMode: e != null && e.matches ? "dark" : "light"
        }));
      }
    }, [state.mode]);
    const mediaListener = React__namespace.useRef(handleMediaQuery);
    mediaListener.current = handleMediaQuery;
    React__namespace.useEffect(() => {
      const handler = (...args) => mediaListener.current(...args);
      const media = window.matchMedia("(prefers-color-scheme: dark)");
      media.addListener(handler);
      handler(media);
      return () => media.removeListener(handler);
    }, []);
    React__namespace.useEffect(() => {
      const handleStorage = (event) => {
        const value = event.newValue;
        if (typeof event.key === "string" && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
          if (event.key.endsWith("light")) {
            setColorScheme({
              light: value
            });
          }
          if (event.key.endsWith("dark")) {
            setColorScheme({
              dark: value
            });
          }
        }
        if (event.key === modeStorageKey && (!value || ["light", "dark", "system"].includes(value))) {
          setMode(value || defaultMode);
        }
      };
      if (storageWindow) {
        storageWindow.addEventListener("storage", handleStorage);
        return () => storageWindow.removeEventListener("storage", handleStorage);
      }
      return void 0;
    }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
    return _extends({}, state, {
      colorScheme,
      setMode,
      setColorScheme
    });
  }
  const _excluded$17 = ["colorSchemes", "components", "generateCssVars", "cssVarPrefix"];
  const DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
  function createCssVarsProvider(options) {
    const {
      themeId,
      /**
       * This `theme` object needs to follow a certain structure to
       * be used correctly by the finel `CssVarsProvider`. It should have a
       * `colorSchemes` key with the light and dark (and any other) palette.
       * It should also ideally have a vars object created using `prepareCssVars`.
       */
      theme: defaultTheme2 = {},
      attribute: defaultAttribute = DEFAULT_ATTRIBUTE,
      modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      defaultMode: designSystemMode = "light",
      defaultColorScheme: designSystemColorScheme,
      disableTransitionOnChange: designSystemTransitionOnChange = false,
      resolveTheme: resolveTheme2,
      excludeVariablesFromRoot: excludeVariablesFromRoot2
    } = options;
    if (!defaultTheme2.colorSchemes || typeof designSystemColorScheme === "string" && !defaultTheme2.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === "object" && !defaultTheme2.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === "object" && !defaultTheme2.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
      console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
    }
    const ColorSchemeContext = /* @__PURE__ */ React__namespace.createContext(void 0);
    const useColorScheme2 = () => {
      const value = React__namespace.useContext(ColorSchemeContext);
      if (!value) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`useColorScheme\` must be called under <CssVarsProvider />` : formatMuiErrorMessage(19));
      }
      return value;
    };
    function CssVarsProvider2({
      children,
      theme: themeProp = defaultTheme2,
      modeStorageKey = defaultModeStorageKey,
      colorSchemeStorageKey = defaultColorSchemeStorageKey,
      attribute = defaultAttribute,
      defaultMode = designSystemMode,
      defaultColorScheme = designSystemColorScheme,
      disableTransitionOnChange = designSystemTransitionOnChange,
      storageWindow = typeof window === "undefined" ? void 0 : window,
      documentNode = typeof document === "undefined" ? void 0 : document,
      colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
      colorSchemeSelector = ":root",
      disableNestedContext = false,
      disableStyleSheetGeneration = false
    }) {
      const hasMounted = React__namespace.useRef(false);
      const upperTheme = useTheme$1();
      const ctx = React__namespace.useContext(ColorSchemeContext);
      const nested2 = !!ctx && !disableNestedContext;
      const scopedTheme = themeProp[themeId];
      const _ref = scopedTheme || themeProp, {
        colorSchemes = {},
        components = {},
        generateCssVars = () => ({
          vars: {},
          css: {}
        }),
        cssVarPrefix
      } = _ref, restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded$17);
      const allColorSchemes = Object.keys(colorSchemes);
      const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
      const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
      const {
        mode: stateMode,
        setMode,
        systemMode,
        lightColorScheme,
        darkColorScheme,
        colorScheme: stateColorScheme,
        setColorScheme
      } = useCurrentColorScheme({
        supportedColorSchemes: allColorSchemes,
        defaultLightColorScheme: defaultLightColorScheme2,
        defaultDarkColorScheme: defaultDarkColorScheme2,
        modeStorageKey,
        colorSchemeStorageKey,
        defaultMode,
        storageWindow
      });
      let mode = stateMode;
      let colorScheme = stateColorScheme;
      if (nested2) {
        mode = ctx.mode;
        colorScheme = ctx.colorScheme;
      }
      const calculatedMode = (() => {
        if (mode) {
          return mode;
        }
        if (defaultMode === "system") {
          return designSystemMode;
        }
        return defaultMode;
      })();
      const calculatedColorScheme = (() => {
        if (!colorScheme) {
          if (calculatedMode === "dark") {
            return defaultDarkColorScheme2;
          }
          return defaultLightColorScheme2;
        }
        return colorScheme;
      })();
      const {
        css: rootCss,
        vars: rootVars
      } = generateCssVars();
      const theme = _extends({}, restThemeProp, {
        components,
        colorSchemes,
        cssVarPrefix,
        vars: rootVars,
        getColorSchemeSelector: (targetColorScheme) => `[${attribute}="${targetColorScheme}"] &`
      });
      const defaultColorSchemeStyleSheet = {};
      const otherColorSchemesStyleSheet = {};
      Object.entries(colorSchemes).forEach(([key, scheme]) => {
        const {
          css,
          vars
        } = generateCssVars(key);
        theme.vars = deepmerge(theme.vars, vars);
        if (key === calculatedColorScheme) {
          Object.keys(scheme).forEach((schemeKey) => {
            if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
              theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);
            } else {
              theme[schemeKey] = scheme[schemeKey];
            }
          });
          if (theme.palette) {
            theme.palette.colorScheme = key;
          }
        }
        const resolvedDefaultColorScheme = (() => {
          if (typeof defaultColorScheme === "string") {
            return defaultColorScheme;
          }
          if (defaultMode === "dark") {
            return defaultColorScheme.dark;
          }
          return defaultColorScheme.light;
        })();
        if (key === resolvedDefaultColorScheme) {
          if (excludeVariablesFromRoot2) {
            const excludedVariables = {};
            excludeVariablesFromRoot2(cssVarPrefix).forEach((cssVar) => {
              excludedVariables[cssVar] = css[cssVar];
              delete css[cssVar];
            });
            defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
          }
          defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css;
        } else {
          otherColorSchemesStyleSheet[`${colorSchemeSelector === ":root" ? "" : colorSchemeSelector}[${attribute}="${key}"]`] = css;
        }
      });
      theme.vars = deepmerge(theme.vars, rootVars);
      React__namespace.useEffect(() => {
        if (colorScheme && colorSchemeNode) {
          colorSchemeNode.setAttribute(attribute, colorScheme);
        }
      }, [colorScheme, attribute, colorSchemeNode]);
      React__namespace.useEffect(() => {
        let timer;
        if (disableTransitionOnChange && hasMounted.current && documentNode) {
          const css = documentNode.createElement("style");
          css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
          documentNode.head.appendChild(css);
          (() => window.getComputedStyle(documentNode.body))();
          timer = setTimeout(() => {
            documentNode.head.removeChild(css);
          }, 1);
        }
        return () => {
          clearTimeout(timer);
        };
      }, [colorScheme, disableTransitionOnChange, documentNode]);
      React__namespace.useEffect(() => {
        hasMounted.current = true;
        return () => {
          hasMounted.current = false;
        };
      }, []);
      const contextValue = React__namespace.useMemo(() => ({
        mode,
        systemMode,
        setMode,
        lightColorScheme,
        darkColorScheme,
        colorScheme,
        setColorScheme,
        allColorSchemes
      }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
      let shouldGenerateStyleSheet = true;
      if (disableStyleSheetGeneration || nested2 && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {
        shouldGenerateStyleSheet = false;
      }
      const element = /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
        children: [shouldGenerateStyleSheet && /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
            styles: {
              [colorSchemeSelector]: rootCss
            }
          }), /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
            styles: defaultColorSchemeStyleSheet
          }), /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
            styles: otherColorSchemesStyleSheet
          })]
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$1, {
          themeId: scopedTheme ? themeId : void 0,
          theme: resolveTheme2 ? resolveTheme2(theme) : theme,
          children
        })]
      });
      if (nested2) {
        return element;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ColorSchemeContext.Provider, {
        value: contextValue,
        children: element
      });
    }
    process.env.NODE_ENV !== "production" ? CssVarsProvider2.propTypes = {
      /**
       * The body attribute name to attach colorScheme.
       */
      attribute: PropTypes.string,
      /**
       * The component tree.
       */
      children: PropTypes.node,
      /**
       * The node used to attach the color-scheme attribute
       */
      colorSchemeNode: PropTypes.any,
      /**
       * The CSS selector for attaching the generated custom properties
       */
      colorSchemeSelector: PropTypes.string,
      /**
       * localStorage key used to store `colorScheme`
       */
      colorSchemeStorageKey: PropTypes.string,
      /**
       * The initial color scheme used.
       */
      defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
      /**
       * The initial mode used.
       */
      defaultMode: PropTypes.string,
      /**
       * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
       */
      disableNestedContext: PropTypes.bool,
      /**
       * If `true`, the style sheet won't be generated.
       *
       * This is useful for controlling nested CssVarsProvider behavior.
       */
      disableStyleSheetGeneration: PropTypes.bool,
      /**
       * Disable CSS transitions when switching between modes or color schemes.
       */
      disableTransitionOnChange: PropTypes.bool,
      /**
       * The document to attach the attribute to.
       */
      documentNode: PropTypes.any,
      /**
       * The key in the local storage used to store current color scheme.
       */
      modeStorageKey: PropTypes.string,
      /**
       * The window that attaches the 'storage' event listener.
       * @default window
       */
      storageWindow: PropTypes.any,
      /**
       * The calculated theme object that will be passed through context.
       */
      theme: PropTypes.object
    } : void 0;
    const defaultLightColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.light;
    const defaultDarkColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.dark;
    const getInitColorSchemeScript2 = (params) => getInitColorSchemeScript$1(_extends({
      attribute: defaultAttribute,
      colorSchemeStorageKey: defaultColorSchemeStorageKey,
      defaultMode: designSystemMode,
      defaultLightColorScheme,
      defaultDarkColorScheme,
      modeStorageKey: defaultModeStorageKey
    }, params));
    return {
      CssVarsProvider: CssVarsProvider2,
      useColorScheme: useColorScheme2,
      getInitColorSchemeScript: getInitColorSchemeScript2
    };
  }
  function createGetCssVar$1(prefix2 = "") {
    function appendVar(...vars) {
      if (!vars.length) {
        return "";
      }
      const value = vars[0];
      if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
        return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
      }
      return `, ${value}`;
    }
    const getCssVar = (field, ...fallbacks) => {
      return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
    };
    return getCssVar;
  }
  const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
    let temp = obj;
    keys.forEach((k, index2) => {
      if (index2 === keys.length - 1) {
        if (Array.isArray(temp)) {
          temp[Number(k)] = value;
        } else if (temp && typeof temp === "object") {
          temp[k] = value;
        }
      } else if (temp && typeof temp === "object") {
        if (!temp[k]) {
          temp[k] = arrayKeys.includes(k) ? [] : {};
        }
        temp = temp[k];
      }
    });
  };
  const walkObjectDeep = (obj, callback, shouldSkipPaths) => {
    function recurse(object, parentKeys = [], arrayKeys = []) {
      Object.entries(object).forEach(([key, value]) => {
        if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
          if (value !== void 0 && value !== null) {
            if (typeof value === "object" && Object.keys(value).length > 0) {
              recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
            } else {
              callback([...parentKeys, key], value, arrayKeys);
            }
          }
        }
      });
    }
    recurse(obj);
  };
  const getCssValue = (keys, value) => {
    if (typeof value === "number") {
      if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
        return value;
      }
      const lastKey = keys[keys.length - 1];
      if (lastKey.toLowerCase().indexOf("opacity") >= 0) {
        return value;
      }
      return `${value}px`;
    }
    return value;
  };
  function cssVarsParser(theme, options) {
    const {
      prefix: prefix2,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    } = options || {};
    const css = {};
    const vars = {};
    const varsWithDefaults = {};
    walkObjectDeep(
      theme,
      (keys, value, arrayKeys) => {
        if (typeof value === "string" || typeof value === "number") {
          if (!shouldSkipGeneratingVar2 || !shouldSkipGeneratingVar2(keys, value)) {
            const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys.join("-")}`;
            Object.assign(css, {
              [cssVar]: getCssValue(keys, value)
            });
            assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
            assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${value})`, arrayKeys);
          }
        }
      },
      (keys) => keys[0] === "vars"
      // skip 'vars/*' paths
    );
    return {
      css,
      vars,
      varsWithDefaults
    };
  }
  const _excluded$16 = ["colorSchemes", "components"], _excluded2$7 = ["light"];
  function prepareCssVars(theme, parserConfig) {
    const {
      colorSchemes = {}
    } = theme, otherTheme = _objectWithoutPropertiesLoose(theme, _excluded$16);
    const {
      vars: rootVars,
      css: rootCss,
      varsWithDefaults: rootVarsWithDefaults
    } = cssVarsParser(otherTheme, parserConfig);
    let themeVars = rootVarsWithDefaults;
    const colorSchemesMap = {};
    const {
      light: light2
    } = colorSchemes, otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2$7);
    Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
      const {
        vars,
        css,
        varsWithDefaults
      } = cssVarsParser(scheme, parserConfig);
      themeVars = deepmerge(themeVars, varsWithDefaults);
      colorSchemesMap[key] = {
        css,
        vars
      };
    });
    if (light2) {
      const {
        css,
        vars,
        varsWithDefaults
      } = cssVarsParser(light2, parserConfig);
      themeVars = deepmerge(themeVars, varsWithDefaults);
      colorSchemesMap.light = {
        css,
        vars
      };
    }
    const generateCssVars = (colorScheme) => {
      if (!colorScheme) {
        return {
          css: _extends({}, rootCss),
          vars: rootVars
        };
      }
      return {
        css: _extends({}, colorSchemesMap[colorScheme].css),
        vars: colorSchemesMap[colorScheme].vars
      };
    };
    return {
      vars: themeVars,
      generateCssVars
    };
  }
  const _excluded$15 = ["cssVarPrefix", "shouldSkipGeneratingVar"];
  function createCssVarsTheme(theme) {
    const {
      cssVarPrefix,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    } = theme, otherTheme = _objectWithoutPropertiesLoose(theme, _excluded$15);
    return _extends({}, theme, prepareCssVars(otherTheme, {
      prefix: cssVarPrefix,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    }));
  }
  const _excluded$14 = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
  const defaultTheme$5 = createTheme$1();
  const defaultCreateStyledComponent$2 = styled$1("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles2.fixed, ownerState.disableGutters && styles2.disableGutters];
    }
  });
  const useThemePropsDefault$2 = (inProps) => useThemeProps$1({
    props: inProps,
    name: "MuiContainer",
    defaultTheme: defaultTheme$5
  });
  const useUtilityClasses$N = (ownerState, componentName) => {
    const getContainerUtilityClass2 = (slot) => {
      return generateUtilityClass(componentName, slot);
    };
    const {
      classes,
      fixed,
      disableGutters,
      maxWidth: maxWidth2
    } = ownerState;
    const slots = {
      root: ["root", maxWidth2 && `maxWidth${capitalize(String(maxWidth2))}`, fixed && "fixed", disableGutters && "disableGutters"]
    };
    return composeClasses(slots, getContainerUtilityClass2, classes);
  };
  function createContainer(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent$2,
      useThemeProps: useThemeProps2 = useThemePropsDefault$2,
      componentName = "MuiContainer"
    } = options;
    const ContainerRoot = createStyledComponent(({
      theme,
      ownerState
    }) => _extends({
      width: "100%",
      marginLeft: "auto",
      boxSizing: "border-box",
      marginRight: "auto",
      display: "block"
    }, !ownerState.disableGutters && {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("sm")]: {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }
    }), ({
      theme,
      ownerState
    }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
      const breakpoint = breakpointValueKey;
      const value = theme.breakpoints.values[breakpoint];
      if (value !== 0) {
        acc[theme.breakpoints.up(breakpoint)] = {
          maxWidth: `${value}${theme.breakpoints.unit}`
        };
      }
      return acc;
    }, {}), ({
      theme,
      ownerState
    }) => _extends({}, ownerState.maxWidth === "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("xs")]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: Math.max(theme.breakpoints.values.xs, 444)
      }
    }, ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
    ownerState.maxWidth !== "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up(ownerState.maxWidth)]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
      }
    }));
    const Container2 = /* @__PURE__ */ React__namespace.forwardRef(function Container3(inProps, ref) {
      const props = useThemeProps2(inProps);
      const {
        className,
        component = "div",
        disableGutters = false,
        fixed = false,
        maxWidth: maxWidth2 = "lg"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$14);
      const ownerState = _extends({}, props, {
        component,
        disableGutters,
        fixed,
        maxWidth: maxWidth2
      });
      const classes = useUtilityClasses$N(ownerState, componentName);
      return (
        // @ts-ignore theme is injected by the styled util
        /* @__PURE__ */ jsxRuntimeExports.jsx(ContainerRoot, _extends({
          as: component,
          ownerState,
          className: clsx(classes.root, className),
          ref
        }, other))
      );
    });
    process.env.NODE_ENV !== "production" ? Container2.propTypes = {
      children: PropTypes.node,
      classes: PropTypes.object,
      className: PropTypes.string,
      component: PropTypes.elementType,
      disableGutters: PropTypes.bool,
      fixed: PropTypes.bool,
      maxWidth: PropTypes.oneOfType([PropTypes.oneOf(["xs", "sm", "md", "lg", "xl", false]), PropTypes.string]),
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } : void 0;
    return Container2;
  }
  "use client";
  const Container$1 = createContainer();
  process.env.NODE_ENV !== "production" ? Container$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: PropTypes.bool,
    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: PropTypes.bool,
    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: PropTypes.oneOfType([PropTypes.oneOf(["xs", "sm", "md", "lg", "xl", false]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getContainerUtilityClass$1(slot) {
    return generateUtilityClass("MuiContainer", slot);
  }
  const containerClasses$1 = generateUtilityClasses("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
  "use client";
  const filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
  const traverseBreakpoints = (breakpoints2, responsive, iterator) => {
    const smallestBreakpoint = breakpoints2.keys[0];
    if (Array.isArray(responsive)) {
      responsive.forEach((breakpointValue, index2) => {
        iterator((responsiveStyles, style2) => {
          if (index2 <= breakpoints2.keys.length - 1) {
            if (index2 === 0) {
              Object.assign(responsiveStyles, style2);
            } else {
              responsiveStyles[breakpoints2.up(breakpoints2.keys[index2])] = style2;
            }
          }
        }, breakpointValue);
      });
    } else if (responsive && typeof responsive === "object") {
      const keys = Object.keys(responsive).length > breakpoints2.keys.length ? breakpoints2.keys : filterBreakpointKeys(breakpoints2.keys, Object.keys(responsive));
      keys.forEach((key) => {
        if (breakpoints2.keys.indexOf(key) !== -1) {
          const breakpointValue = responsive[key];
          if (breakpointValue !== void 0) {
            iterator((responsiveStyles, style2) => {
              if (smallestBreakpoint === key) {
                Object.assign(responsiveStyles, style2);
              } else {
                responsiveStyles[breakpoints2.up(key)] = style2;
              }
            }, breakpointValue);
          }
        }
      });
    } else if (typeof responsive === "number" || typeof responsive === "string") {
      iterator((responsiveStyles, style2) => {
        Object.assign(responsiveStyles, style2);
      }, responsive);
    }
  };
  function appendLevel(level) {
    if (!level) {
      return "";
    }
    return `Level${level}`;
  }
  function isNestedContainer(ownerState) {
    return ownerState.unstable_level > 0 && ownerState.container;
  }
  function createGetSelfSpacing(ownerState) {
    return function getSelfSpacing(axis) {
      return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level)})`;
    };
  }
  function createGetParentSpacing(ownerState) {
    return function getParentSpacing(axis) {
      if (ownerState.unstable_level === 0) {
        return `var(--Grid-${axis}Spacing)`;
      }
      return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level - 1)})`;
    };
  }
  function getParentColumns(ownerState) {
    if (ownerState.unstable_level === 0) {
      return `var(--Grid-columns)`;
    }
    return `var(--Grid-columns${appendLevel(ownerState.unstable_level - 1)})`;
  }
  const generateGridSizeStyles = ({
    theme,
    ownerState
  }) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState);
    const styles2 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
      let style2 = {};
      if (value === true) {
        style2 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      }
      if (value === "auto") {
        style2 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      }
      if (typeof value === "number") {
        style2 = {
          flexGrow: 0,
          flexBasis: "auto",
          width: `calc(100% * ${value} / ${getParentColumns(ownerState)}${isNestedContainer(ownerState) ? ` + ${getSelfSpacing("column")}` : ""})`
        };
      }
      appendStyle(styles2, style2);
    });
    return styles2;
  };
  const generateGridOffsetStyles = ({
    theme,
    ownerState
  }) => {
    const styles2 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
      let style2 = {};
      if (value === "auto") {
        style2 = {
          marginLeft: "auto"
        };
      }
      if (typeof value === "number") {
        style2 = {
          marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / ${getParentColumns(ownerState)})`
        };
      }
      appendStyle(styles2, style2);
    });
    return styles2;
  };
  const generateGridColumnsStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const styles2 = isNestedContainer(ownerState) ? {
      [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: getParentColumns(ownerState)
    } : {
      "--Grid-columns": 12
    };
    traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
      appendStyle(styles2, {
        [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: value
      });
    });
    return styles2;
  };
  const generateGridRowSpacingStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState);
    const styles2 = isNestedContainer(ownerState) ? {
      // Set the default spacing as its parent spacing.
      // It will be overridden if spacing props are provided
      [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("row")
    } : {};
    traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
      var _theme$spacing;
      appendStyle(styles2, {
        [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
      });
    });
    return styles2;
  };
  const generateGridColumnSpacingStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState);
    const styles2 = isNestedContainer(ownerState) ? {
      // Set the default spacing as its parent spacing.
      // It will be overridden if spacing props are provided
      [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("column")
    } : {};
    traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
      var _theme$spacing2;
      appendStyle(styles2, {
        [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value)
      });
    });
    return styles2;
  };
  const generateGridDirectionStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const styles2 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
      appendStyle(styles2, {
        flexDirection: value
      });
    });
    return styles2;
  };
  const generateGridStyles = ({
    ownerState
  }) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState);
    const getParentSpacing = createGetParentSpacing(ownerState);
    return _extends({
      minWidth: 0,
      boxSizing: "border-box"
    }, ownerState.container && _extends({
      display: "flex",
      flexWrap: "wrap"
    }, ownerState.wrap && ownerState.wrap !== "wrap" && {
      flexWrap: ownerState.wrap
    }, {
      margin: `calc(${getSelfSpacing("row")} / -2) calc(${getSelfSpacing("column")} / -2)`
    }, ownerState.disableEqualOverflow && {
      margin: `calc(${getSelfSpacing("row")} * -1) 0px 0px calc(${getSelfSpacing("column")} * -1)`
    }), (!ownerState.container || isNestedContainer(ownerState)) && _extends({
      padding: `calc(${getParentSpacing("row")} / 2) calc(${getParentSpacing("column")} / 2)`
    }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
      padding: `${getParentSpacing("row")} 0px 0px ${getParentSpacing("column")}`
    }));
  };
  const generateSizeClassNames = (gridSize) => {
    const classNames = [];
    Object.entries(gridSize).forEach(([key, value]) => {
      if (value !== false && value !== void 0) {
        classNames.push(`grid-${key}-${String(value)}`);
      }
    });
    return classNames;
  };
  const generateSpacingClassNames = (spacing2, smallestBreakpoint = "xs") => {
    function isValidSpacing(val) {
      if (val === void 0) {
        return false;
      }
      return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
    }
    if (isValidSpacing(spacing2)) {
      return [`spacing-${smallestBreakpoint}-${String(spacing2)}`];
    }
    if (typeof spacing2 === "object" && !Array.isArray(spacing2)) {
      const classNames = [];
      Object.entries(spacing2).forEach(([key, value]) => {
        if (isValidSpacing(value)) {
          classNames.push(`spacing-${key}-${String(value)}`);
        }
      });
      return classNames;
    }
    return [];
  };
  const generateDirectionClasses = (direction) => {
    if (direction === void 0) {
      return [];
    }
    if (typeof direction === "object") {
      return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
    }
    return [`direction-xs-${String(direction)}`];
  };
  const _excluded$13 = ["className", "children", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow", "unstable_level"];
  const defaultTheme$4 = createTheme$1();
  const defaultCreateStyledComponent$1 = styled$1("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  });
  function useThemePropsDefault$1(props) {
    return useThemeProps$1({
      props,
      name: "MuiGrid",
      defaultTheme: defaultTheme$4
    });
  }
  function createGrid(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent$1,
      useThemeProps: useThemeProps2 = useThemePropsDefault$1,
      componentName = "MuiGrid"
    } = options;
    const OverflowContext = /* @__PURE__ */ React__namespace.createContext(void 0);
    const useUtilityClasses2 = (ownerState, theme) => {
      const {
        container,
        direction,
        spacing: spacing2,
        wrap,
        gridSize
      } = ownerState;
      const slots = {
        root: ["root", container && "container", wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...generateDirectionClasses(direction), ...generateSizeClassNames(gridSize), ...container ? generateSpacingClassNames(spacing2, theme.breakpoints.keys[0]) : []]
      };
      return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
    };
    const GridRoot = createStyledComponent(generateGridColumnsStyles, generateGridColumnSpacingStyles, generateGridRowSpacingStyles, generateGridSizeStyles, generateGridDirectionStyles, generateGridStyles, generateGridOffsetStyles);
    const Grid2 = /* @__PURE__ */ React__namespace.forwardRef(function Grid3(inProps, ref) {
      var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
      const theme = useTheme$2();
      const themeProps = useThemeProps2(inProps);
      const props = extendSxProp(themeProps);
      const overflow2 = React__namespace.useContext(OverflowContext);
      const {
        className,
        children,
        columns: columnsProp = 12,
        container = false,
        component = "div",
        direction = "row",
        wrap = "wrap",
        spacing: spacingProp = 0,
        rowSpacing: rowSpacingProp = spacingProp,
        columnSpacing: columnSpacingProp = spacingProp,
        disableEqualOverflow: themeDisableEqualOverflow,
        unstable_level: level = 0
      } = props, rest = _objectWithoutPropertiesLoose(props, _excluded$13);
      let disableEqualOverflow = themeDisableEqualOverflow;
      if (level && themeDisableEqualOverflow !== void 0) {
        disableEqualOverflow = inProps.disableEqualOverflow;
      }
      const gridSize = {};
      const gridOffset = {};
      const other = {};
      Object.entries(rest).forEach(([key, val]) => {
        if (theme.breakpoints.values[key] !== void 0) {
          gridSize[key] = val;
        } else if (theme.breakpoints.values[key.replace("Offset", "")] !== void 0) {
          gridOffset[key.replace("Offset", "")] = val;
        } else {
          other[key] = val;
        }
      });
      const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : level ? void 0 : columnsProp;
      const spacing2 = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : level ? void 0 : spacingProp;
      const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : level ? void 0 : rowSpacingProp;
      const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : level ? void 0 : columnSpacingProp;
      const ownerState = _extends({}, props, {
        level,
        columns,
        container,
        direction,
        wrap,
        spacing: spacing2,
        rowSpacing,
        columnSpacing,
        gridSize,
        gridOffset,
        disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow2) != null ? _ref3 : false,
        // use context value if exists.
        parentDisableEqualOverflow: overflow2
        // for nested grid
      });
      const classes = useUtilityClasses2(ownerState, theme);
      let result = /* @__PURE__ */ jsxRuntimeExports.jsx(GridRoot, _extends({
        ref,
        as: component,
        ownerState,
        className: clsx(classes.root, className)
      }, other, {
        children: React__namespace.Children.map(children, (child) => {
          if (/* @__PURE__ */ React__namespace.isValidElement(child) && isMuiElement(child, ["Grid"])) {
            var _child$props$unstable;
            return /* @__PURE__ */ React__namespace.cloneElement(child, {
              unstable_level: (_child$props$unstable = child.props.unstable_level) != null ? _child$props$unstable : level + 1
            });
          }
          return child;
        })
      }));
      if (disableEqualOverflow !== void 0 && disableEqualOverflow !== (overflow2 != null ? overflow2 : false)) {
        result = /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowContext.Provider, {
          value: disableEqualOverflow,
          children: result
        });
      }
      return result;
    });
    process.env.NODE_ENV !== "production" ? Grid2.propTypes = {
      children: PropTypes.node,
      className: PropTypes.string,
      columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),
      columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      component: PropTypes.elementType,
      container: PropTypes.bool,
      direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
      disableEqualOverflow: PropTypes.bool,
      lg: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      lgOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      md: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      mdOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      sm: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      smOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      wrap: PropTypes.oneOf(["nowrap", "wrap-reverse", "wrap"]),
      xl: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      xlOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      xs: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      xsOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number])
    } : void 0;
    Grid2.muiName = "Grid";
    return Grid2;
  }
  "use client";
  const Grid = createGrid();
  process.env.NODE_ENV !== "production" ? Grid.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The number of columns.
     * @default 12
     */
    columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),
    /**
     * Defines the horizontal space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * If `true`, the component will have the flex *container* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    container: PropTypes.bool,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'row'
     */
    direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
    /**
     * If `true`, the negative margin and padding are apply only to the top and left sides of the grid.
     */
    disableEqualOverflow: PropTypes.bool,
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     * @default false
     */
    lg: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     */
    lgOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     * @default false
     */
    md: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     */
    mdOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * Defines the vertical space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     * @default false
     */
    sm: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     */
    smOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * Defines the space between the type `item` components.
     * It can only be used on a type `container` component.
     * @default 0
     */
    spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * @ignore
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @internal
     * The level of the grid starts from `0`
     * and increases when the grid nests inside another grid regardless of container or item.
     *
     * ```js
     * <Grid> // level 0
     *   <Grid> // level 1
     *     <Grid> // level 2
     *   <Grid> // level 1
     * ```
     *
     * Only consecutive grid is considered nesting.
     * A grid container will start at `0` if there are non-Grid element above it.
     *
     * ```js
     * <Grid> // level 0
     *   <div>
     *     <Grid> // level 0
     *       <Grid> // level 1
     * ```
     */
    unstable_level: PropTypes.number,
    /**
     * Defines the `flex-wrap` style property.
     * It's applied for all screen sizes.
     * @default 'wrap'
     */
    wrap: PropTypes.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     * @default false
     */
    xl: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     */
    xlOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for all the screen sizes with the lowest priority.
     * @default false
     */
    xs: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `xs` breakpoint and wider screens if not overridden.
     */
    xsOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number])
  } : void 0;
  function getGridUtilityClass(slot) {
    return generateUtilityClass("MuiGrid", slot);
  }
  const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  const DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  const WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  const GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  const gridClasses = generateUtilityClasses("MuiGrid", [
    "root",
    "container",
    "item",
    // spacings
    ...SPACINGS.map((spacing2) => `spacing-xs-${spacing2}`),
    // direction values
    ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
    // wrap values
    ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES.map((size2) => `grid-xs-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-sm-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-md-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-lg-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-xl-${size2}`)
  ]);
  "use client";
  const _excluded$12 = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
  const defaultTheme$3 = createTheme$1();
  const defaultCreateStyledComponent = styled$1("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  });
  function useThemePropsDefault(props) {
    return useThemeProps$1({
      props,
      name: "MuiStack",
      defaultTheme: defaultTheme$3
    });
  }
  function joinChildren(children, separator) {
    const childrenArray = React__namespace.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index2) => {
      output.push(child);
      if (index2 < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React__namespace.cloneElement(separator, {
          key: `separator-${index2}`
        }));
      }
      return output;
    }, []);
  }
  const getSideFromDirection = (direction) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction];
  };
  const style = ({
    ownerState,
    theme
  }) => {
    let styles2 = _extends({
      display: "flex",
      flexDirection: "column"
    }, handleBreakpoints({
      theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    })));
    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme);
      const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index2, breakpoints2) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index2 > 0 ? directionValues[breakpoints2[index2 - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        if (ownerState.useFlexGap) {
          return {
            gap: getValue(transformer, propValue)
          };
        }
        return {
          // The useFlexGap={false} implement relies on each child to give up control of the margin.
          // We need to reset the margin to avoid double spacing.
          "& > :not(style):not(style)": {
            margin: 0
          },
          "& > :not(style) ~ :not(style)": {
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };
      styles2 = deepmerge(styles2, handleBreakpoints({
        theme
      }, spacingValues, styleFromPropValue));
    }
    styles2 = mergeBreakpointsInOrder(theme.breakpoints, styles2);
    return styles2;
  };
  function createStack(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent,
      useThemeProps: useThemeProps2 = useThemePropsDefault,
      componentName = "MuiStack"
    } = options;
    const useUtilityClasses2 = () => {
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
    };
    const StackRoot = createStyledComponent(style);
    const Stack2 = /* @__PURE__ */ React__namespace.forwardRef(function Grid2(inProps, ref) {
      const themeProps = useThemeProps2(inProps);
      const props = extendSxProp(themeProps);
      const {
        component = "div",
        direction = "column",
        spacing: spacing2 = 0,
        divider,
        children,
        className,
        useFlexGap = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$12);
      const ownerState = {
        direction,
        spacing: spacing2,
        useFlexGap
      };
      const classes = useUtilityClasses2();
      return /* @__PURE__ */ jsxRuntimeExports.jsx(StackRoot, _extends({
        as: component,
        ownerState,
        ref,
        className: clsx(classes.root, className)
      }, other, {
        children: divider ? joinChildren(children, divider) : children
      }));
    });
    process.env.NODE_ENV !== "production" ? Stack2.propTypes = {
      children: PropTypes.node,
      direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
      divider: PropTypes.node,
      spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } : void 0;
    return Stack2;
  }
  "use client";
  const Stack = createStack();
  process.env.NODE_ENV !== "production" ? Stack.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
    /**
     * Add an element between each child.
     */
    divider: PropTypes.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
     *
     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
     *
     * To enable this flag globally, follow the theme's default props configuration.
     * @default false
     */
    useFlexGap: PropTypes.bool
  } : void 0;
  function getStackUtilityClass(slot) {
    return generateUtilityClass("MuiStack", slot);
  }
  const stackClasses = generateUtilityClasses("MuiStack", ["root"]);
  "use client";
  "use client";
  function experimental_sx$1() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : formatMuiErrorMessage(20));
  }
  function createMixins(breakpoints2, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints2.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints2.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }
  const common = {
    black: "#000",
    white: "#fff"
  };
  const grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  const purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  const red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  const orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  const blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  const lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  const green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  const _excluded$11 = ["mode", "contrastThreshold", "tonalOffset"];
  const light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common.white,
      default: common.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  const dark = {
    text: {
      primary: common.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue[200],
        light: blue[50],
        dark: blue[400]
      };
    }
    return {
      main: blue[700],
      light: blue[400],
      dark: blue[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple[200],
        light: purple[50],
        dark: purple[400]
      };
    }
    return {
      main: purple[500],
      light: purple[300],
      dark: purple[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red[500],
        light: red[300],
        dark: red[700]
      };
    }
    return {
      main: red[700],
      light: red[400],
      dark: red[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue[400],
        light: lightBlue[300],
        dark: lightBlue[700]
      };
    }
    return {
      main: lightBlue[700],
      light: lightBlue[500],
      dark: lightBlue[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green[400],
        light: green[300],
        dark: green[700]
      };
    }
    return {
      main: green[800],
      light: green[500],
      dark: green[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange[400],
        light: orange[300],
        dark: orange[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange[500],
      dark: orange[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette2, other = _objectWithoutPropertiesLoose(palette2, _excluded$11);
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (process.env.NODE_ENV !== "production") {
        const contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes2 = {
      dark,
      light
    };
    if (process.env.NODE_ENV !== "production") {
      if (!modes2[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = deepmerge(_extends({
      // A collection of common colors.
      common: _extends({}, common),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes2[mode]), other);
    return paletteOutput;
  }
  const _excluded$10 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round$2(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  const caseAllCaps = {
    textTransform: "uppercase"
  };
  const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography2) {
    const _ref = typeof typography2 === "function" ? typography2(palette2) : typography2, {
      fontFamily: fontFamily2 = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize: fontSize2 = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded$10);
    if (process.env.NODE_ENV !== "production") {
      if (typeof fontSize2 !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize2 / 14;
    const pxToRem = pxToRem2 || ((size2) => `${size2 / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight2, size2, lineHeight2, letterSpacing2, casing) => _extends({
      fontFamily: fontFamily2,
      fontWeight: fontWeight2,
      fontSize: pxToRem(size2),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight: lineHeight2
    }, fontFamily2 === defaultFontFamily ? {
      letterSpacing: `${round$2(letterSpacing2 / size2)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily: fontFamily2,
      fontSize: fontSize2,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
      // No need to clone deep
    });
  }
  const shadowKeyUmbraOpacity = 0.2;
  const shadowKeyPenumbraOpacity = 0.14;
  const shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  const shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  const _excluded$$ = ["duration", "easing", "delay"];
  const easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * __pow(constant, 0.25) + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded$$);
      if (process.env.NODE_ENV !== "production") {
        const isString = (value) => typeof value === "string";
        const isNumber2 = (value) => !isNaN(parseFloat(value));
        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }
  const zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  const _excluded$_ = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded$_);
    if (options.vars) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : formatMuiErrorMessage(18));
    }
    const palette2 = createPalette(paletteInput);
    const systemTheme = createTheme$1(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette2,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex)
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    if (process.env.NODE_ENV !== "production") {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (process.env.NODE_ENV !== "production") {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  let warnedOnce$1 = false;
  function createMuiTheme(...args) {
    if (process.env.NODE_ENV !== "production") {
      if (!warnedOnce$1) {
        warnedOnce$1 = true;
        console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
      }
    }
    return createTheme(...args);
  }
  "use client";
  const defaultTheme$2 = createTheme();
  const THEME_ID = "$$material";
  "use client";
  const rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
  const slotShouldForwardProp = shouldForwardProp;
  const styled = createStyled({
    themeId: THEME_ID,
    defaultTheme: defaultTheme$2,
    rootShouldForwardProp
  });
  "use client";
  function useThemeProps({
    props,
    name
  }) {
    return useThemeProps$1({
      props,
      name,
      defaultTheme: defaultTheme$2,
      themeId: THEME_ID
    });
  }
  const getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * __pow(elevation, 2);
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  "use client";
  function useTheme() {
    const theme = useTheme$2(defaultTheme$2);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useDebugValue(theme);
    }
    return theme[THEME_ID] || theme;
  }
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  const paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
  "use client";
  const _excluded$Z = ["className", "component", "elevation", "square", "variant"];
  const useUtilityClasses$M = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  const PaperRoot = styled("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], !ownerState.square && styles2.rounded, ownerState.variant === "elevation" && styles2[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  const Paper = /* @__PURE__ */ React__namespace.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$Z);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses$M(ownerState);
    if (process.env.NODE_ENV !== "production") {
      const theme = useTheme();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx(classes.root, className),
      ref
    }, other));
  });
  process.env.NODE_ENV !== "production" ? Paper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["elevation", "outlined"]), PropTypes.string])
  } : void 0;
  "use client";
  function getAppBarUtilityClass(slot) {
    return generateUtilityClass("MuiAppBar", slot);
  }
  const appBarClasses = generateUtilityClasses("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]);
  "use client";
  const _excluded$Y = ["className", "color", "enableColorOnDark", "position"];
  const useUtilityClasses$L = (ownerState) => {
    const {
      color: color2,
      position: position2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`, `position${capitalize(position2)}`]
    };
    return composeClasses(slots, getAppBarUtilityClass, classes);
  };
  const joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
  const AppBarRoot = styled(Paper, {
    name: "MuiAppBar",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`position${capitalize(ownerState.position)}`], styles2[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const backgroundColorDefault = theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extends({
      display: "flex",
      flexDirection: "column",
      width: "100%",
      boxSizing: "border-box",
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      flexShrink: 0
    }, ownerState.position === "fixed" && {
      position: "fixed",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        // Prevent the app bar to be visible on each printed page.
        position: "absolute"
      }
    }, ownerState.position === "absolute" && {
      position: "absolute",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "sticky" && {
      // ⚠️ sticky is not supported by IE11.
      position: "sticky",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "static" && {
      position: "static"
    }, ownerState.position === "relative" && {
      position: "relative"
    }, !theme.vars && _extends({}, ownerState.color === "default" && {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, theme.palette.mode === "dark" && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === "transparent" && _extends({
      backgroundColor: "transparent",
      color: "inherit"
    }, theme.palette.mode === "dark" && {
      backgroundImage: "none"
    })), theme.vars && _extends({}, ownerState.color === "default" && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
    }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
    }, {
      backgroundColor: "var(--AppBar-background)",
      color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
    }, ownerState.color === "transparent" && {
      backgroundImage: "none",
      backgroundColor: "transparent",
      color: "inherit"
    }));
  });
  const AppBar = /* @__PURE__ */ React__namespace.forwardRef(function AppBar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAppBar"
    });
    const {
      className,
      color: color2 = "primary",
      enableColorOnDark = false,
      position: position2 = "fixed"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$Y);
    const ownerState = _extends({}, props, {
      color: color2,
      position: position2,
      enableColorOnDark
    });
    const classes = useUtilityClasses$L(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(AppBarRoot, _extends({
      square: true,
      component: "header",
      ownerState,
      elevation: 4,
      className: clsx(classes.root, className, position2 === "fixed" && "mui-fixed"),
      ref
    }, other));
  });
  process.env.NODE_ENV !== "production" ? AppBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * If true, the `color` prop is applied in dark mode.
     * @default false
     */
    enableColorOnDark: PropTypes.bool,
    /**
     * The positioning type. The behavior of the different options is described
     * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
     * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
     * @default 'fixed'
     */
    position: PropTypes.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  function getToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiToolbar", slot);
  }
  const toolbarClasses = generateUtilityClasses("MuiToolbar", ["root", "gutters", "regular", "dense"]);
  "use client";
  const _excluded$X = ["className", "component", "disableGutters", "variant"];
  const useUtilityClasses$K = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return composeClasses(slots, getToolbarUtilityClass, classes);
  };
  const ToolbarRoot = styled("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.disableGutters && styles2.gutters, styles2[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up("sm")]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === "regular" && theme.mixins.toolbar);
  const Toolbar = /* @__PURE__ */ React__namespace.forwardRef(function Toolbar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$X);
    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      variant
    });
    const classes = useUtilityClasses$K(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  process.env.NODE_ENV !== "production" ? Toolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
     * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, disables gutter padding.
     * @default false
     */
    disableGutters: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'regular'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["dense", "regular"]), PropTypes.string])
  } : void 0;
  "use client";
  const CMPNAME$7 = "BasicAccountTool";
  console.log(CMPNAME$7, "1");
  const { Exact: Exact$2 } = gubu_minExports.Gubu;
  const BasicAccountToolSpecShape = gubu_minExports.Gubu({
    name: String,
    active: Boolean,
    kind: String,
    align: Exact$2("left", "right"),
    attr: {},
    sx: {},
    style: {}
  }, { prefix: CMPNAME$7 });
  function BasicAccountTool(props) {
    var _a;
    const { ctx, spec } = props;
    const { seneca } = ctx();
    const basicAccountToolSpec = BasicAccountToolSpecShape(spec);
    const auth = reactRedux.useSelector((state) => state.main.auth);
    const [anchorEl, setAnchorEl] = React.useState(null);
    const open = Boolean(anchorEl);
    const handleClick = (event) => {
      setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
      setAnchorEl(null);
    };
    const handleSignOut = () => seneca.act("aim:req,on:auth,signout:user", () => {
      document.location = "/";
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        material.Button,
        {
          id: "basic-button",
          "aria-controls": open ? "basic-menu" : void 0,
          "aria-haspopup": "true",
          "aria-expanded": open ? "true" : void 0,
          onClick: handleClick,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            material.Avatar,
            __spreadValues({}, stringAvatar((_a = auth.user) == null ? void 0 : _a.email))
          )
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        material.Menu,
        {
          id: "basic-menu",
          anchorEl,
          open,
          onClose: handleClose,
          MenuListProps: {
            "aria-labelledby": "basic-button"
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.MenuItem, { onClick: handleSignOut, children: "Sign out" })
        }
      )
    ] });
  }
  function stringToColor(string) {
    let hash2 = 0;
    let i;
    for (i = 0; i < string.length; i += 1) {
      hash2 = string.charCodeAt(i) + ((hash2 << 5) - hash2);
    }
    let color2 = "#";
    for (i = 0; i < 3; i += 1) {
      const value = hash2 >> i * 8 & 255;
      color2 += `00${value.toString(16)}`.slice(-2);
    }
    return color2;
  }
  function stringAvatar(s) {
    s = null == s ? "" : s;
    s = s.toUpperCase().split("@")[0] || "";
    let parts = s.split(/[-\s_.]+/);
    parts[1] = (parts[1] || "")[0] || (parts[0] || "")[1] || "-";
    parts[0] = (parts[0] || "")[0] || "-";
    return {
      sx: {
        bgcolor: stringToColor(s)
      },
      children: `${parts.join("")}`
    };
  }
  const CMPNAME$6 = "BasicHeadTool";
  console.log(CMPNAME$6, "1");
  const { Exact: Exact$1 } = gubu_minExports.Gubu;
  const BasicHeadToolSpecShape = gubu_minExports.Gubu({
    name: String,
    active: Boolean,
    kind: String,
    align: Exact$1("left", "right"),
    attr: {},
    sx: {},
    style: {}
  }, { prefix: CMPNAME$6 });
  function BasicHeadTool(props) {
    const { ctx, spec } = props;
    const { seneca } = ctx();
    const basicHeadToolSpec = BasicHeadToolSpecShape(spec);
    const mode = reactRedux.useSelector((state) => state.main.nav.mode);
    const { name, kind, attr, sx, style: style2 } = basicHeadToolSpec;
    let tool = /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    if ("" === kind) {
      console.warn(CMPNAME$6, "empty-tool-kind", basicHeadToolSpec);
    } else if ("logo" === kind) {
      tool = /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          style: {
            // TODO: should come from same source as BasicSide width
            width: "calc(var(--vxg-side-width) - 24px)",
            display: "flex",
            justifyContent: "space-between"
          },
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                href: "/",
                style: style2,
                className: `vxg-${CMPNAME$6}-logo`,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: attr.img })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              material.IconButton,
              {
                size: "large",
                color: "inherit",
                onClick: () => seneca.act("aim:app,area:nav,set:mode", {
                  mode: "shown" === mode ? "hidden" : "shown"
                }),
                children: "shown" === mode ? /* @__PURE__ */ jsxRuntimeExports.jsx(iconsMaterial.ChevronLeft, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(iconsMaterial.ChevronRight, {})
              }
            )
          ]
        }
      );
    } else if ("add" === kind) {
      tool = /* @__PURE__ */ jsxRuntimeExports.jsx(
        material.Button,
        {
          color: "inherit",
          onClick: () => seneca.act("aim:app,part:head,tool:add,on:click"),
          children: "Add"
        }
      );
    } else if ("search" === kind) {
      tool = /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "SEARCH" });
    } else if ("account" === kind) {
      tool = /* @__PURE__ */ jsxRuntimeExports.jsx(BasicAccountTool, { ctx, spec });
    } else {
      console.warn(CMPNAME$6, "unknown-tool-kind", kind, basicHeadToolSpec);
    }
    return tool;
  }
  const CMPNAME$5 = "BasicHead";
  console.log(CMPNAME$5, "1");
  const { Child: Child$3, Exact, Open: Open$2, Required: Required$1 } = gubu_minExports.Gubu;
  const BasicHeadSpecShape = gubu_minExports.Gubu({
    head: {
      name: String,
      active: Boolean,
      tool: Child$3(Open$2({
        align: Exact("left", "right")
      }))
    },
    tool: Required$1({}),
    // Set MUI component props directly 
    mui: {
      AppBar: {},
      ToolBar: {}
    }
  }, { prefix: CMPNAME$5 });
  function BasicHead(props) {
    const { ctx, spec } = props;
    const { seneca } = ctx();
    const { vmap: vmap2 } = seneca.context;
    const basicHeadSpec = BasicHeadSpecShape(spec);
    const { head } = basicHeadSpec;
    const tools = vmap2(head.tool, {
      active: vmap2.FILTER,
      name: vmap2.FILTER((_2, p) => {
        var _a;
        return [(_a = basicHeadSpec.tool[p.key]) == null ? void 0 : _a.active, p.key];
      }),
      align: vmap2.COPY
    }).map((t) => __spreadValues(__spreadValues({}, basicHeadSpec.tool[t.name]), t));
    const leftTools = tools.filter((t) => "left" === t.align);
    const rightTools = tools.filter((t) => "right" === t.align);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      AppBar,
      __spreadProps(__spreadValues({
        className: "vxg-BasicHead"
      }, spec.mui.AppBar), {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Toolbar, __spreadProps(__spreadValues({ className: "vxg-BasicHead-toolbar" }, spec.mui.ToolBar), { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: "vxg-BasicHead-toolbar vxg-BasicHead-toolbar-left",
              children: leftTools.map((t) => /* @__PURE__ */ jsxRuntimeExports.jsx(BasicHeadTool, { ctx, spec: t }, t.name))
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: "vxg-BasicHead-toolbar vxg-BasicHead-toolbar-right",
              style: { marginLeft: "auto" },
              children: rightTools.map((t) => /* @__PURE__ */ jsxRuntimeExports.jsx(BasicHeadTool, { ctx, spec: t }, t.name))
            }
          )
        ] }))
      })
    );
  }
  function BasicList(props) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { className: "vxg-BasicList", children: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { children: "BasicList" }) });
  }
  const filter = material.createFilterOptions();
  function BasicEdit(props) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { className: "vxg-BasicEdit", children: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { children: "BasicEdit" }) });
  }
  const CMPNAME$4 = "BasicLoading";
  console.log(CMPNAME$4, "1");
  const BasicLoadingSpecShape = gubu_minExports.Gubu({}, { prefix: CMPNAME$4 });
  function BasicLoading(props) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Loading..." }) });
  }
  const CMPNAME$3 = "BasicLed";
  console.log(CMPNAME$3, "1");
  const { Skip } = gubu_minExports.Gubu;
  const BasicLedSpecShape = gubu_minExports.Gubu({
    /*
    title: String,
    name: String,
    paramId: Skip(String),
    content: {
      cmp: Skip(String),
      def: {
        canon: String,
        add: Skip({
          active: Boolean
        }),
        subview: {},
        id: Skip({
          field: String
        }),
        field: {},
        columnVisibility: Skip({})
      }
    }
    */
  }, { prefix: CMPNAME$3 });
  function BasicLed(props) {
    const { ctx, spec } = props;
    const { seneca, model } = ctx();
    const basicLedSpec = BasicLedSpecShape(spec);
    console.log(CMPNAME$3, basicLedSpec);
    const name = basicLedSpec.name;
    const canon = basicLedSpec.spec.ent;
    const led = reactRedux.useSelector((state) => state.main.view[name]);
    const ready = true === led.ready;
    const show = led.show;
    if (!ready) {
      console.log(CMPNAME$3, "ready", ready);
      const ledplugin = function() {
        this.fix({ view: name }).add(
          "aim:app,on:view,init:state,redux$:true",
          function(_msg, _reply, meta) {
            let view = meta.custom.state().view[name];
            view.show = {
              list: true,
              edit: false
            };
            view.status = "init";
            view.ready = true;
          }
        ).add(
          "aim:app,on:view,edit:start,redux$:true",
          { item_id: String },
          function(_msg, _reply, meta) {
            let view = meta.custom.state().view[name];
            view.show.list = false;
            view.show.edit = true;
            view.status = "load-item";
          }
        ).message(
          "aim:app,on:view,edit:item",
          { item_id: String },
          function(msg) {
            return __async(this, null, function* () {
              this.act("aim:app,on:view,view:track,edit:start,direct$:true", { item_id: msg.item_id });
              return yield this.entity(canon).load$({
                id: msg.item_id,
                slot$: "track"
              });
            });
          }
        );
        this.prepare(function() {
          return __async(this, null, function* () {
            this.act("aim:app,on:view,init:state,direct$:true", { view: name });
          });
        });
      };
      Object.defineProperty(ledplugin, "name", { value: "VxgBasicLed_" + name });
      seneca.use(ledplugin);
    }
    return ready ? /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Box, { className: "vxg-BasicLed", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("b", { children: "BasicLed" }),
      show.list ? /* @__PURE__ */ jsxRuntimeExports.jsx(BasicList, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
      show.edit ? /* @__PURE__ */ jsxRuntimeExports.jsx(BasicEdit, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(BasicLoading, {});
  }
  const CMPNAME$2 = "BasicSide";
  console.log(CMPNAME$2, "1");
  const { Child: Child$2, Open: Open$1 } = gubu_minExports.Gubu;
  const BasicMainSpecShape = gubu_minExports.Gubu({
    main: {
      name: String,
      active: Boolean,
      view: {
        default: String
      }
    },
    view: Child$2(Open$1({
      kind: String
    })),
    mui: {
      Box: {},
      Container: {}
    }
  });
  function BasicMain(props) {
    const { ctx, spec } = props;
    const { seneca, cmp } = ctx();
    const basicMainSpec = BasicMainSpecShape(spec);
    const mode = reactRedux.useSelector((state) => state.main.nav.mode);
    const viewName = reactRedux.useSelector((state) => state.main.current.view);
    const params = reactRouterDom.useParams();
    if (viewName !== params.view) {
      seneca.act("aim:app,set:view", { view: params.view });
    }
    const viewSpec = basicMainSpec.view[viewName];
    const kind = viewSpec == null ? void 0 : viewSpec.kind;
    const View = "custom" === kind ? cmp[viewSpec.cmp] : "led" === kind ? BasicLed : () => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "LOADING" });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      material.Box,
      __spreadProps(__spreadValues({
        className: "vxg-BasicMain"
      }, basicMainSpec.mui.Box), {
        sx: (theme) => ({
          // TODO: should use actual toolbar height; 16 should be from standard spacing
          marginTop: theme.mixins.toolbar.minHeight + 38 + "px",
          marginLeft: "shown" === mode ? "var(--vxg-side-width)" : 0,
          marginBottom: 0,
          marginRight: 0
        }),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          material.Container,
          __spreadProps(__spreadValues({}, basicMainSpec.mui.Container), {
            children: View && /* @__PURE__ */ jsxRuntimeExports.jsx(View, { ctx, spec: viewSpec })
          })
        )
      })
    );
  }
  var ChevronLeft = {};
  var interopRequireDefault$2 = { exports: {} };
  var interopRequireDefault = interopRequireDefault$2.exports;
  (function(module2) {
    function _interopRequireDefault2(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  })(interopRequireDefault$2);
  var interopRequireDefaultExports = interopRequireDefault$2.exports;
  const interopRequireDefault$1 = /* @__PURE__ */ getDefaultExportFromCjs(interopRequireDefaultExports);
  var createSvgIcon$1 = {};
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  const svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
  "use client";
  const _excluded$W = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  const useUtilityClasses$J = (ownerState) => {
    const {
      color: color2,
      fontSize: fontSize2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize(color2)}`, `fontSize${capitalize(fontSize2)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  const SvgIconRoot = styled("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.color !== "inherit" && styles2[`color${capitalize(ownerState.color)}`], styles2[`fontSize${capitalize(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      // the <svg> will define the property that has `currentColor`
      // e.g. heroicons uses fill="none" and stroke="currentColor"
      fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
        disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  const SvgIcon = /* @__PURE__ */ React__namespace.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize: fontSize2 = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$W);
    const hasSvgAsChild = /* @__PURE__ */ React__namespace.isValidElement(children) && children.type === "svg";
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      fontSize: fontSize2,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox,
      hasSvgAsChild
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses$J(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(SvgIconRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, hasSvgAsChild && children.props, {
      ownerState,
      children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ jsxRuntimeExports.jsx("title", {
        children: titleAccess
      }) : null]
    }));
  });
  process.env.NODE_ENV !== "production" ? SvgIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Node passed into the SVG element.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "large", "medium", "small"]), PropTypes.string]),
    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: PropTypes.string,
    /**
     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
     * prop will be ignored.
     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
     * `component`'s viewBox to the root node.
     * @default false
     */
    inheritViewBox: PropTypes.bool,
    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: PropTypes.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: PropTypes.string,
    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: PropTypes.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  "use client";
  "use client";
  function createSvgIcon(path, displayName) {
    function Component(props, ref) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, _extends({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (process.env.NODE_ENV !== "production") {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = SvgIcon.muiName;
    return /* @__PURE__ */ React__namespace.memo(/* @__PURE__ */ React__namespace.forwardRef(Component));
  }
  "use client";
  "use client";
  "use client";
  "use client";
  "use client";
  "use client";
  "use client";
  const unstable_ClassNameGenerator = {
    configure: (generator) => {
      if (process.env.NODE_ENV !== "production") {
        console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
      }
      ClassNameGenerator.configure(generator);
    }
  };
  const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    capitalize,
    createChainedFunction,
    createSvgIcon,
    debounce: debounce$1,
    deprecatedPropType,
    isMuiElement,
    ownerDocument,
    ownerWindow,
    requirePropFactory,
    setRef,
    unstable_ClassNameGenerator,
    unstable_useEnhancedEffect: useEnhancedEffect,
    unstable_useId: useId,
    unsupportedProp,
    useControlled,
    useEventCallback,
    useForkRef,
    useIsFocusVisible
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(utils);
  var hasRequiredCreateSvgIcon;
  function requireCreateSvgIcon() {
    if (hasRequiredCreateSvgIcon)
      return createSvgIcon$1;
    hasRequiredCreateSvgIcon = 1;
    (function(exports3) {
      "use strict";
      "use client";
      Object.defineProperty(exports3, "__esModule", {
        value: true
      });
      Object.defineProperty(exports3, "default", {
        enumerable: true,
        get: function() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require$$0;
    })(createSvgIcon$1);
    return createSvgIcon$1;
  }
  "use strict";
  "use client";
  var _interopRequireDefault = interopRequireDefaultExports;
  Object.defineProperty(ChevronLeft, "__esModule", {
    value: true
  });
  var default_1 = ChevronLeft.default = void 0;
  var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
  var _jsxRuntime = requireJsxRuntime();
  var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
    d: "M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"
  }), "ChevronLeft");
  default_1 = ChevronLeft.default = _default;
  const CMPNAME$1 = "BasicSide";
  console.log(CMPNAME$1, "1");
  const { Child: Child$1, Open, Required } = gubu_minExports.Gubu;
  const BasicSideSpecShape = gubu_minExports.Gubu({
    side: {
      name: String,
      active: Boolean
    },
    view: Child$1(Open({
      title: String
    }), Required({})),
    // Set MUI component props directly 
    mui: {
      Drawer: {}
    }
  }, { prefix: CMPNAME$1 });
  function BasicSide(props) {
    const { spec, ctx } = props;
    const basicSideSpec = BasicSideSpecShape(spec);
    const navigate = reactRouterDom.useNavigate();
    const nav = reactRedux.useSelector((state) => state.main.nav);
    const viewMap = basicSideSpec.view;
    const mode = nav.mode;
    const sections = vmap(nav.section, {
      active: vmap.FILTER,
      name: vmap.COPY,
      items: (_2, p) => vmap(p.self.item, {
        active: vmap.FILTER,
        name: vmap.COPY,
        view: vmap.COPY,
        title: vmap.FILTER((_22, p2) => {
          var _a;
          return (_a = viewMap[p2.self.view]) == null ? void 0 : _a.title;
        })
      })
    });
    const selectView = React.useCallback((view) => navigate("/view/" + view), []);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      material.Drawer,
      __spreadProps(__spreadValues({
        variant: "persistent",
        anchor: "left",
        open: "shown" === mode,
        className: "vxg-BasicSide",
        sx: (theme) => ({
          "& .MuiDrawer-paper": {
            // TODO: should use actual toolbar height; 16 should be from standard spacing
            paddingTop: theme.mixins.toolbar.minHeight + 16 + "px",
            width: "var(--vxg-side-width)"
          }
        })
      }, spec.mui.Drawer), {
        children: sections.map(
          (section) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              material.List,
              {
                className: "vxg-BasicSide-section",
                "data-vxg-basicside-section": section.name,
                children: section.items.map(
                  (item) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                    material.ListItem,
                    {
                      disablePadding: true,
                      className: "vxg-BasicSide-section-item",
                      "data-vxg-basicside-section-item": item.name,
                      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        material.ListItemButton,
                        {
                          onClick: () => selectView(item.view),
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(material.ListItemIcon, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(default_1, {}) }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(material.ListItemText, { primary: item.title })
                          ]
                        }
                      )
                    },
                    item.name
                  )
                )
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(material.Divider, {})
          ] }, section.name)
        )
      })
    );
  }
  const CMPNAME = "BasicAdmin";
  console.log("BasicAdmin 1");
  const { Child } = gubu_minExports.Gubu;
  const BasicAdminSpecShape = gubu_minExports.Gubu({
    frame: {
      name: String,
      kind: String,
      part: {},
      view: {},
      nav: {},
      tool: {}
    }
  }, { prefix: CMPNAME });
  function Loading() {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Container, { children: "LOADING" });
  }
  function BasicAdmin(props) {
    const { ctx, spec } = props;
    const { seneca, model } = ctx();
    const [ready, setReady] = React.useState("init");
    React.useEffect(() => {
      if ("init" !== ready) {
        return;
      }
      init(seneca, () => {
        console.log("BasicAdmin init done");
        setReady("done");
      });
    }, []);
    const basicAdminSpec = BasicAdminSpecShape(spec);
    const { head, side, main: main2, foot } = basicAdminSpec.frame.part;
    const headSpec = {
      head,
      tool: model.app.web.frame.private.tool,
      mui: {
        // TODO: set in theme: https://mui.com/material-ui/customization/z-index/
        AppBar: { style: { zIndex: 4e3 } }
      }
    };
    const sideSpec = {
      side,
      view: model.app.web.frame.private.view,
      mui: {
        Drawer: { style: { zIndex: 3e3 } }
      }
    };
    const mainSpec = {
      main: main2,
      view: model.app.web.frame.private.view,
      mui: {
        Container: { style: { zIndex: 1e3 } }
      }
    };
    return "done" === ready ? /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Box, { className: "vxg-BasicAdmin", children: [
      (head == null ? void 0 : head.active) && /* @__PURE__ */ jsxRuntimeExports.jsx(BasicHead, { ctx, spec: headSpec }),
      (side == null ? void 0 : side.active) && /* @__PURE__ */ jsxRuntimeExports.jsx(BasicSide, { ctx, spec: sideSpec }),
      (main2 == null ? void 0 : main2.active) && /* @__PURE__ */ jsxRuntimeExports.jsx(BasicMain, { ctx, spec: mainSpec })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Loading, {});
  }
  function init(seneca, done) {
    return __async(this, null, function* () {
      console.log("BasicAdmin init");
      seneca.context.vxg = seneca.context.vxg || {};
      seneca.context.vxg.BasicAdmin = seneca.context.vxg.BasicAdmin || {};
      if (!seneca.context.vxg.BasicAdmin.preparing) {
        seneca.context.vxg.BasicAdmin.preparing = true;
        seneca.use(SenecaEntity).use(S).use(VxgSeneca);
        yield seneca.ready(done);
      }
    });
  }
  const BasicFootSpecShape = gubu_minExports.Gubu({
    foot: {
      title: ""
    },
    view: {}
  });
  function BasicFoot(props) {
    const { vxg, ctx } = props;
    const basicFootSpec = BasicFootSpecShape(props.spec);
    const part = basicFootSpec.foot;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      material.Box,
      {
        sx: {
          width: "100%",
          height: "auto",
          paddingTop: "0.5rem",
          paddingBottom: "0.5rem",
          borderTop: "1px solid #CCC"
        },
        className: "BasicFoot",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Container, { maxWidth: "lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { container: true, direction: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { item: true, xs: 12, sx: { textAlign: "right" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { color: "#CCC", variant: "body2", children: part.title }) }) }) })
      }
    );
  }
  var patrun_min$1 = { exports: {} };
  var patrun_min = patrun_min$1.exports;
  (function(module2, exports3) {
    !function(e) {
      if (true)
        module2.exports = e();
      else if (false)
        (void 0)([], e);
      else {
        ("undefined" != typeof window ? window : "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : this).Patrun = e();
      }
    }(function() {
      var e = { exports: {} };
      (function(t2) {
        (function() {
          !function(n2) {
            "object" == typeof e.exports ? e.exports = n2() : ("undefined" != typeof window ? window : void 0 !== t2 ? t2 : "undefined" != typeof self ? self : this).Gex = n2();
          }(function() {
            var e2 = { exports: {} };
            Object.defineProperty(e2.exports, "__esModule", { value: true }), e2.exports.Gex = void 0;
            class t3 {
              constructor(e3) {
                this.desc = "", this.gexmap = {}, null != e3 && (Array.isArray(e3) ? e3 : [e3]).forEach((e4) => {
                  this.gexmap[e4] = this.re(this.clean(e4));
                });
              }
              dodgy(e3) {
                return null == e3 || Number.isNaN(e3);
              }
              clean(e3) {
                let t4 = "" + e3;
                return this.dodgy(e3) ? "" : t4;
              }
              match(e3) {
                e3 = "" + e3;
                let t4 = false, n3 = Object.keys(this.gexmap);
                for (let r3 = 0; r3 < n3.length && !t4; r3++)
                  t4 = !!this.gexmap[n3[r3]].exec(e3);
                return t4;
              }
              on(e3) {
                if (null == e3)
                  return null;
                let t4 = typeof e3;
                if ("string" === t4 || "number" === t4 || "boolean" === t4 || e3 instanceof Date || e3 instanceof RegExp)
                  return this.match(e3) ? e3 : null;
                if (Array.isArray(e3)) {
                  let t5 = [];
                  for (let n3 = 0; n3 < e3.length; n3++)
                    !this.dodgy(e3[n3]) && this.match(e3[n3]) && t5.push(e3[n3]);
                  return t5;
                }
                {
                  let t5 = {};
                  for (let n3 in e3)
                    Object.prototype.hasOwnProperty.call(e3, n3) && this.match(n3) && (t5[n3] = e3[n3]);
                  return t5;
                }
              }
              esc(e3) {
                let t4 = this.clean(e3);
                return (t4 = t4.replace(/\*/g, "**")).replace(/\?/g, "*?");
              }
              escregexp(e3) {
                return e3 ? ("" + e3).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") : "";
              }
              re(e3) {
                if ("" === e3 || e3)
                  return e3 = "^" + (e3 = (e3 = (e3 = (e3 = (e3 = this.escregexp(e3)).replace(/\\\*/g, "[\\s\\S]*")).replace(/\\\?/g, "[\\s\\S]")).replace(/\[\\s\\S\]\*\[\\s\\S\]\*/g, "\\*")).replace(/\[\\s\\S\]\*\[\\s\\S\]/g, "\\?")) + "$", new RegExp(e3);
                {
                  let e4 = Object.keys(this.gexmap);
                  return 1 == e4.length ? this.gexmap[e4[0]] : __spreadValues({}, this.gexmap);
                }
              }
              toString() {
                let e3 = this.desc;
                return "" != e3 ? e3 : this.desc = "Gex[" + Object.keys(this.gexmap) + "]";
              }
              inspect() {
                return this.toString();
              }
            }
            function n2(e3) {
              return new t3(e3);
            }
            return e2.exports.Gex = n2, e2.exports = n2, e2.exports.Gex = n2, e2.exports.default = n2, e2.exports;
          });
        }).call(this);
      }).call(this, "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}), e = e.exports;
      var t, n, r2, s, i, o, l, u, a, f = {}, p = this && this.__classPrivateFieldGet || function(e2, t2, n2, r3) {
        if ("a" === n2 && !r3)
          throw new TypeError("Private accessor was defined without a getter");
        if ("function" == typeof t2 ? e2 !== t2 || !r3 : !t2.has(e2))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return "m" === n2 ? r3 : "a" === n2 ? r3.call(e2) : r3 ? r3.value : t2.get(e2);
      };
      Object.defineProperty(f, "__esModule", { value: true }), f.IntervalMatcher = f.GexMatcher = void 0, f.GexMatcher = class {
        constructor() {
        }
        make(t2, n2) {
          if ("string" == typeof n2 && n2.match(/[*?]/)) {
            let t3 = (0, e.Gex)(n2);
            return { kind: "gex", match: (e2) => null != t3.on(e2), fix: n2, meta: {}, same(e2) {
              return null != e2 && e2.kind === this.kind && e2.fix === this.fix;
            } };
          }
        }
        scan(e2, t2) {
          let n2 = e2.filter((e3) => "*" === e3.fix).length > 0;
          return { complete: n2, sound: n2, gaps: [], overs: [], why: "no-star" };
        }
      };
      const h = new RegExp(["^/s*", "(=*[<>/(/[]?=*)?/s*([-+0-9a-fA-FeEoOxX]+(/.([0-9a-fA-FeEoOxX]+))?)([/)/]]?)(/s*(,|&+|/|+|/./.)/s*(=*[<>]?=*)/s*([-+.0-9a-fA-FeEoOxX]+)/s*([/)/]]?))?/s*$"].join("").replace(/\//g, "\\"));
      class c {
        constructor() {
          this.kind = "interval", t.set(this, (e2, t2) => function(n2) {
            return e2(n2) && t2(n2);
          }), n.set(this, (e2, t2) => function(n2) {
            return e2(n2) || t2(n2);
          }), r2.set(this, (e2) => function(e3) {
            return false;
          }), s.set(this, (e2) => function(e3) {
            return false;
          }), i.set(this, (e2) => function(t2) {
            return t2 > e2;
          }), o.set(this, (e2) => function(t2) {
            return t2 >= e2;
          }), l.set(this, (e2) => function(t2) {
            return t2 < e2;
          }), u.set(this, (e2) => function(t2) {
            return t2 <= e2;
          }), a.set(this, (e2) => function(t2) {
            return t2 === e2;
          });
        }
        make(e2, f2) {
          if ("string" == typeof f2 && f2.match(/[=<>.[()\]]/)) {
            let e3 = f2.match(h), d2 = { jo: "and", o0: "err", n0: NaN, o1: "err", n1: NaN }, g2 = (e4) => false;
            if (null != e3) {
              let h2 = c.normop(e3[1]) || c.normop(e3[5]), m2 = c.normop(e3[8]) || c.normop(e3[10]), v = p(this, "=" === h2 ? a : "<" === h2 || ")" === h2 ? l : "<=" === h2 || "]" === h2 ? u : ">" === h2 || "(" === h2 ? i : ">=" === h2 || "[" === h2 ? o : s, "f"), x = Number(e3[2]), k = null == e3[9] ? NaN : Number(e3[9]), y2 = e3[7], w = null == y2 ? p(this, n, "f") : "&" === y2.substring(0, 1) || "," === y2.substring(0, 1) ? p(this, t, "f") : p(this, n, "f");
              ".." === y2 && (w = p(this, t, "f"), v = p(this, s, "f") === v ? p(this, o, "f") : v, m2 = "" === m2 ? "<=" : m2);
              let N = p(this, null == m2 ? r2 : "=" === m2 ? a : "<" === m2 || ")" === m2 ? l : "<=" === m2 || "]" === m2 ? u : ">" === m2 ? i : ">=" === m2 ? o : s, "f");
              if (x === k && ("=" === h2 && null != m2 ? (k = NaN, N = p(this, r2, "f"), v = m2.includes("<") ? p(this, u, "f") : m2.includes(">") ? p(this, o, "f") : m2.includes("=") ? p(this, a, "f") : p(this, s, "f")) : "=" === m2 && null != h2 && (k = NaN, N = p(this, r2, "f"), v = h2.includes("<") ? p(this, u, "f") : h2.includes(">") ? p(this, o, "f") : p(this, s, "f"))), p(this, s, "f") !== v && p(this, r2, "f") === N && (p(this, l, "f") === v || p(this, u, "f") === v ? (N = v, k = x, v = p(this, o, "f"), x = Number.NEGATIVE_INFINITY, w = p(this, t, "f")) : p(this, i, "f") !== v && p(this, o, "f") !== v || (N = p(this, u, "f"), k = Number.POSITIVE_INFINITY, w = p(this, t, "f"))), !isNaN(k) && k < x) {
                let e4 = N, t2 = k;
                k = x, x = t2, ".." !== y2 && (N = v, v = e4);
              }
              let b = v(x), O = N(k), j = w(b, O);
              return { kind: "interval", fix: f2, meta: d2 = { jo: j.name, o0: b.name, n0: x, o1: O.name, n1: k }, match: g2 = (e4) => {
                let t2 = false, n2 = parseFloat(e4);
                return isNaN(n2) || (t2 = j(n2)), t2;
              }, same(e4) {
                return null != e4 && e4.kind === this.kind && e4.meta.jo === this.meta.jo && e4.meta.o0 === this.meta.o0 && e4.meta.n0 === this.meta.n0 && e4.meta.o1 === this.meta.o1 && e4.meta.n1 === this.meta.n1;
              } };
            }
          }
        }
        scan(e2, t2) {
          let n2 = { complete: false, sound: false, gaps: [], overs: [], lower: null, upper: null }, r3 = Number.NEGATIVE_INFINITY, s2 = Number.POSITIVE_INFINITY, i2 = this.half_intervals(e2);
          i2.reduce((e3, t3) => {
            let n3 = "eq" === t3.o, s3 = "lt" === t3.o, i3 = "lte" === t3.o, o3 = "gt" === t3.o, l2 = "gte" === t3.o, u2 = t3.n;
            if (null == e3.lower) {
              let s4 = { n: r3, o: "gte" };
              e3.lower = s4, e3.upper = t3, r3 == u2 && l2 || (o3 || l2 ? e3.gaps.push([s4, { n: u2, o: o3 ? "lte" : "lt", m: 0 }]) : n3 && e3.gaps.push([s4, { n: u2, o: "lte", m: 1 }]));
            } else {
              let r4 = "eq" === e3.upper.o, a2 = "lt" === e3.upper.o, f2 = "lte" === e3.upper.o, p2 = (e3.upper.o, e3.upper.o, e3.upper.n), h2 = e3.upper;
              u2 === p2 ? a2 && (l2 || n3) || (f2 || r4) && o3 || (r4 || a2 || f2) && e3.gaps.push([{ n: p2, o: r4 || f2 ? "gt" : "gte", m: 2, d: { u: h2, h: t3 } }, { n: u2, o: n3 || l2 ? "lt" : "lte", m: 3 }]) : p2 < u2 ? s3 || i3 || (r4 || a2 || f2) && e3.gaps.push([{ n: p2, o: r4 || f2 ? "gt" : "gte", m: 4 }, { n: u2, o: n3 || l2 ? "lt" : "lte", m: 5 }]) : e3.overs.push([{ n: u2, o: n3 || l2 ? "gte" : "gt", m: 10 }, { n: p2, o: r4 || f2 ? "lte" : "lt", m: 11 }]), e3.upper = t3;
            }
            return e3;
          }, n2);
          let o2 = 0 < i2.length && i2[i2.length - 1];
          return o2 && s2 !== o2.n && "gt" !== o2.o && "gte" !== o2.o && n2.gaps.push([{ n: o2.n, o: "eq" === o2.o || "lte" === o2.o ? "gt" : "gte", m: 6 }, { n: s2, o: "lte", m: 7 }]), n2.complete = 0 === n2.gaps.length, n2.sound = 0 === n2.overs.length, n2;
        }
        half_intervals(e2) {
          let t2 = [];
          for (let r3 of e2)
            t2.push([{ n: r3.meta.n0, o: r3.meta.o0 }, { n: r3.meta.n1, o: r3.meta.o1 }]);
          var n2 = ["lt", "lte", "eq", "gte", "gt"];
          return t2.map((e3) => [isNaN(e3[0].n) || null == e3[0].n ? null : e3[0], isNaN(e3[1].n) || null == e3[1].n ? null : e3[1]].filter((e4) => null != e4)).sort((e3, t3) => {
            if (e3[0].n < t3[0].n)
              return -1;
            if (t3[0].n < e3[0].n)
              return 1;
            var r3 = n2.indexOf(e3[0].o), s2 = n2.indexOf(t3[0].o);
            if (r3 < s2)
              return -1;
            if (s2 < r3)
              return 1;
            if (e3[1].n < t3[1].n)
              return -1;
            if (t3[1].n < e3[1].n)
              return 1;
            var i2 = n2.indexOf(e3[1].o), o2 = n2.indexOf(t3[1].o);
            return i2 < o2 ? -1 : o2 < i2 ? 1 : 0;
          }).reduce((e3, t3) => e3.concat(...t3), []);
        }
      }
      f.IntervalMatcher = c, t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap(), r2 = /* @__PURE__ */ new WeakMap(), s = /* @__PURE__ */ new WeakMap(), i = /* @__PURE__ */ new WeakMap(), o = /* @__PURE__ */ new WeakMap(), l = /* @__PURE__ */ new WeakMap(), u = /* @__PURE__ */ new WeakMap(), a = /* @__PURE__ */ new WeakMap(), c.normop = (e2) => null == e2 ? null : ((e2.match(/([<>\(\)\[\]])/) || [])[1] || "") + ((e2.match(/(=)/) || [])[1] || "");
      var d = { exports: {} };
      function g(t2) {
        var n2 = {}, r3 = {};
        let s2 = [];
        return (t2 = t2 || {}).gex && s2.push(new f.GexMatcher()), t2.interval && s2.push(new f.IntervalMatcher()), n2.top = function() {
          return r3;
        }, n2.add = function(e2, i2) {
          e2 = __spreadValues({}, e2);
          var o2 = "function" == typeof t2 ? t2.call(n2, e2, i2) : null, l2 = Object.keys(e2).filter((t3) => null != e2[t3]).sort();
          l2.forEach(function(t3) {
            e2[t3] = String(e2[t3]);
          });
          for (var u2, a2 = r3, f2 = 0; f2 < l2.length; f2++) {
            var p2 = l2[f2], h2 = e2[p2];
            let t3 = s2.reduce((e3, t4) => e3 || t4.make(p2, h2), void 0);
            if ((u2 = a2.v) && p2 == a2.k)
              if (t3) {
                var c2 = (g2 = a2.g = a2.g || {})[p2] = g2[p2] || [];
                a2 = (t3 = c2.find((e3) => e3.same(t3)) || (c2.push(t3), t3)).keymap || (t3.keymap = {});
              } else
                a2 = u2[h2] || (u2[h2] = {});
            else if (a2.k)
              if (p2 < a2.k) {
                var d2 = a2.s;
                g2 = a2.g, a2.s = { k: a2.k, v: a2.v }, d2 && (a2.s.s = d2), g2 && (a2.s.g = g2), a2.g && (a2.g = {}), a2.k = p2, a2.v = {}, t3 ? (c2 = (g2 = a2.g = a2.g || {})[p2] = g2[p2] || [], a2 = (t3 = c2.find((e3) => e3.same(t3)) || (c2.push(t3), t3)).keymap || (t3.keymap = {})) : a2 = a2.v[h2] = {};
              } else
                a2 = a2.s || (a2.s = {}), f2--;
            else if (a2.k = p2, a2.v = {}, t3) {
              var g2;
              c2 = (g2 = a2.g = a2.g || {})[p2] = g2[p2] || [];
              a2 = (t3 = c2.find((e3) => e3.same(t3)) || (c2.push(t3), t3)).keymap || (t3.keymap = {});
            } else
              a2 = a2.v[h2] = {};
          }
          return void 0 !== i2 && a2 && (a2.d = i2, o2 && (a2.f = "function" == typeof o2 ? o2 : o2.find, a2.r = "function" == typeof o2.remove ? o2.remove : void 0)), n2;
        }, n2.findexact = function(e2) {
          return n2.find(e2, true);
        }, n2.find = function(e2, t3, s3) {
          if (null == e2)
            return null;
          var i2 = r3, o2 = void 0 === r3.d ? null : r3.d, l2 = r3.f, u2 = null, a2 = [], f2 = {}, p2 = Object.keys(e2).length, h2 = [];
          void 0 !== r3.d && h2.push(r3.d);
          do {
            if (u2 = i2.k, i2.v) {
              var c2 = e2[u2], d2 = i2.v[c2];
              if (!d2 && i2.g && i2.g[u2]) {
                for (var g2 = i2.g[u2], m2 = 0; m2 < g2.length; m2++)
                  if (g2[m2].match(c2)) {
                    d2 = g2[m2].keymap;
                    break;
                  }
              }
              d2 ? (f2[u2] = true, i2.s && a2.push(i2.s), o2 = void 0 === d2.d ? t3 ? null : o2 : d2.d, s3 && void 0 !== d2.d && h2.push(d2.d), l2 = d2.f, i2 = d2) : i2 = i2.s;
            } else
              i2 = null;
            null == i2 && 0 < a2.length && (null == o2 || s3 && !t3) && (i2 = a2.pop());
          } while (i2);
          return t3 ? Object.keys(f2).length !== p2 && (o2 = null) : null == o2 && void 0 !== r3.d && (o2 = r3.d), l2 && (o2 = l2.call(n2, e2, o2)), s3 ? h2 : o2;
        }, n2.remove = function(e2) {
          var t3, n3 = r3, s3 = null, i2 = [];
          do {
            if (t3 = n3.k, n3.v || n3.g) {
              if (n3.v) {
                var o2 = n3.v[e2[t3]];
                o2 && i2.push({ km: n3, v: e2[t3] });
              }
              if (null == o2 && n3.g) {
                let r4 = n3.g[t3] || [];
                for (let s4 = 0; s4 < r4.length; s4++)
                  if (r4[s4].fix === e2[t3]) {
                    i2.push({ km: n3, v: e2[t3], mv: r4[s4] }), o2 = r4[s4].keymap;
                    break;
                  }
              }
              o2 ? (s3 = o2.d, n3 = o2) : n3 = n3.s;
            } else
              n3 = null;
          } while (n3);
          if (void 0 !== s3) {
            var l2 = i2[i2.length - 1];
            if (l2 && l2.km && l2.km.v) {
              var u2 = l2.km.v[l2.v] || l2.mv && l2.mv.keymap;
              !u2 || u2.r && !u2.r(e2, u2.d) || delete u2.d;
            }
          }
        }, n2.list = function(t3, n3) {
          t3 = t3 || {};
          var s3 = [];
          return r3.d && s3.push({ match: {}, data: r3.d, find: r3.f }), function r4(s4, i2, o2, l2) {
            if (s4.v) {
              var u2, a2 = s4.k, f2 = (0, e.Gex)(t3 ? null == t3[a2] ? n3 ? null : "*" : t3[a2] : "*"), p2 = __spreadValues({}, i2), h2 = __spreadValues({}, o2);
              for (var c2 in s4.v)
                if (c2 === t3[a2] || !n3 && null == t3[a2] || f2.on(c2)) {
                  var d2 = __spreadValues({}, p2);
                  d2[a2] = c2;
                  var g2 = __spreadValues({}, h2);
                  delete g2[a2], u2 = s4.v[c2], 0 === Object.keys(g2).length && u2 && u2.d && l2.push({ match: d2, data: u2.d, find: u2.f }), u2 && null != u2.v && r4(u2, __spreadValues({}, d2), __spreadValues({}, g2), l2);
                }
              (u2 = s4.s) && r4(u2, __spreadValues({}, p2), __spreadValues({}, h2), l2);
            }
          }(r3, {}, __spreadValues({}, t3), s3), s3;
        }, n2.toString = function(e2, t3) {
          var n3 = true === e2 || !!t3, s3 = "function" == typeof e2 ? e2 : function(e3) {
            return "function" == typeof e3 ? "<" + e3.name + ">" : "<" + e3 + ">";
          };
          function i2(e3, t4) {
            for (var n4 = 0; n4 < t4; n4++)
              e3.push(" ");
          }
          var o2 = [], l2 = [];
          return function e3(t4, n4, r4, l3) {
            var u2;
            if (void 0 !== t4.d && (n4.push(" " + s3(t4.d)), o2.push(l3.join(", ") + " -> " + s3(t4.d))), t4.k && (n4.push("\n"), i2(n4, r4), n4.push(t4.k + ":")), (t4.v || t4.s || t4.g) && r4++, t4.v)
              for (var a2 = Object.keys(t4.v).sort(), f2 = 0; f2 < a2.length; f2++) {
                var p2 = a2[f2];
                n4.push("\n"), i2(n4, r4), n4.push(p2 + " ->"), (u2 = l3.slice()).push(t4.k + "=" + p2), e3(t4.v[p2], n4, r4 + 1, u2);
              }
            if (t4.g)
              for (a2 = Object.keys(t4.g).sort(), f2 = 0; f2 < a2.length; f2++)
                for (var h2 = t4.g[a2[f2]], c2 = 0; c2 < h2.length; c2++) {
                  var d2 = h2[c2];
                  n4.push("\n"), i2(n4, r4), n4.push(d2.fix + " ~>"), (u2 = l3.slice()).push(t4.k + "~" + d2.fix), e3(d2.keymap, n4, r4 + 1, u2);
                }
            t4.s && (n4.push("\n"), i2(n4, r4), n4.push("|"), u2 = l3.slice(), e3(t4.s, n4, r4 + 1, u2));
          }(r3, l2, 0, []), n3 ? l2.join("") : o2.join("\n");
        }, n2.inspect = n2.toString, n2.toJSON = function(e2) {
          return JSON.stringify(r3, function(e3, t3) {
            return "function" == typeof t3 ? "[Function]" : t3;
          }, e2);
        }, n2;
      }
      function m(e2) {
        return new g(e2);
      }
      return Object.defineProperty(d.exports, "__esModule", { value: true }), d.exports.Gex = d.exports.Patrun = void 0, Object.defineProperty(d.exports, "Gex", { enumerable: true, get: function() {
        return e.Gex;
      } }), d.exports.Patrun = g, d.exports = m, d.exports.Patrun = g, d.exports.Gex = e.Gex, d.exports.default = m, d = d.exports;
    });
  })(patrun_min$1, patrun_min$1.exports);
  var patrun_minExports = patrun_min$1.exports;
  const Patrun = /* @__PURE__ */ getDefaultExportFromCjs(patrun_minExports);
  var jsonic$1 = { exports: {} };
  var types = {};
  "use strict";
  Object.defineProperty(types, "__esModule", { value: true });
  var STRING = types.STRING = INSPECT = types.INSPECT = EMPTY = types.EMPTY = AFTER = types.AFTER = BEFORE = types.BEFORE = CLOSE = types.CLOSE = OPEN = types.OPEN = void 0;
  var OPEN = types.OPEN = "o";
  var CLOSE = types.CLOSE = "c";
  var BEFORE = types.BEFORE = "b";
  var AFTER = types.AFTER = "a";
  var EMPTY = types.EMPTY = "";
  var INSPECT = types.INSPECT = Symbol.for("nodejs.util.inspect.custom");
  STRING = types.STRING = "string";
  var utility = {};
  var lexer = {};
  var hasRequiredLexer;
  function requireLexer() {
    if (hasRequiredLexer)
      return lexer;
    hasRequiredLexer = 1;
    "use strict";
    Object.defineProperty(lexer, "__esModule", { value: true });
    lexer.makeTextMatcher = lexer.makeNumberMatcher = lexer.makeCommentMatcher = lexer.makeStringMatcher = lexer.makeLineMatcher = lexer.makeSpaceMatcher = lexer.makeFixedMatcher = lexer.makeMatchMatcher = lexer.makeToken = lexer.makePoint = lexer.makeLex = lexer.makeNoToken = void 0;
    const types_12 = types;
    const utility_12 = requireUtility();
    class PointImpl {
      constructor(len, sI, rI, cI) {
        this.len = -1;
        this.sI = 0;
        this.rI = 1;
        this.cI = 1;
        this.token = [];
        this.len = len;
        if (null != sI) {
          this.sI = sI;
        }
        if (null != rI) {
          this.rI = rI;
        }
        if (null != cI) {
          this.cI = cI;
        }
      }
      toString() {
        return "Point[" + [this.sI + "/" + this.len, this.rI, this.cI] + (0 < this.token.length ? " " + this.token : "") + "]";
      }
      [types_12.INSPECT]() {
        return this.toString();
      }
    }
    const makePoint = (...params) => new PointImpl(...params);
    lexer.makePoint = makePoint;
    class TokenImpl {
      constructor(name, tin, val, src, pnt, use, why) {
        this.isToken = true;
        this.name = types_12.EMPTY;
        this.tin = -1;
        this.val = void 0;
        this.src = types_12.EMPTY;
        this.sI = -1;
        this.rI = -1;
        this.cI = -1;
        this.len = -1;
        this.name = name;
        this.tin = tin;
        this.src = src;
        this.val = val;
        this.sI = pnt.sI;
        this.rI = pnt.rI;
        this.cI = pnt.cI;
        this.use = use;
        this.why = why;
        this.len = null == src ? 0 : src.length;
      }
      resolveVal(rule, ctx) {
        let out = "function" === typeof this.val ? this.val(rule, ctx) : this.val;
        return out;
      }
      bad(err, details) {
        this.err = err;
        if (null != details) {
          this.use = (0, utility_12.deep)(this.use || {}, details);
        }
        return this;
      }
      toString() {
        return "Token[" + this.name + "=" + this.tin + " " + (0, utility_12.snip)(this.src) + (void 0 === this.val || "#ST" === this.name || "#TX" === this.name ? "" : "=" + (0, utility_12.snip)(this.val)) + " " + [this.sI, this.rI, this.cI] + (null == this.use ? "" : " " + (0, utility_12.snip)("" + JSON.stringify(this.use).replace(/"/g, ""), 22)) + (null == this.err ? "" : " " + this.err) + (null == this.why ? "" : " " + (0, utility_12.snip)("" + this.why, 22)) + "]";
      }
      [types_12.INSPECT]() {
        return this.toString();
      }
    }
    const makeToken = (...params) => new TokenImpl(...params);
    lexer.makeToken = makeToken;
    const makeNoToken = () => makeToken("", -1, void 0, types_12.EMPTY, makePoint(-1));
    lexer.makeNoToken = makeNoToken;
    let makeFixedMatcher = (cfg, _opts) => {
      let fixed = (0, utility_12.regexp)(null, "^(", cfg.rePart.fixed, ")");
      return function fixedMatcher(lex) {
        let mcfg = cfg.fixed;
        if (!mcfg.lex)
          return void 0;
        if (cfg.fixed.check) {
          let check = cfg.fixed.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let m = fwd.match(fixed);
        if (m) {
          let msrc = m[1];
          let mlen = msrc.length;
          if (0 < mlen) {
            let tkn = void 0;
            let tin = mcfg.token[msrc];
            if (null != tin) {
              tkn = lex.token(tin, void 0, msrc, pnt);
              pnt.sI += mlen;
              pnt.cI += mlen;
            }
            return tkn;
          }
        }
      };
    };
    lexer.makeFixedMatcher = makeFixedMatcher;
    let makeMatchMatcher = (cfg, _opts) => {
      let valueMatchers = (0, utility_12.values)(cfg.match.value);
      let tokenMatchers = (0, utility_12.values)(cfg.match.token);
      if (0 === valueMatchers.length && 0 === tokenMatchers.length) {
        return null;
      }
      return function matchMatcher(lex, rule, tI = 0) {
        let mcfg = cfg.match;
        if (!mcfg.lex)
          return void 0;
        if (cfg.match.check) {
          let check = cfg.match.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let oc = "o" === rule.state ? 0 : 1;
        for (let valueMatcher of valueMatchers) {
          if (valueMatcher.match instanceof RegExp) {
            let m = fwd.match(valueMatcher.match);
            if (m) {
              let msrc = m[0];
              let mlen = msrc.length;
              if (0 < mlen) {
                let tkn = void 0;
                let val = valueMatcher.val ? valueMatcher.val(m) : msrc;
                tkn = lex.token("#VL", val, msrc, pnt);
                pnt.sI += mlen;
                pnt.cI += mlen;
                return tkn;
              }
            }
          } else {
            let tkn = valueMatcher.match(lex, rule);
            if (null != tkn) {
              return tkn;
            }
          }
        }
        for (let tokenMatcher of tokenMatchers) {
          if (tokenMatcher.tin$ && !rule.spec.def.tcol[oc][tI].includes(tokenMatcher.tin$)) {
            continue;
          }
          if (tokenMatcher instanceof RegExp) {
            let m = fwd.match(tokenMatcher);
            if (m) {
              let msrc = m[0];
              let mlen = msrc.length;
              if (0 < mlen) {
                let tkn = void 0;
                let tin = tokenMatcher.tin$;
                tkn = lex.token(tin, msrc, msrc, pnt);
                pnt.sI += mlen;
                pnt.cI += mlen;
                return tkn;
              }
            }
          } else {
            let tkn = tokenMatcher(lex, rule);
            if (null != tkn) {
              return tkn;
            }
          }
        }
      };
    };
    lexer.makeMatchMatcher = makeMatchMatcher;
    let makeCommentMatcher = (cfg, opts) => {
      let oc = opts.comment;
      cfg.comment = {
        lex: oc ? !!oc.lex : false,
        def: ((oc === null || oc === void 0 ? void 0 : oc.def) ? (0, utility_12.entries)(oc.def) : []).reduce((def, [name, om]) => {
          if (null == om || false === om) {
            return def;
          }
          let cm = {
            name,
            start: om.start,
            end: om.end,
            line: !!om.line,
            lex: !!om.lex,
            eatline: !!om.eatline
          };
          def[name] = cm;
          return def;
        }, {})
      };
      let lineComments = cfg.comment.lex ? (0, utility_12.values)(cfg.comment.def).filter((c) => c.lex && c.line) : [];
      let blockComments = cfg.comment.lex ? (0, utility_12.values)(cfg.comment.def).filter((c) => c.lex && !c.line) : [];
      return function matchComment(lex, _rule) {
        let mcfg = cfg.comment;
        if (!mcfg.lex)
          return void 0;
        if (cfg.comment.check) {
          let check = cfg.comment.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let rI = pnt.rI;
        let cI = pnt.cI;
        for (let mc of lineComments) {
          if (fwd.startsWith(mc.start)) {
            let fwdlen = fwd.length;
            let fI = mc.start.length;
            cI += mc.start.length;
            while (fI < fwdlen && !cfg.line.chars[fwd[fI]]) {
              cI++;
              fI++;
            }
            if (mc.eatline) {
              while (fI < fwdlen && cfg.line.chars[fwd[fI]]) {
                if (cfg.line.rowChars[fwd[fI]]) {
                  rI++;
                }
                fI++;
              }
            }
            let csrc = fwd.substring(0, fI);
            let tkn = lex.token("#CM", void 0, csrc, pnt);
            pnt.sI += csrc.length;
            pnt.cI = cI;
            pnt.rI = rI;
            return tkn;
          }
        }
        for (let mc of blockComments) {
          if (fwd.startsWith(mc.start)) {
            let fwdlen = fwd.length;
            let fI = mc.start.length;
            let end2 = mc.end;
            cI += mc.start.length;
            while (fI < fwdlen && !fwd.substring(fI).startsWith(end2)) {
              if (cfg.line.rowChars[fwd[fI]]) {
                rI++;
                cI = 0;
              }
              cI++;
              fI++;
            }
            if (fwd.substring(fI).startsWith(end2)) {
              cI += end2.length;
              if (mc.eatline) {
                while (fI < fwdlen && cfg.line.chars[fwd[fI]]) {
                  if (cfg.line.rowChars[fwd[fI]]) {
                    rI++;
                  }
                  fI++;
                }
              }
              let csrc = fwd.substring(0, fI + end2.length);
              let tkn = lex.token("#CM", void 0, csrc, pnt);
              pnt.sI += csrc.length;
              pnt.rI = rI;
              pnt.cI = cI;
              return tkn;
            } else {
              return lex.bad(utility_12.S.unterminated_comment, pnt.sI, pnt.sI + 9 * mc.start.length);
            }
          }
        }
      };
    };
    lexer.makeCommentMatcher = makeCommentMatcher;
    let makeTextMatcher = (cfg, opts) => {
      let ender = (0, utility_12.regexp)(cfg.line.lex ? null : "s", "^(.*?)", ...cfg.rePart.ender);
      return function textMatcher(lex) {
        if (cfg.text.check) {
          let check = cfg.text.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let mcfg = cfg.text;
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let def = cfg.value.def;
        let defre = cfg.value.defre;
        let m = fwd.match(ender);
        if (m) {
          let msrc = m[1];
          let tsrc = m[2];
          let out = void 0;
          if (null != msrc) {
            let mlen = msrc.length;
            if (0 < mlen) {
              let vs = void 0;
              if (cfg.value.lex) {
                if (void 0 !== (vs = def[msrc])) {
                  out = lex.token("#VL", vs.val, msrc, pnt);
                  pnt.sI += mlen;
                  pnt.cI += mlen;
                } else {
                  for (let vname in defre) {
                    let vspec = defre[vname];
                    if (vspec.match) {
                      let res = vspec.match.exec(vspec.consume ? fwd : msrc);
                      if (res && (vspec.consume || res[0].length === msrc.length)) {
                        let remsrc = res[0];
                        if (null == vspec.val) {
                          out = lex.token("#VL", remsrc, remsrc, pnt);
                        } else {
                          let val = vspec.val(res);
                          out = lex.token("#VL", val, remsrc, pnt);
                        }
                        pnt.sI += remsrc.length;
                        pnt.cI += remsrc.length;
                      }
                    }
                  }
                }
              }
              if (null == out && mcfg.lex) {
                out = lex.token("#TX", msrc, msrc, pnt);
                pnt.sI += mlen;
                pnt.cI += mlen;
              }
            }
          }
          if (out) {
            out = subMatchFixed(lex, out, tsrc);
          }
          if (out && 0 < cfg.text.modify.length) {
            const modify = cfg.text.modify;
            for (let mI = 0; mI < modify.length; mI++) {
              out.val = modify[mI](out.val, lex, cfg, opts);
            }
          }
          return out;
        }
      };
    };
    lexer.makeTextMatcher = makeTextMatcher;
    let makeNumberMatcher = (cfg, _opts) => {
      let mcfg = cfg.number;
      let ender = (0, utility_12.regexp)(null, [
        "^([-+]?(0(",
        [
          mcfg.hex ? "x[0-9a-fA-F_]+" : null,
          mcfg.oct ? "o[0-7_]+" : null,
          mcfg.bin ? "b[01_]+" : null
        ].filter((s) => null != s).join("|"),
        // ')|[.0-9]+([0-9_]*[0-9])?)',
        ")|\\.?[0-9]+([0-9_]*[0-9])?)",
        "(\\.[0-9]?([0-9_]*[0-9])?)?",
        "([eE][-+]?[0-9]+([0-9_]*[0-9])?)?"
      ].join("").replace(/_/g, mcfg.sep ? (0, utility_12.escre)(mcfg.sepChar) : ""), ")", ...cfg.rePart.ender);
      let numberSep = mcfg.sep ? (0, utility_12.regexp)("g", (0, utility_12.escre)(mcfg.sepChar)) : void 0;
      return function matchNumber(lex) {
        mcfg = cfg.number;
        if (!mcfg.lex)
          return void 0;
        if (cfg.number.check) {
          let check = cfg.number.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let valdef = cfg.value.def;
        let m = fwd.match(ender);
        if (m) {
          let msrc = m[1];
          let tsrc = m[9];
          let out = void 0;
          let included = true;
          if (null != msrc && (included = !cfg.number.exclude || !msrc.match(cfg.number.exclude))) {
            let mlen = msrc.length;
            if (0 < mlen) {
              let vs = void 0;
              if (cfg.value.lex && void 0 !== (vs = valdef[msrc])) {
                out = lex.token("#VL", vs.val, msrc, pnt);
              } else {
                let nstr = numberSep ? msrc.replace(numberSep, "") : msrc;
                let num = +nstr;
                if (isNaN(num)) {
                  let first = nstr[0];
                  if ("-" === first || "+" === first) {
                    num = ("-" === first ? -1 : 1) * +nstr.substring(1);
                  }
                }
                if (!isNaN(num)) {
                  out = lex.token("#NR", num, msrc, pnt);
                  pnt.sI += mlen;
                  pnt.cI += mlen;
                }
              }
            }
          }
          if (included) {
            out = subMatchFixed(lex, out, tsrc);
          }
          return out;
        }
      };
    };
    lexer.makeNumberMatcher = makeNumberMatcher;
    let makeStringMatcher = (cfg, opts) => {
      let os = opts.string || {};
      cfg.string = cfg.string || {};
      cfg.string = (0, utility_12.deep)(cfg.string, {
        lex: !!(os === null || os === void 0 ? void 0 : os.lex),
        quoteMap: (0, utility_12.charset)(os.chars),
        multiChars: (0, utility_12.charset)(os.multiChars),
        escMap: __spreadValues({}, os.escape),
        escChar: os.escapeChar,
        escCharCode: null == os.escapeChar ? void 0 : os.escapeChar.charCodeAt(0),
        allowUnknown: !!os.allowUnknown,
        replaceCodeMap: (0, utility_12.omap)((0, utility_12.clean)(__spreadValues({}, os.replace)), ([c, r2]) => [
          c.charCodeAt(0),
          r2
        ]),
        hasReplace: false,
        abandon: !!os.abandon
      });
      cfg.string.escMap = (0, utility_12.clean)(cfg.string.escMap);
      cfg.string.hasReplace = 0 < (0, utility_12.keys)(cfg.string.replaceCodeMap).length;
      return function stringMatcher(lex) {
        let mcfg = cfg.string;
        if (!mcfg.lex)
          return void 0;
        if (cfg.string.check) {
          let check = cfg.string.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let { quoteMap, escMap, escChar, escCharCode, multiChars, allowUnknown, replaceCodeMap, hasReplace } = mcfg;
        let { pnt, src } = lex;
        let { sI, rI, cI } = pnt;
        let srclen = src.length;
        if (quoteMap[src[sI]]) {
          const q = src[sI];
          const qI = sI;
          const qrI = rI;
          const isMultiLine = multiChars[q];
          ++sI;
          ++cI;
          let s = [];
          let rs;
          for (sI; sI < srclen; sI++) {
            cI++;
            let c = src[sI];
            rs = void 0;
            if (q === c) {
              sI++;
              break;
            } else if (escChar === c) {
              sI++;
              cI++;
              let es = escMap[src[sI]];
              if (null != es) {
                s.push(es);
              } else if ("x" === src[sI]) {
                sI++;
                let cc = parseInt(src.substring(sI, sI + 2), 16);
                if (isNaN(cc)) {
                  if (mcfg.abandon) {
                    return void 0;
                  }
                  sI = sI - 2;
                  cI -= 2;
                  pnt.sI = sI;
                  pnt.cI = cI;
                  return lex.bad(utility_12.S.invalid_ascii, sI, sI + 4);
                }
                let us = String.fromCharCode(cc);
                s.push(us);
                sI += 1;
                cI += 2;
              } else if ("u" === src[sI]) {
                sI++;
                let ux = "{" === src[sI] ? (sI++, 1) : 0;
                let ulen = ux ? 6 : 4;
                let cc = parseInt(src.substring(sI, sI + ulen), 16);
                if (isNaN(cc)) {
                  if (mcfg.abandon) {
                    return void 0;
                  }
                  sI = sI - 2 - ux;
                  cI -= 2;
                  pnt.sI = sI;
                  pnt.cI = cI;
                  return lex.bad(utility_12.S.invalid_unicode, sI, sI + ulen + 2 + 2 * ux);
                }
                let us = String.fromCodePoint(cc);
                s.push(us);
                sI += ulen - 1 + ux;
                cI += ulen + ux;
              } else if (allowUnknown) {
                s.push(src[sI]);
              } else {
                if (mcfg.abandon) {
                  return void 0;
                }
                pnt.sI = sI;
                pnt.cI = cI - 1;
                return lex.bad(utility_12.S.unexpected, sI, sI + 1);
              }
            } else if (hasReplace && void 0 !== (rs = replaceCodeMap[src.charCodeAt(sI)])) {
              s.push(rs);
              cI++;
            } else {
              let bI = sI;
              let qc = q.charCodeAt(0);
              let cc = src.charCodeAt(sI);
              while ((!hasReplace || void 0 === (rs = replaceCodeMap[cc])) && sI < srclen && 32 <= cc && qc !== cc && escCharCode !== cc) {
                cc = src.charCodeAt(++sI);
                cI++;
              }
              cI--;
              if (void 0 === rs && cc < 32) {
                if (isMultiLine && cfg.line.chars[src[sI]]) {
                  if (cfg.line.rowChars[src[sI]]) {
                    pnt.rI = ++rI;
                  }
                  cI = 1;
                  s.push(src.substring(bI, sI + 1));
                } else {
                  if (mcfg.abandon) {
                    return void 0;
                  }
                  pnt.sI = sI;
                  pnt.cI = cI;
                  return lex.bad(utility_12.S.unprintable, sI, sI + 1);
                }
              } else {
                s.push(src.substring(bI, sI));
                sI--;
              }
            }
          }
          if (src[sI - 1] !== q || pnt.sI === sI - 1) {
            if (mcfg.abandon) {
              return void 0;
            }
            pnt.rI = qrI;
            return lex.bad(utility_12.S.unterminated_string, qI, sI);
          }
          const tkn = lex.token("#ST", s.join(types_12.EMPTY), src.substring(pnt.sI, sI), pnt);
          pnt.sI = sI;
          pnt.rI = rI;
          pnt.cI = cI;
          return tkn;
        }
      };
    };
    lexer.makeStringMatcher = makeStringMatcher;
    let makeLineMatcher = (cfg, _opts) => {
      return function matchLine(lex) {
        if (!cfg.line.lex)
          return void 0;
        if (cfg.line.check) {
          let check = cfg.line.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let { chars, rowChars } = cfg.line;
        let { pnt, src } = lex;
        let { sI, rI } = pnt;
        let single = cfg.line.single;
        let counts = void 0;
        if (single) {
          counts = {};
        }
        while (chars[src[sI]]) {
          if (counts) {
            counts[src[sI]] = (counts[src[sI]] || 0) + 1;
            if (single) {
              if (1 < counts[src[sI]]) {
                break;
              }
            }
          }
          rI += rowChars[src[sI]] ? 1 : 0;
          sI++;
        }
        if (pnt.sI < sI) {
          let msrc = src.substring(pnt.sI, sI);
          const tkn = lex.token("#LN", void 0, msrc, pnt);
          pnt.sI += msrc.length;
          pnt.rI = rI;
          pnt.cI = 1;
          return tkn;
        }
      };
    };
    lexer.makeLineMatcher = makeLineMatcher;
    let makeSpaceMatcher = (cfg, _opts) => {
      return function spaceMatcher(lex) {
        if (!cfg.space.lex)
          return void 0;
        if (cfg.space.check) {
          let check = cfg.space.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let { chars } = cfg.space;
        let { pnt, src } = lex;
        let { sI, cI } = pnt;
        while (chars[src[sI]]) {
          sI++;
          cI++;
        }
        if (pnt.sI < sI) {
          let msrc = src.substring(pnt.sI, sI);
          const tkn = lex.token("#SP", void 0, msrc, pnt);
          pnt.sI += msrc.length;
          pnt.cI = cI;
          return tkn;
        }
      };
    };
    lexer.makeSpaceMatcher = makeSpaceMatcher;
    function subMatchFixed(lex, first, tsrc) {
      let pnt = lex.pnt;
      let out = first;
      if (lex.cfg.fixed.lex && null != tsrc) {
        let tknlen = tsrc.length;
        if (0 < tknlen) {
          let tkn = void 0;
          let tin = lex.cfg.fixed.token[tsrc];
          if (null != tin) {
            tkn = lex.token(tin, void 0, tsrc, pnt);
          }
          if (null != tkn) {
            pnt.sI += tkn.src.length;
            pnt.cI += tkn.src.length;
            if (null == first) {
              out = tkn;
            } else {
              pnt.token.push(tkn);
            }
          }
        }
      }
      return out;
    }
    class LexImpl {
      constructor(ctx) {
        this.src = types_12.EMPTY;
        this.ctx = {};
        this.cfg = {};
        this.pnt = makePoint(-1);
        this.ctx = ctx;
        this.src = ctx.src();
        this.cfg = ctx.cfg;
        this.pnt = makePoint(this.src.length);
      }
      token(ref, val, src, pnt, use, why) {
        let tin;
        let name;
        if ("string" === typeof ref) {
          name = ref;
          tin = (0, utility_12.tokenize)(name, this.cfg);
        } else {
          tin = ref;
          name = (0, utility_12.tokenize)(ref, this.cfg);
        }
        let tkn = makeToken(name, tin, val, src, pnt || this.pnt, use, why);
        return tkn;
      }
      next(rule, alt, altI, tI) {
        let tkn;
        let pnt = this.pnt;
        let sI = pnt.sI;
        let match2 = void 0;
        if (pnt.end) {
          tkn = pnt.end;
        } else if (0 < pnt.token.length) {
          tkn = pnt.token.shift();
        } else if (pnt.len <= pnt.sI) {
          pnt.end = this.token("#ZZ", void 0, "", pnt);
          tkn = pnt.end;
        } else {
          try {
            for (let mat of this.cfg.lex.match) {
              if (tkn = mat(this, rule, tI)) {
                match2 = mat;
                break;
              }
            }
          } catch (err) {
            tkn = tkn || this.token("#BD", void 0, this.src[pnt.sI], pnt, { err }, err.code || utility_12.S.unexpected);
          }
          tkn = tkn || this.token("#BD", void 0, this.src[pnt.sI], pnt, void 0, utility_12.S.unexpected);
        }
        this.ctx.log && this.ctx.log(utility_12.S.lex, this.ctx, rule, this, pnt, sI, match2, tkn, alt, altI, tI);
        if (this.ctx.sub.lex) {
          this.ctx.sub.lex.map((sub) => sub(tkn, rule, this.ctx));
        }
        return tkn;
      }
      tokenize(ref) {
        return (0, utility_12.tokenize)(ref, this.cfg);
      }
      bad(why, pstart, pend) {
        return this.token("#BD", void 0, 0 <= pstart && pstart <= pend ? this.src.substring(pstart, pend) : this.src[this.pnt.sI], void 0, void 0, why);
      }
    }
    const makeLex = (...params) => new LexImpl(...params);
    lexer.makeLex = makeLex;
    return lexer;
  }
  var hasRequiredUtility;
  function requireUtility() {
    if (hasRequiredUtility)
      return utility;
    hasRequiredUtility = 1;
    "use strict";
    Object.defineProperty(utility, "__esModule", { value: true });
    utility.modlist = utility.findTokenSet = utility.values = utility.keys = utility.omap = utility.str = utility.prop = utility.parserwrap = utility.trimstk = utility.tokenize = utility.srcfmt = utility.snip = utility.regexp = utility.mesc = utility.makelog = utility.isarr = utility.filterRules = utility.extract = utility.escre = utility.errinject = utility.errdesc = utility.entries = utility.defprop = utility.deep = utility.configure = utility.clone = utility.clean = utility.charset = utility.badlex = utility.assign = utility.S = utility.JsonicError = void 0;
    const types_12 = types;
    const lexer_12 = requireLexer();
    const keys = (x) => null == x ? [] : Object.keys(x);
    utility.keys = keys;
    const values2 = (x) => null == x ? [] : Object.values(x);
    utility.values = values2;
    const entries = (x) => null == x ? [] : Object.entries(x);
    utility.entries = entries;
    const assign2 = (x, ...r2) => Object.assign(null == x ? {} : x, ...r2);
    utility.assign = assign2;
    const isarr = (x) => Array.isArray(x);
    utility.isarr = isarr;
    const defprop = Object.defineProperty;
    utility.defprop = defprop;
    const omap = (o, f) => {
      return Object.entries(o || {}).reduce((o2, e) => {
        let me = f ? f(e) : e;
        if (void 0 === me[0]) {
          delete o2[e[0]];
        } else {
          o2[me[0]] = me[1];
        }
        let i = 2;
        while (void 0 !== me[i]) {
          o2[me[i]] = me[i + 1];
          i += 2;
        }
        return o2;
      }, {});
    };
    utility.omap = omap;
    const S2 = {
      indent: ". ",
      logindent: "  ",
      space: " ",
      gap: "  ",
      Object: "Object",
      Array: "Array",
      object: "object",
      string: "string",
      function: "function",
      unexpected: "unexpected",
      map: "map",
      list: "list",
      elem: "elem",
      pair: "pair",
      val: "val",
      node: "node",
      no_re_flags: types_12.EMPTY,
      unprintable: "unprintable",
      invalid_ascii: "invalid_ascii",
      invalid_unicode: "invalid_unicode",
      invalid_lex_state: "invalid_lex_state",
      unterminated_string: "unterminated_string",
      unterminated_comment: "unterminated_comment",
      lex: "lex",
      parse: "parse",
      error: "error",
      none: "none",
      imp_map: "imp,map",
      imp_list: "imp,list",
      imp_null: "imp,null",
      end: "end",
      open: "open",
      close: "close",
      rule: "rule",
      stack: "stack",
      nUll: "null",
      name: "name",
      make: "make",
      colon: ":"
    };
    utility.S = S2;
    class JsonicError extends SyntaxError {
      constructor(code, details, token2, rule, ctx) {
        details = deep({}, details);
        let desc = errdesc(code, details, token2, rule, ctx);
        super(desc.message);
        assign2(this, desc);
        trimstk(this);
      }
      toJSON() {
        return __spreadProps(__spreadValues({}, this), {
          __error: true,
          name: this.name,
          message: this.message,
          stack: this.stack
        });
      }
    }
    utility.JsonicError = JsonicError;
    function configure(jsonic2, incfg, opts) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _o, _p, _q, _r, _s, _t5, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26;
      const cfg = incfg || {};
      cfg.t = cfg.t || {};
      cfg.tI = cfg.tI || 1;
      const t = (tn) => tokenize2(tn, cfg);
      if (false !== opts.standard$) {
        t("#BD");
        t("#ZZ");
        t("#UK");
        t("#AA");
        t("#SP");
        t("#LN");
        t("#CM");
        t("#NR");
        t("#ST");
        t("#TX");
        t("#VL");
      }
      cfg.safe = {
        key: false === ((_a = opts.safe) === null || _a === void 0 ? void 0 : _a.key) ? false : true
      };
      cfg.fixed = {
        lex: !!((_b = opts.fixed) === null || _b === void 0 ? void 0 : _b.lex),
        token: opts.fixed ? omap(clean(opts.fixed.token), ([name, src]) => [
          src,
          tokenize2(name, cfg)
        ]) : {},
        ref: void 0,
        check: (_c = opts.fixed) === null || _c === void 0 ? void 0 : _c.check
      };
      cfg.fixed.ref = omap(cfg.fixed.token, ([tin, src]) => [
        tin,
        src
      ]);
      cfg.fixed.ref = Object.assign(cfg.fixed.ref, omap(cfg.fixed.ref, ([tin, src]) => [src, tin]));
      cfg.match = {
        lex: !!((_d = opts.match) === null || _d === void 0 ? void 0 : _d.lex),
        value: opts.match ? omap(clean(opts.match.value), ([name, spec]) => [
          name,
          spec
        ]) : {},
        token: opts.match ? omap(clean(opts.match.token), ([name, matcher]) => [
          tokenize2(name, cfg),
          matcher
        ]) : {},
        check: (_e = opts.match) === null || _e === void 0 ? void 0 : _e.check
      };
      omap(cfg.match.token, ([tin, matcher]) => [
        tin,
        (matcher.tin$ = +tin, matcher)
      ]);
      const tokenSet = opts.tokenSet ? Object.keys(opts.tokenSet).reduce((a, n) => (a[n] = opts.tokenSet[n].filter((x) => null != x).map((n2) => t(n2)), a), {}) : {};
      cfg.tokenSet = cfg.tokenSet || {};
      entries(tokenSet).map((entry) => {
        let name = entry[0];
        let tinset = entry[1];
        if (cfg.tokenSet[name]) {
          cfg.tokenSet[name].length = 0;
          cfg.tokenSet[name].push(...tinset);
        } else {
          cfg.tokenSet[name] = tinset;
        }
      });
      cfg.tokenSetTins = entries(cfg.tokenSet).reduce((a, en) => (a[en[0]] = a[en[0]] || {}, en[1].map((tin) => a[en[0]][tin] = true), a), {});
      cfg.tokenSetTins.IGNORE = cfg.tokenSetTins.IGNORE || {};
      cfg.space = {
        lex: !!((_f = opts.space) === null || _f === void 0 ? void 0 : _f.lex),
        chars: charset((_g = opts.space) === null || _g === void 0 ? void 0 : _g.chars),
        check: (_h = opts.space) === null || _h === void 0 ? void 0 : _h.check
      };
      cfg.line = {
        lex: !!((_j = opts.line) === null || _j === void 0 ? void 0 : _j.lex),
        chars: charset((_k = opts.line) === null || _k === void 0 ? void 0 : _k.chars),
        rowChars: charset((_l = opts.line) === null || _l === void 0 ? void 0 : _l.rowChars),
        single: !!((_o = opts.line) === null || _o === void 0 ? void 0 : _o.single),
        check: (_p = opts.line) === null || _p === void 0 ? void 0 : _p.check
      };
      cfg.text = {
        lex: !!((_q = opts.text) === null || _q === void 0 ? void 0 : _q.lex),
        modify: (((_r = cfg.text) === null || _r === void 0 ? void 0 : _r.modify) || []).concat([(_s = opts.text) === null || _s === void 0 ? void 0 : _s.modify].flat()).filter((m) => null != m),
        check: (_t5 = opts.text) === null || _t5 === void 0 ? void 0 : _t5.check
      };
      cfg.number = {
        lex: !!((_u = opts.number) === null || _u === void 0 ? void 0 : _u.lex),
        hex: !!((_v = opts.number) === null || _v === void 0 ? void 0 : _v.hex),
        oct: !!((_w = opts.number) === null || _w === void 0 ? void 0 : _w.oct),
        bin: !!((_x = opts.number) === null || _x === void 0 ? void 0 : _x.bin),
        sep: null != ((_y = opts.number) === null || _y === void 0 ? void 0 : _y.sep) && "" !== opts.number.sep,
        exclude: (_z = opts.number) === null || _z === void 0 ? void 0 : _z.exclude,
        sepChar: (_0 = opts.number) === null || _0 === void 0 ? void 0 : _0.sep,
        check: (_1 = opts.number) === null || _1 === void 0 ? void 0 : _1.check
      };
      cfg.value = {
        lex: !!((_2 = opts.value) === null || _2 === void 0 ? void 0 : _2.lex),
        def: entries(((_3 = opts.value) === null || _3 === void 0 ? void 0 : _3.def) || {}).reduce((a, e) => (null == e[1] || false === e[1] || e[1].match || (a[e[0]] = e[1]), a), {}),
        defre: entries(((_4 = opts.value) === null || _4 === void 0 ? void 0 : _4.def) || {}).reduce((a, e) => (e[1] && e[1].match && (a[e[0]] = e[1], a[e[0]].consume = !!a[e[0]].consume), a), {})
        // TODO: just testing, move to a plugin for extended values
        // 'undefined': { v: undefined },
        // 'NaN': { v: NaN },
        // 'Infinity': { v: Infinity },
        // '+Infinity': { v: +Infinity },
        // '-Infinity': { v: -Infinity },
      };
      cfg.rule = {
        start: null == ((_5 = opts.rule) === null || _5 === void 0 ? void 0 : _5.start) ? "val" : opts.rule.start,
        maxmul: null == ((_6 = opts.rule) === null || _6 === void 0 ? void 0 : _6.maxmul) ? 3 : opts.rule.maxmul,
        finish: !!((_7 = opts.rule) === null || _7 === void 0 ? void 0 : _7.finish),
        include: ((_8 = opts.rule) === null || _8 === void 0 ? void 0 : _8.include) ? opts.rule.include.split(/\s*,+\s*/).filter((g) => "" !== g) : [],
        exclude: ((_9 = opts.rule) === null || _9 === void 0 ? void 0 : _9.exclude) ? opts.rule.exclude.split(/\s*,+\s*/).filter((g) => "" !== g) : []
      };
      cfg.map = {
        extend: !!((_10 = opts.map) === null || _10 === void 0 ? void 0 : _10.extend),
        merge: (_11 = opts.map) === null || _11 === void 0 ? void 0 : _11.merge
      };
      cfg.list = {
        property: !!((_12 = opts.list) === null || _12 === void 0 ? void 0 : _12.property)
      };
      let fixedSorted = Object.keys(cfg.fixed.token).sort((a, b) => b.length - a.length);
      let fixedRE = fixedSorted.map((fixed) => escre(fixed)).join("|");
      let commentStartRE = ((_13 = opts.comment) === null || _13 === void 0 ? void 0 : _13.lex) ? (opts.comment.def ? values2(opts.comment.def) : []).filter((c) => c && c.lex).map((c) => escre(c.start)).join("|") : "";
      let enderRE = [
        "([",
        escre(keys(charset(cfg.space.lex && cfg.space.chars, cfg.line.lex && cfg.line.chars)).join("")),
        "]",
        ("string" === typeof opts.ender ? opts.ender.split("") : Array.isArray(opts.ender) ? opts.ender : []).map((c) => "|" + escre(c)).join(""),
        "" === fixedRE ? "" : "|",
        fixedRE,
        "" === commentStartRE ? "" : "|",
        commentStartRE,
        "|$)"
        // EOF case
      ];
      cfg.rePart = {
        fixed: fixedRE,
        ender: enderRE,
        commentStart: commentStartRE
      };
      cfg.re = {
        ender: regexp(null, ...enderRE),
        // TODO: prebuild these using a property on matcher?
        rowChars: regexp(null, escre((_14 = opts.line) === null || _14 === void 0 ? void 0 : _14.rowChars)),
        columns: regexp(null, "[" + escre((_15 = opts.line) === null || _15 === void 0 ? void 0 : _15.chars) + "]", "(.*)$")
      };
      cfg.lex = {
        empty: !!((_16 = opts.lex) === null || _16 === void 0 ? void 0 : _16.empty),
        emptyResult: (_17 = opts.lex) === null || _17 === void 0 ? void 0 : _17.emptyResult,
        match: ((_18 = opts.lex) === null || _18 === void 0 ? void 0 : _18.match) ? entries(opts.lex.match).reduce((list, entry) => {
          let name = entry[0];
          let matchspec = entry[1];
          if (matchspec) {
            let matcher = matchspec.make(cfg, opts);
            if (matcher) {
              matcher.matcher = name;
              matcher.make = matchspec.make;
              matcher.order = matchspec.order;
            }
            list.push(matcher);
          }
          return list;
        }, []).filter((m) => null != m && false !== m && -1 < +m.order).sort((a, b) => a.order - b.order) : []
      };
      cfg.parse = {
        prepare: values2((_19 = opts.parse) === null || _19 === void 0 ? void 0 : _19.prepare)
      };
      cfg.debug = {
        get_console: ((_20 = opts.debug) === null || _20 === void 0 ? void 0 : _20.get_console) || (() => console),
        maxlen: null == ((_21 = opts.debug) === null || _21 === void 0 ? void 0 : _21.maxlen) ? 99 : opts.debug.maxlen,
        print: {
          config: !!((_23 = (_22 = opts.debug) === null || _22 === void 0 ? void 0 : _22.print) === null || _23 === void 0 ? void 0 : _23.config),
          src: (_25 = (_24 = opts.debug) === null || _24 === void 0 ? void 0 : _24.print) === null || _25 === void 0 ? void 0 : _25.src
        }
      };
      cfg.error = opts.error || {};
      cfg.hint = opts.hint || {};
      if ((_26 = opts.config) === null || _26 === void 0 ? void 0 : _26.modify) {
        keys(opts.config.modify).forEach((modifer) => opts.config.modify[modifer](cfg, opts));
      }
      if (cfg.debug.print.config) {
        cfg.debug.get_console().dir(cfg, { depth: null });
      }
      cfg.result = {
        fail: []
      };
      if (opts.result) {
        cfg.result.fail = [...opts.result.fail];
      }
      assign2(jsonic2.options, opts);
      assign2(jsonic2.token, cfg.t);
      assign2(jsonic2.tokenSet, cfg.tokenSet);
      assign2(jsonic2.fixed, cfg.fixed.ref);
      return cfg;
    }
    utility.configure = configure;
    function tokenize2(ref, cfg, jsonic2) {
      let tokenmap = cfg.t;
      let token2 = tokenmap[ref];
      if (null == token2 && types_12.STRING === typeof ref) {
        token2 = cfg.tI++;
        tokenmap[token2] = ref;
        tokenmap[ref] = token2;
        tokenmap[ref.substring(1)] = token2;
        if (null != jsonic2) {
          assign2(jsonic2.token, cfg.t);
        }
      }
      return token2;
    }
    utility.tokenize = tokenize2;
    function findTokenSet(ref, cfg) {
      let tokenSetMap = cfg.tokenSet;
      let found = tokenSetMap[ref];
      return found;
    }
    utility.findTokenSet = findTokenSet;
    function mesc(s, _2) {
      return _2 = new String(s), _2.esc = true, _2;
    }
    utility.mesc = mesc;
    function regexp(flags, ...parts) {
      return new RegExp(parts.map((p) => p.esc ? (
        //p.replace(/[-\\|\]{}()[^$+*?.!=]/g, '\\$&')
        escre(p.toString())
      ) : p).join(types_12.EMPTY), null == flags ? "" : flags);
    }
    utility.regexp = regexp;
    function escre(s) {
      return null == s ? "" : s.replace(/[-\\|\]{}()[^$+*?.!=]/g, "\\$&").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\n/g, "\\n");
    }
    utility.escre = escre;
    function deep(base, ...rest) {
      let base_isf = S2.function === typeof base;
      let base_iso = null != base && (S2.object === typeof base || base_isf);
      for (let over of rest) {
        let over_isf = S2.function === typeof over;
        let over_iso = null != over && (S2.object === typeof over || over_isf);
        let over_ctor;
        if (base_iso && over_iso && !over_isf && Array.isArray(base) === Array.isArray(over)) {
          for (let k in over) {
            base[k] = deep(base[k], over[k]);
          }
        } else {
          base = void 0 === over ? base : over_isf ? over : over_iso ? S2.function === typeof (over_ctor = over.constructor) && S2.Object !== over_ctor.name && S2.Array !== over_ctor.name ? over : deep(Array.isArray(over) ? [] : {}, over) : over;
          base_isf = S2.function === typeof base;
          base_iso = null != base && (S2.object === typeof base || base_isf);
        }
      }
      return base;
    }
    utility.deep = deep;
    function errinject(s, code, details, token2, rule, ctx) {
      let ref = { code, details, token: token2, rule, ctx };
      return null == s ? "" : s.replace(/\$(\{?)([\w_0-9]+)(\}?)/g, (_m, ob, name, cb) => {
        let inject = null != ref[name] ? ref[name] : null != details[name] ? details[name] : ctx.meta && null != ctx.meta[name] ? ctx.meta[name] : null != token2[name] ? token2[name] : null != rule[name] ? rule[name] : null != ctx.opts[name] ? ctx.opts[name] : null != ctx.cfg[name] ? ctx.cfg[name] : null != ctx[name] ? ctx[name] : "$" + name;
        let instr = ob && cb ? inject : JSON.stringify(inject);
        instr = null == instr ? "" : instr;
        return instr.replace(/\n/g, "\n  ");
      });
    }
    utility.errinject = errinject;
    function trimstk(err) {
      if (err.stack) {
        err.stack = err.stack.split("\n").filter((s) => !s.includes("jsonic/jsonic")).map((s) => s.replace(/    at /, "at ")).join("\n");
      }
    }
    utility.trimstk = trimstk;
    function extract(src, errtxt, token2) {
      let loc = 0 < token2.sI ? token2.sI : 0;
      let row = 0 < token2.rI ? token2.rI : 1;
      let col = 0 < token2.cI ? token2.cI : 1;
      let tsrc = null == token2.src ? types_12.EMPTY : token2.src;
      let behind = src.substring(Math.max(0, loc - 333), loc).split("\n");
      let ahead = src.substring(loc, loc + 333).split("\n");
      let pad = 2 + (types_12.EMPTY + (row + 2)).length;
      let rc = row < 3 ? 1 : row - 2;
      let ln = (s) => "\x1B[34m" + (types_12.EMPTY + rc++).padStart(pad, " ") + " | \x1B[0m" + (null == s ? types_12.EMPTY : s);
      let blen = behind.length;
      let lines = [
        2 < blen ? ln(behind[blen - 3]) : null,
        1 < blen ? ln(behind[blen - 2]) : null,
        ln(behind[blen - 1] + ahead[0]),
        " ".repeat(pad) + "   " + " ".repeat(col - 1) + "\x1B[31m" + "^".repeat(tsrc.length || 1) + " " + errtxt + "\x1B[0m",
        ln(ahead[1]),
        ln(ahead[2])
      ].filter((line2) => null != line2).join("\n");
      return lines;
    }
    utility.extract = extract;
    function errdesc(code, details, token2, rule, ctx) {
      var _a, _b, _c;
      try {
        let cfg = ctx.cfg;
        let meta = ctx.meta;
        let errtxt = errinject(cfg.error[code] || ((_a = details === null || details === void 0 ? void 0 : details.use) === null || _a === void 0 ? void 0 : _a.err) && (details.use.err.code || details.use.err.message) || cfg.error.unknown, code, details, token2, rule, ctx);
        if (S2.function === typeof cfg.hint) {
          cfg.hint = __spreadValues(__spreadValues({}, cfg.hint()), cfg.hint);
        }
        let message = [
          "\x1B[31m[jsonic/" + code + "]:\x1B[0m " + errtxt,
          "  \x1B[34m-->\x1B[0m " + (meta && meta.fileName || "<no-file>") + ":" + token2.rI + ":" + token2.cI,
          extract(ctx.src(), errtxt, token2),
          "",
          errinject((cfg.hint[code] || ((_c = (_b = details.use) === null || _b === void 0 ? void 0 : _b.err) === null || _c === void 0 ? void 0 : _c.message) || cfg.hint.unknown || "").trim().split("\n").map((s) => "  " + s).join("\n"), code, details, token2, rule, ctx),
          "",
          "  \x1B[2mhttps://jsonic.senecajs.org\x1B[0m",
          "  \x1B[2m--internal: rule=" + rule.name + "~" + rule.state + "; token=" + tokenize2(token2.tin, ctx.cfg) + (null == token2.why ? "" : "~" + token2.why) + "; plugins=" + ctx.plgn().map((p) => p.name).join(",") + "--\x1B[0m\n"
        ].join("\n");
        let desc = {
          internal: {
            token: token2,
            ctx
          }
        };
        desc = __spreadProps(__spreadValues({}, Object.create(desc)), {
          message,
          code,
          details,
          meta,
          fileName: meta ? meta.fileName : void 0,
          lineNumber: token2.rI,
          columnNumber: token2.cI
        });
        return desc;
      } catch (e) {
        console.log(e);
        return {};
      }
    }
    utility.errdesc = errdesc;
    function badlex(lex, BD, ctx) {
      let next2 = lex.next.bind(lex);
      lex.next = (rule, alt, altI, tI) => {
        let token2 = next2(rule, alt, altI, tI);
        if (BD === token2.tin) {
          let details = {};
          if (null != token2.use) {
            details.use = token2.use;
          }
          throw new JsonicError(token2.why || S2.unexpected, details, token2, rule, ctx);
        }
        return token2;
      };
      return lex;
    }
    utility.badlex = badlex;
    function makelog(ctx, meta) {
      var _a, _b, _c;
      let trace = (_c = (_b = (_a = ctx.opts) === null || _a === void 0 ? void 0 : _a.plugin) === null || _b === void 0 ? void 0 : _b.debug) === null || _c === void 0 ? void 0 : _c.trace;
      if (meta || trace) {
        if ("number" === typeof (meta === null || meta === void 0 ? void 0 : meta.log) || trace) {
          let exclude_objects = false;
          let logdepth = meta === null || meta === void 0 ? void 0 : meta.log;
          if (-1 === logdepth || trace) {
            logdepth = 1;
            exclude_objects = true;
          }
          ctx.log = (...rest) => {
            if (exclude_objects) {
              let logstr = rest.filter((item) => S2.object != typeof item).map((item) => S2.function == typeof item ? item.name : item).join(S2.gap);
              ctx.cfg.debug.get_console().log(logstr);
            } else {
              ctx.cfg.debug.get_console().dir(rest, { depth: logdepth });
            }
            return void 0;
          };
        } else if ("function" === typeof meta.log) {
          ctx.log = meta.log;
        }
      }
      return ctx.log;
    }
    utility.makelog = makelog;
    function srcfmt(config2) {
      return "function" === typeof config2.debug.print.src ? config2.debug.print.src : (s) => {
        let out = null == s ? types_12.EMPTY : Array.isArray(s) ? JSON.stringify(s).replace(/]$/, entries(s).filter((en) => isNaN(en[0])).map((en, i) => (0 === i ? ", " : "") + en[0] + ": " + JSON.stringify(en[1])) + // Just one level of array props!
        "]") : JSON.stringify(s);
        out = out.substring(0, config2.debug.maxlen) + (config2.debug.maxlen < out.length ? "..." : types_12.EMPTY);
        return out;
      };
    }
    utility.srcfmt = srcfmt;
    function str(o, len = 44) {
      let s;
      try {
        s = "object" === typeof o ? JSON.stringify(o) : "" + o;
      } catch (e) {
        s = "" + o;
      }
      return snip(len < s.length ? s.substring(0, len - 3) + "..." : s, len);
    }
    utility.str = str;
    function snip(s, len = 5) {
      return void 0 === s ? "" : ("" + s).substring(0, len).replace(/[\r\n\t]/g, ".");
    }
    utility.snip = snip;
    function clone(class_instance) {
      return deep(Object.create(Object.getPrototypeOf(class_instance)), class_instance);
    }
    utility.clone = clone;
    function charset(...parts) {
      return null == parts ? {} : parts.filter((p) => false !== p).map((p) => "object" === typeof p ? keys(p).join(types_12.EMPTY) : p).join(types_12.EMPTY).split(types_12.EMPTY).reduce((a, c) => (a[c] = c.charCodeAt(0), a), {});
    }
    utility.charset = charset;
    function clean(o) {
      for (let p in o) {
        if (null == o[p]) {
          delete o[p];
        }
      }
      return o;
    }
    utility.clean = clean;
    function filterRules(rs, cfg) {
      let rsnames = ["open", "close"];
      for (let rsn of rsnames) {
        ;
        rs.def[rsn] = rs.def[rsn].map((as) => (as.g = "string" === typeof as.g ? (as.g || "").split(/\s*,+\s*/) : as.g || [], as)).filter((as) => cfg.rule.include.reduce((a, g) => a || null != as.g && -1 !== as.g.indexOf(g), 0 === cfg.rule.include.length)).filter((as) => cfg.rule.exclude.reduce((a, g) => a && (null == as.g || -1 === as.g.indexOf(g)), true));
      }
      return rs;
    }
    utility.filterRules = filterRules;
    function prop(obj, path, val) {
      let root = obj;
      try {
        let parts = path.split(".");
        let pn;
        for (let pI = 0; pI < parts.length; pI++) {
          pn = parts[pI];
          if (pI < parts.length - 1) {
            obj = obj[pn] = obj[pn] || {};
          }
        }
        if (void 0 !== val) {
          obj[pn] = val;
        }
        return obj[pn];
      } catch (e) {
        throw new Error("Cannot " + (void 0 === val ? "get" : "set") + " path " + path + " on object: " + str(root) + (void 0 === val ? "" : " to value: " + str(val, 22)));
      }
    }
    utility.prop = prop;
    function modlist(list, mods) {
      if (mods && list) {
        if (0 < list.length) {
          if (mods.delete && 0 < mods.delete.length) {
            for (let i = 0; i < mods.delete.length; i++) {
              let mdI = mods.delete[i];
              if (mdI < 0 ? -1 * mdI <= list.length : mdI < list.length) {
                let dI = (list.length + mdI) % list.length;
                list[dI] = null;
              }
            }
          }
          if (mods.move) {
            for (let i = 0; i < mods.move.length; i += 2) {
              let fromI = (list.length + mods.move[i]) % list.length;
              let toI = (list.length + mods.move[i + 1]) % list.length;
              let entry = list[fromI];
              list.splice(fromI, 1);
              list.splice(toI, 0, entry);
            }
          }
          let filtered = list.filter((entry) => null != entry);
          if (filtered.length !== list.length) {
            list.length = 0;
            list.push(...filtered);
          }
        }
        if (mods.custom) {
          let newlist = mods.custom(list);
          if (null != newlist) {
            list = newlist;
          }
        }
      }
      return list;
    }
    utility.modlist = modlist;
    function parserwrap(parser2) {
      return {
        start: function(src, jsonic2, meta, parent_ctx) {
          try {
            return parser2.start(src, jsonic2, meta, parent_ctx);
          } catch (ex) {
            if ("SyntaxError" === ex.name) {
              let loc = 0;
              let row = 0;
              let col = 0;
              let tsrc = types_12.EMPTY;
              let errloc = ex.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
              if (errloc) {
                tsrc = errloc[1];
                loc = parseInt(errloc[2]);
                row = src.substring(0, loc).replace(/[^\n]/g, types_12.EMPTY).length;
                let cI = loc - 1;
                while (-1 < cI && "\n" !== src.charAt(cI))
                  cI--;
                col = Math.max(src.substring(cI, loc).length, 0);
              }
              let token2 = ex.token || (0, lexer_12.makeToken)(
                "#UK",
                // tokenize('#UK', jsonic.config),
                tokenize2("#UK", jsonic2.internal().config),
                void 0,
                tsrc,
                (0, lexer_12.makePoint)(tsrc.length, loc, ex.lineNumber || row, ex.columnNumber || col)
              );
              throw new JsonicError(
                ex.code || "json",
                ex.details || {
                  msg: ex.message
                },
                token2,
                {},
                // TODO: this smells
                ex.ctx || {
                  uI: -1,
                  opts: jsonic2.options,
                  cfg: jsonic2.internal().config,
                  token: token2,
                  meta,
                  src: () => src,
                  root: () => void 0,
                  plgn: () => jsonic2.internal().plugins,
                  inst: () => jsonic2,
                  rule: { name: "no-rule" },
                  sub: {},
                  xs: -1,
                  v2: token2,
                  v1: token2,
                  t0: token2,
                  t1: token2,
                  tC: -1,
                  kI: -1,
                  rs: [],
                  rsI: 0,
                  rsm: {},
                  n: {},
                  log: meta ? meta.log : void 0,
                  F: srcfmt(jsonic2.internal().config),
                  u: {},
                  NORULE: { name: "no-rule" },
                  NOTOKEN: { name: "no-token" }
                }
              );
            } else {
              throw ex;
            }
          }
        }
      };
    }
    utility.parserwrap = parserwrap;
    return utility;
  }
  var defaults$1 = {};
  "use strict";
  Object.defineProperty(defaults$1, "__esModule", { value: true });
  var defaults_2 = defaults$1.defaults = void 0;
  const lexer_1 = requireLexer();
  const defaults = {
    // Prevent prototype pollution
    safe: {
      key: true
    },
    // Default tag - set your own!
    tag: "-",
    // Fixed token lexing.
    fixed: {
      // Recognize fixed tokens in the Lexer.
      lex: true,
      // Token names.
      token: {
        "#OB": "{",
        "#CB": "}",
        "#OS": "[",
        "#CS": "]",
        "#CL": ":",
        "#CA": ","
      }
    },
    match: {
      lex: true,
      token: {}
    },
    // Token sets.
    tokenSet: {
      IGNORE: ["#SP", "#LN", "#CM"],
      VAL: ["#TX", "#NR", "#ST", "#VL"],
      KEY: ["#TX", "#NR", "#ST", "#VL"]
    },
    // Recognize space characters in the lexer.
    space: {
      // Recognize space in the Lexer.
      lex: true,
      // Space characters are kept to a minimal set.
      // Add more from https://en.wikipedia.org/wiki/Whitespace_character as needed.
      chars: " 	"
    },
    // Line lexing.
    line: {
      // Recognize lines in the Lexer.
      lex: true,
      // Line characters.
      chars: "\r\n",
      // Increments row (aka line) counter.
      rowChars: "\n",
      // Generate separate lexer tokens for each newline.
      // Note: '\r\n' counts as one newline.
      single: false
    },
    // Text formats.
    text: {
      // Recognize text (non-quoted strings) in the Lexer.
      lex: true
    },
    // Control number formats.
    number: {
      // Recognize numbers in the Lexer.
      lex: true,
      // Recognize hex numbers (eg. 10 === 0x0a).
      hex: true,
      // Recognize octal numbers (eg. 10 === 0o12).
      oct: true,
      // Recognize ninary numbers (eg. 10 === 0b1010).
      bin: true,
      // All possible number chars. |+-|0|xob|0-9a-fA-F|.e|+-|0-9a-fA-F|
      // digital: '-1023456789._xoeEaAbBcCdDfF+',
      // Allow embedded separator. `null` to disable.
      sep: "_",
      // Exclude number strings matching this RegExp
      exclude: void 0
    },
    // Comment markers.
    // <mark-char>: true -> single line comments
    // <mark-start>: <mark-end> -> multiline comments
    comment: {
      // Recognize comments in the Lexer.
      lex: true,
      // TODO: plugin
      // Balance multiline comments.
      // balance: true,
      // Comment markers.
      def: {
        hash: { line: true, start: "#", lex: true, eatline: false },
        slash: { line: true, start: "//", lex: true, eatline: false },
        multi: {
          line: false,
          start: "/*",
          end: "*/",
          lex: true,
          eatline: false
        }
      }
    },
    // String formats.
    string: {
      // Recognize strings in the Lexer.
      lex: true,
      // Quote characters
      chars: "'\"`",
      // Multiline quote chars.
      multiChars: "`",
      // Escape character.
      escapeChar: "\\",
      // String escape chars.
      // Denoting char (follows escape char) => actual char.
      escape: {
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	",
        v: "\v",
        // These preserve standard escapes when allowUnknown=false.
        '"': '"',
        "'": "'",
        "`": "`",
        "\\": "\\",
        "/": "/"
      },
      // Allow unknown escape characters - they are copied to output: '\w' -> 'w'.
      allowUnknown: true,
      // If string lexing fails, instead of error, allow other matchers to try.
      abandon: false
    },
    // Object formats.
    map: {
      // TODO: or trigger error?
      // Later duplicates extend earlier ones, rather than replacing them.
      extend: true,
      // Custom merge function for duplicates (optional).
      // TODO: needs function signature
      merge: void 0
    },
    // Array formats.
    list: {
      // Allow arrays to have properties: `[a:9,0,1]`
      property: true
    },
    // Keyword values.
    value: {
      lex: true,
      def: {
        true: { val: true },
        false: { val: false },
        null: { val: null }
      }
    },
    // Additional text ending characters
    ender: [],
    // Plugin custom options, (namespace by plugin name).
    plugin: {},
    // Debug settings
    debug: {
      // Default console for logging.
      get_console: () => console,
      // Max length of parse value to print.
      maxlen: 99,
      // Print internal structures
      print: {
        // Print config built from options.
        config: false,
        // Custom string formatter for src and node values.
        src: void 0
      }
    },
    // Error messages.
    error: {
      unknown: "unknown error: $code",
      unexpected: "unexpected character(s): $src",
      invalid_unicode: "invalid unicode escape: $src",
      invalid_ascii: "invalid ascii escape: $src",
      unprintable: "unprintable character: $src",
      unterminated_string: "unterminated string: $src",
      unterminated_comment: "unterminated comment: $src",
      unknown_rule: "unknown rule: $rulename"
    },
    // Error hints: {error-code: hint-text}.
    hint: make_hint,
    // Lexer
    lex: {
      match: {
        match: { order: 1e6, make: lexer_1.makeMatchMatcher },
        fixed: { order: 2e6, make: lexer_1.makeFixedMatcher },
        space: { order: 3e6, make: lexer_1.makeSpaceMatcher },
        line: { order: 4e6, make: lexer_1.makeLineMatcher },
        string: { order: 5e6, make: lexer_1.makeStringMatcher },
        comment: { order: 6e6, make: lexer_1.makeCommentMatcher },
        number: { order: 7e6, make: lexer_1.makeNumberMatcher },
        text: { order: 8e6, make: lexer_1.makeTextMatcher }
      },
      // Empty string is allowed and returns undefined
      empty: true,
      emptyResult: void 0
    },
    // Parser
    parse: {
      // Plugin custom functions to prepare parser context.
      prepare: {}
    },
    // Parser rule options.
    rule: {
      // Name of the starting rule.
      start: "val",
      // Automatically close remaining structures at EOF.
      finish: true,
      // Multiplier to increase the maximum number of rule occurences.
      maxmul: 3,
      // Include only those alts with matching group tags (comma sep).
      // NOTE: applies universally, thus also for subsequent rules.
      include: "",
      // Exclude alts with matching group tags (comma sep).
      // NOTE: applies universally, thus also for subsequent rules.
      exclude: ""
    },
    // Result value options.
    result: {
      // Fail if result matches any of these.
      fail: []
    },
    // Configuration options.
    config: {
      // Configuration modifiers.
      modify: {}
    },
    // Provide a custom parser.
    parser: {
      start: void 0
    }
  };
  defaults_2 = defaults$1.defaults = defaults;
  function make_hint(d = (t, r2 = "replace") => t[r2](/[A-Z]/g, (m) => " " + m.toLowerCase())[r2](/[~%][a-z]/g, (m) => ("~" == m[0] ? " " : "") + m[1].toUpperCase()), s = "~sinceTheErrorIsUnknown,ThisIsProbablyABugInsideJsonic\nitself,OrAPlugin.~pleaseConsiderPostingAGithubIssue -Thanks!\n\n~code: $code,~details: \n$details|~theCharacter(s) $srcWereNotExpectedAtThisPointAsTheyDoNot\nmatchTheExpectedSyntax,EvenUnderTheRelaxedJsonicRules.~ifIt\nisNotObviouslyWrong,TheActualSyntaxErrorMayBeElsewhere.~try\ncommentingOutLargerAreasAroundThisPointUntilYouGetNoErrors,\nthenRemoveTheCommentsInSmallSectionsUntilYouFindThe\noffendingSyntax.~n%o%t%e:~alsoCheckIfAnyPluginsYouAreUsing\nexpectDifferentSyntaxInThisCase.|~theEscapeSequence $srcDoesNotEncodeAValidUnicodeCodePoint\nnumber.~youMayNeedToValidateYourStringDataManuallyUsingTest\ncodeToSeeHow~javaScriptWillInterpretIt.~alsoConsiderThatYour\ndataMayHaveBecomeCorrupted,OrTheEscapeSequenceHasNotBeen\ngeneratedCorrectly.|~theEscapeSequence $srcDoesNotEncodeAValid~a%s%c%i%iCharacter.~you\nmayNeedToValidateYourStringDataManuallyUsingTestCodeToSee\nhow~javaScriptWillInterpretIt.~alsoConsiderThatYourDataMay\nhaveBecomeCorrupted,OrTheEscapeSequenceHasNotBeenGenerated\ncorrectly.|~stringValuesCannotContainUnprintableCharacters (characterCodes\nbelow 32).~theCharacter $srcIsUnprintable.~youMayNeedToRemove\ntheseCharactersFromYourSourceData.~alsoCheckThatItHasNot\nbecomeCorrupted.|~thisStringHasNoEndQuote.|~thisCommentIsNeverClosed.|~noRuleNamed $rulenameIsDefined.~thisIsProbablyAnErrorInThe\ngrammarOfAPlugin.".split("|")) {
    return "unknown|unexpected|invalid_unicode|invalid_ascii|unprintable|unterminated_string|unterminated_comment|unknown_rule".split("|").reduce((a, n, i) => (a[n] = d(s[i]), a), {});
  }
  var parser$1 = {};
  var rules = {};
  "use strict";
  Object.defineProperty(rules, "__esModule", { value: true });
  var makeRuleSpec_1 = rules.makeRuleSpec = makeNoRule_1 = rules.makeNoRule = makeRule_1 = rules.makeRule = void 0;
  const types_1 = types;
  const utility_1 = requireUtility();
  class RuleImpl {
    constructor(spec, ctx, node2) {
      this.i = -1;
      this.name = types_1.EMPTY;
      this.node = null;
      this.state = types_1.OPEN;
      this.n = /* @__PURE__ */ Object.create(null);
      this.d = -1;
      this.u = /* @__PURE__ */ Object.create(null);
      this.k = /* @__PURE__ */ Object.create(null);
      this.bo = false;
      this.ao = false;
      this.bc = false;
      this.ac = false;
      this.os = 0;
      this.cs = 0;
      this.need = 0;
      this.i = ctx.uI++;
      this.name = spec.name;
      this.spec = spec;
      this.child = ctx.NORULE;
      this.parent = ctx.NORULE;
      this.prev = ctx.NORULE;
      this.o0 = ctx.NOTOKEN;
      this.o1 = ctx.NOTOKEN;
      this.c0 = ctx.NOTOKEN;
      this.c1 = ctx.NOTOKEN;
      this.node = node2;
      this.d = ctx.rsI;
      this.bo = null != spec.def.bo;
      this.ao = null != spec.def.ao;
      this.bc = null != spec.def.bc;
      this.ac = null != spec.def.ac;
    }
    process(ctx, lex) {
      let rule = this.spec.process(this, ctx, lex, this.state);
      return rule;
    }
    eq(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value === limit;
    }
    lt(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value < limit;
    }
    gt(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value > limit;
    }
    lte(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value <= limit;
    }
    gte(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value >= limit;
    }
    toString() {
      return "[Rule " + this.name + "~" + this.i + "]";
    }
  }
  const makeRule = (...params) => new RuleImpl(...params);
  var makeRule_1 = rules.makeRule = makeRule;
  const makeNoRule = (ctx) => makeRule(makeRuleSpec(ctx.cfg, {}), ctx);
  var makeNoRule_1 = rules.makeNoRule = makeNoRule;
  class AltMatchImpl {
    constructor() {
      this.p = types_1.EMPTY;
      this.r = types_1.EMPTY;
      this.b = 0;
    }
  }
  const makeAltMatch = (...params) => new AltMatchImpl(...params);
  const PALT = makeAltMatch();
  const EMPTY_ALT = makeAltMatch();
  class RuleSpecImpl {
    // TODO: is def param used?
    constructor(cfg, def) {
      this.name = types_1.EMPTY;
      this.def = {
        open: [],
        close: [],
        bo: [],
        bc: [],
        ao: [],
        ac: [],
        tcol: []
      };
      this.cfg = cfg;
      this.def = Object.assign(this.def, def);
      this.def.open = (this.def.open || []).filter((alt) => null != alt);
      this.def.close = (this.def.close || []).filter((alt) => null != alt);
      for (let alt of [...this.def.open, ...this.def.close]) {
        normalt(alt);
      }
    }
    // Convenience access to token Tins
    tin(ref) {
      return (0, utility_1.tokenize)(ref, this.cfg);
    }
    add(state, a, mods) {
      let inject = (mods === null || mods === void 0 ? void 0 : mods.append) ? "push" : "unshift";
      let aa = ((0, utility_1.isarr)(a) ? a : [a]).filter((alt) => null != alt && "object" === typeof alt).map((a2) => normalt(a2));
      let altState = "o" === state ? "open" : "close";
      let alts = this.def[altState];
      alts[inject](...aa);
      alts = this.def[altState] = (0, utility_1.modlist)(alts, mods);
      (0, utility_1.filterRules)(this, this.cfg);
      this.norm();
      return this;
    }
    open(a, mods) {
      return this.add("o", a, mods);
    }
    close(a, mods) {
      return this.add("c", a, mods);
    }
    action(append2, step, state, action) {
      let actions = this.def[step + state];
      if (append2) {
        actions.push(action);
      } else {
        actions.unshift(action);
      }
      return this;
    }
    bo(append2, action) {
      return this.action(action ? !!append2 : true, types_1.BEFORE, types_1.OPEN, action || append2);
    }
    ao(append2, action) {
      return this.action(action ? !!append2 : true, types_1.AFTER, types_1.OPEN, action || append2);
    }
    bc(first, second) {
      return this.action(second ? !!first : true, types_1.BEFORE, types_1.CLOSE, second || first);
    }
    ac(first, second) {
      return this.action(second ? !!first : true, types_1.AFTER, types_1.CLOSE, second || first);
    }
    clear() {
      this.def.open.length = 0;
      this.def.close.length = 0;
      this.def.bo.length = 0;
      this.def.ao.length = 0;
      this.def.bc.length = 0;
      this.def.ac.length = 0;
      return this;
    }
    norm() {
      this.def.open.map((alt) => normalt(alt));
      this.def.close.map((alt) => normalt(alt));
      const columns = [];
      this.def.open.reduce(...collate(0, 0, columns));
      this.def.open.reduce(...collate(0, 1, columns));
      this.def.close.reduce(...collate(1, 0, columns));
      this.def.close.reduce(...collate(1, 1, columns));
      this.def.tcol = columns;
      function collate(stateI, tokenI, columns2) {
        columns2[stateI] = columns2[stateI] || [];
        let tins = columns2[stateI][tokenI] = columns2[stateI][tokenI] || [];
        return [
          function(tins2, alt) {
            if (alt.s && alt.s[tokenI]) {
              let newtins = [...new Set(tins2.concat(alt.s[tokenI]))];
              tins2.length = 0;
              tins2.push(...newtins);
            }
            return tins2;
          },
          tins
        ];
      }
      return this;
    }
    process(rule, ctx, lex, state) {
      ctx.log && ctx.log(utility_1.S.rule, ctx, rule, lex);
      let is_open = state === "o";
      let next2 = is_open ? rule : ctx.NORULE;
      let why = is_open ? "O" : "C";
      let def = this.def;
      let alts = is_open ? def.open : def.close;
      let befores = is_open ? rule.bo ? def.bo : null : rule.bc ? def.bc : null;
      if (befores) {
        let bout = void 0;
        for (let bI = 0; bI < befores.length; bI++) {
          bout = befores[bI].call(this, rule, ctx, next2, bout);
          if ((bout === null || bout === void 0 ? void 0 : bout.isToken) && (bout === null || bout === void 0 ? void 0 : bout.err)) {
            return this.bad(bout, rule, ctx, { is_open });
          }
        }
      }
      let alt = 0 < alts.length ? parse_alts(is_open, alts, lex, rule, ctx) : EMPTY_ALT;
      if (alt.h) {
        alt = alt.h(rule, ctx, alt, next2) || alt;
        why += "H";
      }
      if (alt.e) {
        return this.bad(alt.e, rule, ctx, { is_open });
      }
      if (alt.n) {
        for (let cn in alt.n) {
          rule.n[cn] = // 0 reverts counter to 0.
          0 === alt.n[cn] ? 0 : (
            // First seen, set to 0.
            (null == rule.n[cn] ? 0 : (
              // Increment counter.
              rule.n[cn]
            )) + alt.n[cn]
          );
        }
      }
      if (alt.u) {
        rule.u = Object.assign(rule.u, alt.u);
      }
      if (alt.k) {
        rule.k = Object.assign(rule.k, alt.k);
      }
      if (alt.a) {
        why += "A";
        let tout = alt.a(rule, ctx, alt);
        if (tout && tout.isToken && tout.err) {
          return this.bad(tout, rule, ctx, { is_open });
        }
      }
      if (alt.p) {
        ctx.rs[ctx.rsI++] = rule;
        let rulespec = ctx.rsm[alt.p];
        if (rulespec) {
          next2 = rule.child = makeRule(rulespec, ctx, rule.node);
          next2.parent = rule;
          next2.n = __spreadValues({}, rule.n);
          if (0 < Object.keys(rule.k).length) {
            next2.k = __spreadValues({}, rule.k);
          }
          why += "P`" + alt.p + "`";
        } else
          return this.bad(this.unknownRule(ctx.t0, alt.p), rule, ctx, { is_open });
      } else if (alt.r) {
        let rulespec = ctx.rsm[alt.r];
        if (rulespec) {
          next2 = makeRule(rulespec, ctx, rule.node);
          next2.parent = rule.parent;
          next2.prev = rule;
          next2.n = __spreadValues({}, rule.n);
          if (0 < Object.keys(rule.k).length) {
            next2.k = __spreadValues({}, rule.k);
          }
          why += "R`" + alt.r + "`";
        } else
          return this.bad(this.unknownRule(ctx.t0, alt.r), rule, ctx, { is_open });
      } else if (!is_open) {
        next2 = ctx.rs[--ctx.rsI] || ctx.NORULE;
      }
      let afters = is_open ? rule.ao ? def.ao : null : rule.ac ? def.ac : null;
      if (afters) {
        let aout = void 0;
        for (let aI = 0; aI < afters.length; aI++) {
          aout = afters[aI](rule, ctx, next2, aout);
          if ((aout === null || aout === void 0 ? void 0 : aout.isToken) && (aout === null || aout === void 0 ? void 0 : aout.err)) {
            return this.bad(aout, rule, ctx, { is_open });
          }
        }
      }
      next2.why = why;
      ctx.log && ctx.log(utility_1.S.node, ctx, rule, lex, next2);
      if (types_1.OPEN === rule.state) {
        rule.state = types_1.CLOSE;
      }
      let consumed = rule[is_open ? "os" : "cs"] - (alt.b || 0);
      if (1 === consumed) {
        ctx.v2 = ctx.v1;
        ctx.v1 = ctx.t0;
        ctx.t0 = ctx.t1;
        ctx.t1 = ctx.NOTOKEN;
      } else if (2 == consumed) {
        ctx.v2 = ctx.t1;
        ctx.v1 = ctx.t0;
        ctx.t0 = ctx.NOTOKEN;
        ctx.t1 = ctx.NOTOKEN;
      }
      return next2;
    }
    bad(tkn, rule, ctx, parse2) {
      throw new utility_1.JsonicError(tkn.err || utility_1.S.unexpected, __spreadProps(__spreadValues({}, tkn.use), {
        state: parse2.is_open ? utility_1.S.open : utility_1.S.close
      }), tkn, rule, ctx);
    }
    unknownRule(tkn, name) {
      tkn.err = "unknown_rule";
      tkn.use = tkn.use || {};
      tkn.use.rulename = name;
      return tkn;
    }
  }
  const makeRuleSpec = (...params) => new RuleSpecImpl(...params);
  makeRuleSpec_1 = rules.makeRuleSpec = makeRuleSpec;
  function parse_alts(is_open, alts, lex, rule, ctx) {
    let out = PALT;
    out.b = 0;
    out.p = types_1.EMPTY;
    out.r = types_1.EMPTY;
    out.n = void 0;
    out.h = void 0;
    out.a = void 0;
    out.u = void 0;
    out.k = void 0;
    out.e = void 0;
    let alt = null;
    let altI = 0;
    let t = ctx.cfg.t;
    let cond = true;
    let bitAA = 1 << t.AA - 1;
    let IGNORE = ctx.cfg.tokenSetTins.IGNORE;
    function next2(r2, alt2, altI2, tI) {
      let tkn;
      do {
        tkn = lex.next(r2, alt2, altI2, tI);
        ctx.tC++;
      } while (IGNORE[tkn.tin]);
      return tkn;
    }
    let len = alts.length;
    for (altI = 0; altI < len; altI++) {
      alt = alts[altI];
      let has0 = false;
      let has1 = false;
      cond = true;
      if (alt.S0) {
        let tin0 = (ctx.t0 = ctx.NOTOKEN !== ctx.t0 ? ctx.t0 : ctx.t0 = next2(rule, alt, altI, 0)).tin;
        has0 = true;
        cond = !!(alt.S0[tin0 / 31 | 0] & (1 << tin0 % 31 - 1 | bitAA));
        if (cond) {
          has1 = null != alt.S1;
          if (alt.S1) {
            let tin1 = (ctx.t1 = ctx.NOTOKEN !== ctx.t1 ? ctx.t1 : ctx.t1 = next2(rule, alt, altI, 1)).tin;
            has1 = true;
            cond = !!(alt.S1[tin1 / 31 | 0] & (1 << tin1 % 31 - 1 | bitAA));
          }
        }
      }
      if (is_open) {
        rule.o0 = has0 ? ctx.t0 : ctx.NOTOKEN;
        rule.o1 = has1 ? ctx.t1 : ctx.NOTOKEN;
        rule.os = (has0 ? 1 : 0) + (has1 ? 1 : 0);
      } else {
        rule.c0 = has0 ? ctx.t0 : ctx.NOTOKEN;
        rule.c1 = has1 ? ctx.t1 : ctx.NOTOKEN;
        rule.cs = (has0 ? 1 : 0) + (has1 ? 1 : 0);
      }
      if (cond && alt.c) {
        cond = cond && alt.c(rule, ctx, out);
      }
      if (cond) {
        break;
      } else {
        alt = null;
      }
    }
    if (!cond) {
      out.e = ctx.t0;
    }
    if (alt) {
      out.n = null != alt.n ? alt.n : out.n;
      out.h = null != alt.h ? alt.h : out.h;
      out.a = null != alt.a ? alt.a : out.a;
      out.u = null != alt.u ? alt.u : out.u;
      out.k = null != alt.k ? alt.k : out.k;
      out.g = null != alt.g ? alt.g : out.g;
      out.e = alt.e && alt.e(rule, ctx, out) || void 0;
      out.p = null != alt.p && false !== alt.p ? "string" === typeof alt.p ? alt.p : alt.p(rule, ctx, out) : out.p;
      out.r = null != alt.r && false !== alt.r ? "string" === typeof alt.r ? alt.r : alt.r(rule, ctx, out) : out.r;
      out.b = null != alt.b && false !== alt.b ? "number" === typeof alt.b ? alt.b : alt.b(rule, ctx, out) : out.b;
    }
    let match2 = altI < alts.length;
    ctx.log && ctx.log(utility_1.S.parse, ctx, rule, lex, match2, cond, altI, alt, out);
    return out;
  }
  function normalt(a) {
    if (types_1.STRING === typeof a.g) {
      a.g = a.g.split(/\s*,\s*/);
    } else if (null == a.g) {
      a.g = [];
    }
    a.g = a.g.sort();
    if (!a.s || 0 === a.s.length) {
      a.s = null;
    } else {
      const tinsify = (s) => s.flat().filter((tin) => "number" === typeof tin);
      const partify = (tins, part) => tins.filter((tin) => 31 * part <= tin && tin < 31 * (part + 1));
      const bitify = (s, part) => s.reduce((bits, tin) => 1 << tin - (31 * part + 1) | bits, 0);
      const tins0 = tinsify([a.s[0]]);
      const tins1 = tinsify([a.s[1]]);
      const aa = a;
      aa.S0 = 0 < tins0.length ? new Array(Math.max(...tins0.map((tin) => 1 + tin / 31 | 0))).fill(null).map((_2, i) => i).map((part) => bitify(partify(tins0, part), part)) : null;
      aa.S1 = 0 < tins1.length ? new Array(Math.max(...tins1.map((tin) => 1 + tin / 31 | 0))).fill(null).map((_2, i) => i).map((part) => bitify(partify(tins1, part), part)) : null;
    }
    if (!a.p) {
      a.p = null;
    }
    if (!a.r) {
      a.r = null;
    }
    if (!a.b) {
      a.b = null;
    }
    return a;
  }
  (function(exports3) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", { value: true });
    exports3.makeParser = exports3.makeRuleSpec = exports3.makeRule = void 0;
    const types_12 = types;
    const utility_12 = requireUtility();
    const lexer_12 = requireLexer();
    const rules_1 = rules;
    Object.defineProperty(exports3, "makeRule", { enumerable: true, get: function() {
      return rules_1.makeRule;
    } });
    Object.defineProperty(exports3, "makeRuleSpec", { enumerable: true, get: function() {
      return rules_1.makeRuleSpec;
    } });
    class ParserImpl {
      constructor(options, cfg) {
        this.rsm = {};
        this.options = options;
        this.cfg = cfg;
      }
      // TODO: ensure chains properly, both for create and extend rule
      // Multi-functional get/set for rules.
      rule(name, define2) {
        if (null == name) {
          return this.rsm;
        }
        let rs = this.rsm[name];
        if (null === define2) {
          delete this.rsm[name];
        } else if (void 0 !== define2) {
          rs = this.rsm[name] = this.rsm[name] || (0, rules_1.makeRuleSpec)(this.cfg, {});
          rs = this.rsm[name] = define2(this.rsm[name], this) || this.rsm[name];
          rs.name = name;
          return void 0;
        }
        return rs;
      }
      start(src, jsonic2, meta, parent_ctx) {
        let root;
        let endtkn = (0, lexer_12.makeToken)("#ZZ", (0, utility_12.tokenize)("#ZZ", this.cfg), void 0, types_12.EMPTY, (0, lexer_12.makePoint)(-1));
        let notoken = (0, lexer_12.makeNoToken)();
        let ctx = {
          uI: 0,
          opts: this.options,
          cfg: this.cfg,
          meta: meta || {},
          src: () => src,
          root: () => root,
          plgn: () => jsonic2.internal().plugins,
          inst: () => jsonic2,
          rule: {},
          sub: jsonic2.internal().sub,
          xs: -1,
          v2: endtkn,
          v1: endtkn,
          t0: notoken,
          t1: notoken,
          tC: -2,
          kI: -1,
          rs: [],
          rsI: 0,
          rsm: this.rsm,
          log: void 0,
          F: (0, utility_12.srcfmt)(this.cfg),
          u: {},
          NOTOKEN: notoken,
          NORULE: {}
        };
        ctx = (0, utility_12.deep)(ctx, parent_ctx);
        let norule = (0, rules_1.makeNoRule)(ctx);
        ctx.NORULE = norule;
        ctx.rule = norule;
        if (meta && utility_12.S.function === typeof meta.log) {
          ctx.log = meta.log;
        }
        this.cfg.parse.prepare.forEach((prep) => prep(jsonic2, ctx, meta));
        if ("" === src) {
          if (this.cfg.lex.empty) {
            return this.cfg.lex.emptyResult;
          } else {
            throw new utility_12.JsonicError(utility_12.S.unexpected, { src }, ctx.t0, norule, ctx);
          }
        }
        let lex = (0, utility_12.badlex)((0, lexer_12.makeLex)(ctx), (0, utility_12.tokenize)("#BD", this.cfg), ctx);
        let startspec = this.rsm[this.cfg.rule.start];
        if (null == startspec) {
          return void 0;
        }
        let rule = (0, rules_1.makeRule)(startspec, ctx);
        root = rule;
        let maxr = 2 * (0, utility_12.keys)(this.rsm).length * lex.src.length * 2 * ctx.cfg.rule.maxmul;
        let kI = 0;
        while (norule !== rule && kI < maxr) {
          ctx.kI = kI;
          ctx.rule = rule;
          ctx.log && ctx.log("", ctx.kI + ":");
          if (ctx.sub.rule) {
            ctx.sub.rule.map((sub) => sub(rule, ctx));
          }
          rule = rule.process(ctx, lex);
          ctx.log && ctx.log(utility_12.S.stack, ctx, rule, lex);
          kI++;
        }
        if (endtkn.tin !== lex.next(rule).tin) {
          throw new utility_12.JsonicError(utility_12.S.unexpected, {}, ctx.t0, norule, ctx);
        }
        const result = ctx.root().node;
        if (this.cfg.result.fail.includes(result)) {
          throw new utility_12.JsonicError(utility_12.S.unexpected, {}, ctx.t0, norule, ctx);
        }
        return result;
      }
      clone(options, config2) {
        let parser2 = new ParserImpl(options, config2);
        parser2.rsm = Object.keys(this.rsm).reduce((a, rn) => (a[rn] = (0, utility_12.filterRules)(this.rsm[rn], this.cfg), a), {});
        parser2.norm();
        return parser2;
      }
      norm() {
        (0, utility_12.values)(this.rsm).map((rs) => rs.norm());
      }
    }
    const makeParser = (...params) => new ParserImpl(...params);
    exports3.makeParser = makeParser;
  })(parser$1);
  const parser = /* @__PURE__ */ getDefaultExportFromCjs(parser$1);
  var grammar$1 = {};
  "use strict";
  Object.defineProperty(grammar$1, "__esModule", { value: true });
  var makeJSON_1 = grammar$1.makeJSON = grammar_2 = grammar$1.grammar = void 0;
  function grammar(jsonic2) {
    const { deep } = jsonic2.util;
    const {
      // Fixed tokens
      OB,
      // Open Brace `{`
      CB,
      // Close Brace `}`
      OS,
      // Open Square `[`
      CS,
      // Close Square `]`
      CL,
      // Colon `:`
      CA,
      // Comma `,`
      // Complex tokens
      TX,
      // Text (unquoted character sequence)
      ST,
      // String (quoted character sequence)
      // Control tokens
      ZZ
      // End-of-source
    } = jsonic2.token;
    const {
      VAL,
      // All tokens that make up values
      KEY
      // All tokens that make up keys
    } = jsonic2.tokenSet;
    const finish = (_rule, ctx) => {
      if (!ctx.cfg.rule.finish) {
        ctx.t0.src = "END_OF_SOURCE";
        return ctx.t0;
      }
    };
    const pairkey = (r2) => {
      const key_token = r2.o0;
      const key = ST === key_token.tin || TX === key_token.tin ? key_token.val : key_token.src;
      r2.u.key = key;
    };
    jsonic2.rule("val", (rs) => {
      rs.bo((rule) => rule.node = void 0).open([
        // A map: `{ ...`
        { s: [OB], p: "map", b: 1, g: "map,json" },
        // A list: `[ ...`
        { s: [OS], p: "list", b: 1, g: "list,json" },
        // A plain value: `x` `"x"` `1` `true` ....
        { s: [VAL], g: "val,json" }
      ]).close([
        // End of input.
        { s: [ZZ], g: "end,json" },
        // There's more JSON.
        { b: 1, g: "more,json" }
      ]).bc((r2, ctx) => {
        r2.node = // If there's no node,
        void 0 === r2.node ? (
          // ... or no child node (child map or list),
          void 0 === r2.child.node ? (
            // ... or no matched tokens,
            0 === r2.os ? (
              // ... then the node has no value
              void 0
            ) : (
              // .. otherwise use the token value
              r2.o0.resolveVal(r2, ctx)
            )
          ) : r2.child.node
        ) : r2.node;
      });
    });
    jsonic2.rule("map", (rs) => {
      rs.bo((r2) => {
        r2.node = /* @__PURE__ */ Object.create(null);
      }).open([
        // An empty map: {}.
        { s: [OB, CB], b: 1, n: { pk: 0 }, g: "map,json" },
        // Start matching map key-value pairs: a:1.
        // Reset counter n.pk as new map (for extensions).
        { s: [OB], p: "pair", n: { pk: 0 }, g: "map,json,pair" }
      ]).close([
        // End of map.
        { s: [CB], g: "end,json" }
      ]);
    });
    jsonic2.rule("list", (rs) => {
      rs.bo((r2) => {
        r2.node = [];
      }).open([
        // An empty list: [].
        { s: [OS, CS], b: 1, g: "list,json" },
        // Start matching list elements: 1,2.
        { s: [OS], p: "elem", g: "list,elem,json" }
      ]).close([
        // End of map.
        { s: [CS], g: "end,json" }
      ]);
    });
    jsonic2.rule("pair", (rs) => {
      rs.open([
        // Match key-colon start of pair. Marker `pair=true` allows flexibility.
        {
          s: [KEY, CL],
          p: "val",
          u: { pair: true },
          a: pairkey,
          g: "map,pair,key,json"
        }
      ]).bc((r2, _ctx) => {
        if (r2.u.pair) {
          r2.u.prev = r2.node[r2.u.key];
          r2.node[r2.u.key] = r2.child.node;
        }
      }).close([
        // Comma means a new pair at same pair-key level.
        { s: [CA], r: "pair", g: "map,pair,json" },
        // End of map.
        { s: [CB], b: 1, g: "map,pair,json" }
      ]);
    });
    jsonic2.rule("elem", (rs) => {
      rs.open([
        // List elements are values.
        { p: "val", g: "list,elem,val,json" }
      ]).bc((r2) => {
        if (true !== r2.u.done) {
          r2.node.push(r2.child.node);
        }
      }).close([
        // Next element.
        { s: [CA], r: "elem", g: "list,elem,json" },
        // End of list.
        { s: [CS], b: 1, g: "list,elem,json" }
      ]);
    });
    const pairval = (r2, ctx) => {
      let key = r2.u.key;
      let val = r2.child.node;
      const prev2 = r2.u.prev;
      val = void 0 === val ? null : val;
      if (r2.u.list && ctx.cfg.safe.key) {
        if ("__proto__" === key || "constructor" === key) {
          return;
        }
      }
      r2.node[key] = null == prev2 ? val : ctx.cfg.map.merge ? ctx.cfg.map.merge(prev2, val, r2, ctx) : ctx.cfg.map.extend ? deep(prev2, val) : val;
    };
    jsonic2.rule("val", (rs) => {
      rs.open([
        // A pair key: `a: ...`
        // Increment counter n.pk to indicate pair-key state (for extensions).
        {
          s: [KEY, CL],
          p: "map",
          b: 2,
          n: { pk: 1 },
          g: "pair,jsonic"
        },
        // A plain value: `x` `"x"` `1` `true` ....
        { s: [VAL], g: "val,json" },
        // Implicit ends `{a:}` -> {"a":null}, `[a:]` -> [{"a":null}]
        {
          s: [[CB, CS]],
          b: 1,
          c: (r2) => 0 < r2.d,
          g: "val,imp,null,jsonic"
        },
        // Implicit list at top level: a,b.
        {
          s: [CA],
          c: (r2) => 0 === r2.d,
          // c: { n: { dlist: 0 } },
          p: "list",
          b: 1,
          g: "list,imp,jsonic"
        },
        // Value is implicitly null when empty before commas.
        { s: [CA], b: 1, g: "list,val,imp,null,jsonic" },
        { s: [ZZ], g: "jsonic" }
      ], { append: true, delete: [2] }).close([
        // Explicitly close map or list: `}`, `]`
        {
          s: [[CB, CS]],
          b: 1,
          g: "val,json,close",
          e: (r2, c) => 0 === r2.d ? c.t0 : void 0
        },
        // Implicit list (comma sep) only allowed at top level: `1,2`.
        {
          s: [CA],
          // c: { n: { dlist: 0, dmap: 0 } },
          c: (r2) => r2.lte("dlist") && r2.lte("dmap"),
          r: "list",
          u: { implist: true },
          g: "list,val,imp,comma,jsonic"
        },
        // Implicit list (space sep) only allowed at top level: `1 2`.
        {
          // c: { n: { dlist: 0, dmap: 0 } },
          c: (r2) => r2.lte("dlist") && r2.lte("dmap"),
          r: "list",
          u: { implist: true },
          g: "list,val,imp,space,jsonic",
          b: 1
        },
        { s: [ZZ], g: "jsonic" }
      ], {
        append: true,
        // Move "There's more JSON" to end.
        move: [1, -1]
      });
    });
    jsonic2.rule("map", (rs) => {
      rs.bo((r2) => {
        r2.n.dmap = 1 + (r2.n.dmap ? r2.n.dmap : 0);
      }).open([
        // Auto-close; fail if rule.finish option is false.
        { s: [OB, ZZ], b: 1, e: finish, g: "end,jsonic" }
      ]).open([
        // Pair from implicit map.
        { s: [KEY, CL], p: "pair", b: 2, g: "pair,list,val,imp,jsonic" }
      ], { append: true }).close([
        // Normal end of map, no path dive.
        {
          s: [CB],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          g: "end,json"
        },
        // Not yet at end of path dive, keep ascending.
        { s: [CB], b: 1, g: "path,jsonic" },
        // End of implicit path
        { s: [[CA, CS, ...VAL]], b: 1, g: "end,path,jsonic" },
        // Auto-close; fail if rule.finish option is false.
        { s: [ZZ], e: finish, g: "end,jsonic" }
      ], { append: true, delete: [0] });
    });
    jsonic2.rule("list", (rs) => {
      rs.bo((r2) => {
        r2.n.dlist = 1 + (r2.n.dlist ? r2.n.dlist : 0);
        if (r2.prev.u.implist) {
          r2.node.push(r2.prev.node);
          r2.prev.node = r2.node;
        }
      }).open({
        c: (r2) => r2.prev.u.implist,
        p: "elem"
      }).open([
        // Initial comma [, will insert null as [null,
        { s: [CA], p: "elem", b: 1, g: "list,elem,val,imp,jsonic" },
        // Another element.
        { p: "elem", g: "list,elem.jsonic" }
      ], { append: true }).close([
        // Fail if rule.finish option is false.
        { s: [ZZ], e: finish, g: "end,jsonic" }
      ], { append: true });
    });
    jsonic2.rule("pair", (rs, _p) => {
      rs.open([
        // Ignore initial comma: {,a:1.
        { s: [CA], g: "map,pair,comma,jsonic" }
      ], { append: true }).bc((r2, ctx) => {
        if (r2.u.pair) {
          pairval(r2, ctx);
        }
      }).close([
        // End of map, reset implicit depth counter so that
        // a:b:c:1,d:2 -> {a:{b:{c:1}},d:2}
        {
          s: [CB],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          b: 1,
          g: "map,pair,json"
        },
        // Ignore trailing comma at end of map.
        {
          s: [CA, CB],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          b: 1,
          g: "map,pair,comma,jsonic"
        },
        { s: [CA, ZZ], g: "end,jsonic" },
        // Comma means a new pair at same pair-key level.
        {
          s: [CA],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          r: "pair",
          g: "map,pair,json"
        },
        // TODO: try CA VAL ? works anywhere?
        // Comma means a new pair if implicit top level map.
        {
          s: [CA],
          // c: { n: { dmap: 1 } },
          c: (r2) => r2.lte("dmap", 1),
          r: "pair",
          g: "map,pair,jsonic"
        },
        // TODO: try VAL CL ? works anywhere?
        // Value means a new pair if implicit top level map.
        {
          // s: [VAL],
          s: [KEY],
          // c: { n: { dmap: 1 } },
          c: (r2) => r2.lte("dmap", 1),
          r: "pair",
          b: 1,
          g: "map,pair,imp,jsonic"
        },
        // End of implicit path (eg. a:b:1), keep closing until pk=0.
        {
          s: [[CB, CA, CS, ...KEY]],
          c: (r2) => 0 < r2.n.pk,
          b: 1,
          g: "map,pair,imp,path,jsonic"
        },
        // Can't close a map with `]`
        { s: [CS], e: (r2) => r2.c0, g: "end,jsonic" },
        // Fail if auto-close option is false.
        { s: [ZZ], e: finish, g: "map,pair,json" },
        // Who needs commas anyway?
        {
          r: "pair",
          b: 1,
          g: "map,pair,imp,jsonic"
        }
      ], { append: true, delete: [0, 1] });
    });
    jsonic2.rule("elem", (rs, p) => {
      rs.open([
        // Empty commas insert null elements.
        // Note that close consumes a comma, so b:2 works.
        {
          s: [CA, CA],
          b: 2,
          u: { done: true },
          a: (r2) => r2.node.push(null),
          g: "list,elem,imp,null,jsonic"
        },
        {
          s: [CA],
          u: { done: true },
          a: (r2) => r2.node.push(null),
          g: "list,elem,imp,null,jsonic"
        },
        {
          s: [KEY, CL],
          e: p.cfg.list.property ? void 0 : (_r, ctx) => ctx.t0,
          p: "val",
          n: { pk: 1, dmap: 1 },
          u: { done: true, pair: true, list: true },
          a: pairkey,
          g: "elem,pair,jsonic"
        }
      ]).bc((r2, ctx) => {
        if (true === r2.u.pair) {
          r2.u.prev = r2.node[r2.u.key];
          pairval(r2, ctx);
        }
      }).close([
        // Ignore trailing comma.
        { s: [CA, [CS, ZZ]], b: 1, g: "list,elem,comma,jsonic" },
        // Next element.
        { s: [CA], r: "elem", g: "list,elem,json" },
        // End of list.
        { s: [CS], b: 1, g: "list,elem,json" },
        // Fail if auto-close option is false.
        { s: [ZZ], e: finish, g: "list,elem,json" },
        // Can't close a list with `}`
        { s: [CB], e: (r2) => r2.c0, g: "end,jsonic" },
        // Who needs commas anyway?
        { r: "elem", b: 1, g: "list,elem,imp,jsonic" }
      ], { delete: [-1, -2] });
    });
  }
  var grammar_2 = grammar$1.grammar = grammar;
  function makeJSON(jsonic2) {
    let justJSON = jsonic2.make({
      grammar$: false,
      text: { lex: false },
      number: {
        hex: false,
        oct: false,
        bin: false,
        sep: null,
        exclude: /^00+/
      },
      string: {
        chars: '"',
        multiChars: "",
        allowUnknown: false,
        escape: { v: null }
      },
      comment: { lex: false },
      map: { extend: false },
      lex: { empty: false },
      rule: { finish: false, include: "json" },
      result: { fail: [void 0, NaN] },
      tokenSet: {
        KEY: ["#ST", null, null, null]
      }
    });
    grammar(justJSON);
    return justJSON;
  }
  makeJSON_1 = grammar$1.makeJSON = makeJSON;
  var jsonic = jsonic$1.exports;
  (function(module2, exports3) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", { value: true });
    exports3.root = exports3.S = exports3.EMPTY = exports3.AFTER = exports3.BEFORE = exports3.CLOSE = exports3.OPEN = exports3.makeTextMatcher = exports3.makeNumberMatcher = exports3.makeCommentMatcher = exports3.makeStringMatcher = exports3.makeLineMatcher = exports3.makeSpaceMatcher = exports3.makeFixedMatcher = exports3.makeParser = exports3.makeLex = exports3.makeRuleSpec = exports3.makeRule = exports3.makePoint = exports3.makeToken = exports3.make = exports3.util = exports3.JsonicError = exports3.Jsonic = void 0;
    const types_12 = types;
    Object.defineProperty(exports3, "OPEN", { enumerable: true, get: function() {
      return types_12.OPEN;
    } });
    Object.defineProperty(exports3, "CLOSE", { enumerable: true, get: function() {
      return types_12.CLOSE;
    } });
    Object.defineProperty(exports3, "BEFORE", { enumerable: true, get: function() {
      return types_12.BEFORE;
    } });
    Object.defineProperty(exports3, "AFTER", { enumerable: true, get: function() {
      return types_12.AFTER;
    } });
    Object.defineProperty(exports3, "EMPTY", { enumerable: true, get: function() {
      return types_12.EMPTY;
    } });
    const utility_12 = requireUtility();
    Object.defineProperty(exports3, "JsonicError", { enumerable: true, get: function() {
      return utility_12.JsonicError;
    } });
    Object.defineProperty(exports3, "S", { enumerable: true, get: function() {
      return utility_12.S;
    } });
    const defaults_1 = defaults$1;
    const lexer_12 = requireLexer();
    Object.defineProperty(exports3, "makePoint", { enumerable: true, get: function() {
      return lexer_12.makePoint;
    } });
    Object.defineProperty(exports3, "makeToken", { enumerable: true, get: function() {
      return lexer_12.makeToken;
    } });
    Object.defineProperty(exports3, "makeLex", { enumerable: true, get: function() {
      return lexer_12.makeLex;
    } });
    Object.defineProperty(exports3, "makeFixedMatcher", { enumerable: true, get: function() {
      return lexer_12.makeFixedMatcher;
    } });
    Object.defineProperty(exports3, "makeSpaceMatcher", { enumerable: true, get: function() {
      return lexer_12.makeSpaceMatcher;
    } });
    Object.defineProperty(exports3, "makeLineMatcher", { enumerable: true, get: function() {
      return lexer_12.makeLineMatcher;
    } });
    Object.defineProperty(exports3, "makeStringMatcher", { enumerable: true, get: function() {
      return lexer_12.makeStringMatcher;
    } });
    Object.defineProperty(exports3, "makeCommentMatcher", { enumerable: true, get: function() {
      return lexer_12.makeCommentMatcher;
    } });
    Object.defineProperty(exports3, "makeNumberMatcher", { enumerable: true, get: function() {
      return lexer_12.makeNumberMatcher;
    } });
    Object.defineProperty(exports3, "makeTextMatcher", { enumerable: true, get: function() {
      return lexer_12.makeTextMatcher;
    } });
    const parser_1 = parser$1;
    Object.defineProperty(exports3, "makeRule", { enumerable: true, get: function() {
      return parser_1.makeRule;
    } });
    Object.defineProperty(exports3, "makeRuleSpec", { enumerable: true, get: function() {
      return parser_1.makeRuleSpec;
    } });
    Object.defineProperty(exports3, "makeParser", { enumerable: true, get: function() {
      return parser_1.makeParser;
    } });
    const grammar_1 = grammar$1;
    const util2 = {
      tokenize: utility_12.tokenize,
      srcfmt: utility_12.srcfmt,
      clone: utility_12.clone,
      charset: utility_12.charset,
      trimstk: utility_12.trimstk,
      makelog: utility_12.makelog,
      badlex: utility_12.badlex,
      extract: utility_12.extract,
      errinject: utility_12.errinject,
      errdesc: utility_12.errdesc,
      configure: utility_12.configure,
      parserwrap: utility_12.parserwrap,
      mesc: utility_12.mesc,
      escre: utility_12.escre,
      regexp: utility_12.regexp,
      prop: utility_12.prop,
      str: utility_12.str,
      clean: utility_12.clean,
      // TODO: validated to include in util API:
      deep: utility_12.deep,
      omap: utility_12.omap,
      keys: utility_12.keys,
      values: utility_12.values,
      entries: utility_12.entries
    };
    exports3.util = util2;
    function make(param_options, parent) {
      let injectFullAPI = true;
      if ("jsonic" === param_options) {
        injectFullAPI = false;
      } else if ("json" === param_options) {
        return (0, grammar_1.makeJSON)(root);
      }
      param_options = "string" === typeof param_options ? {} : param_options;
      let internal = {
        parser: null,
        config: null,
        plugins: [],
        sub: {
          lex: void 0,
          rule: void 0
        },
        mark: Math.random()
      };
      let merged_options = (0, utility_12.deep)({}, parent ? __spreadValues({}, parent.options) : false === (param_options === null || param_options === void 0 ? void 0 : param_options.defaults$) ? {} : defaults_1.defaults, param_options ? param_options : {});
      let jsonic2 = function Jsonic3(src, meta, parent_ctx) {
        var _a;
        if (utility_12.S.string === typeof src) {
          let internal2 = jsonic2.internal();
          let parser2 = ((_a = options.parser) === null || _a === void 0 ? void 0 : _a.start) ? (0, utility_12.parserwrap)(options.parser) : internal2.parser;
          return parser2.start(src, jsonic2, meta, parent_ctx);
        }
        return src;
      };
      let options = (change_options) => {
        if (null != change_options && utility_12.S.object === typeof change_options) {
          (0, utility_12.deep)(merged_options, change_options);
          (0, utility_12.configure)(jsonic2, internal.config, merged_options);
          let parser2 = jsonic2.internal().parser;
          internal.parser = parser2.clone(merged_options, internal.config);
        }
        return __spreadValues({}, jsonic2.options);
      };
      let api = {
        token: (ref) => (0, utility_12.tokenize)(ref, internal.config, jsonic2),
        tokenSet: (ref) => (0, utility_12.findTokenSet)(ref, internal.config),
        fixed: (ref) => internal.config.fixed.ref[ref],
        options: (0, utility_12.deep)(options, merged_options),
        config: () => (0, utility_12.deep)(internal.config),
        parse: jsonic2,
        // TODO: how to handle null plugin?
        use: function use(plugin, plugin_options) {
          if (utility_12.S.function !== typeof plugin) {
            throw new Error("Jsonic.use: the first argument must be a function defining a plugin. See https://jsonic.senecajs.org/plugin");
          }
          const plugin_name = plugin.name.toLowerCase();
          const full_plugin_options = (0, utility_12.deep)({}, plugin.defaults || {}, plugin_options || {});
          jsonic2.options({
            plugin: {
              [plugin_name]: full_plugin_options
            }
          });
          let merged_plugin_options = jsonic2.options.plugin[plugin_name];
          jsonic2.internal().plugins.push(plugin);
          plugin.options = merged_plugin_options;
          return plugin(jsonic2, merged_plugin_options) || jsonic2;
        },
        rule: (name, define2) => {
          return jsonic2.internal().parser.rule(name, define2) || jsonic2;
        },
        make: (options2) => {
          return make(options2, jsonic2);
        },
        empty: (options2) => make(__spreadValues({
          defaults$: false,
          standard$: false,
          grammar$: false
        }, options2 || {})),
        id: "Jsonic/" + Date.now() + "/" + ("" + Math.random()).substring(2, 8).padEnd(6, "0") + (null == options.tag ? "" : "/" + options.tag),
        toString: () => {
          return api.id;
        },
        sub: (spec) => {
          if (spec.lex) {
            internal.sub.lex = internal.sub.lex || [];
            internal.sub.lex.push(spec.lex);
          }
          if (spec.rule) {
            internal.sub.rule = internal.sub.rule || [];
            internal.sub.rule.push(spec.rule);
          }
          return jsonic2;
        },
        util: util2
      };
      (0, utility_12.defprop)(api.make, utility_12.S.name, { value: utility_12.S.make });
      if (injectFullAPI) {
        (0, utility_12.assign)(jsonic2, api);
      } else {
        (0, utility_12.assign)(jsonic2, {
          empty: api.empty,
          parse: api.parse,
          sub: api.sub,
          id: api.id,
          toString: api.toString
        });
      }
      (0, utility_12.defprop)(jsonic2, "internal", { value: () => internal });
      if (parent) {
        for (let k in parent) {
          if (void 0 === jsonic2[k]) {
            jsonic2[k] = parent[k];
          }
        }
        jsonic2.parent = parent;
        let parent_internal = parent.internal();
        internal.config = (0, utility_12.deep)({}, parent_internal.config);
        (0, utility_12.configure)(jsonic2, internal.config, merged_options);
        (0, utility_12.assign)(jsonic2.token, internal.config.t);
        internal.plugins = [...parent_internal.plugins];
        internal.parser = parent_internal.parser.clone(merged_options, internal.config);
      } else {
        let rootWithAPI = __spreadValues(__spreadValues({}, jsonic2), api);
        internal.config = (0, utility_12.configure)(rootWithAPI, void 0, merged_options);
        internal.plugins = [];
        internal.parser = (0, parser_1.makeParser)(merged_options, internal.config);
        if (false !== merged_options.grammar$) {
          (0, grammar_1.grammar)(rootWithAPI);
        }
      }
      return jsonic2;
    }
    exports3.make = make;
    let root = void 0;
    exports3.root = root;
    let Jsonic2 = exports3.root = root = make("jsonic");
    exports3.Jsonic = Jsonic2;
    root.Jsonic = root;
    root.JsonicError = utility_12.JsonicError;
    root.makeLex = lexer_12.makeLex;
    root.makeParser = parser_1.makeParser;
    root.makeToken = lexer_12.makeToken;
    root.makePoint = lexer_12.makePoint;
    root.makeRule = parser_1.makeRule;
    root.makeRuleSpec = parser_1.makeRuleSpec;
    root.makeFixedMatcher = lexer_12.makeFixedMatcher;
    root.makeSpaceMatcher = lexer_12.makeSpaceMatcher;
    root.makeLineMatcher = lexer_12.makeLineMatcher;
    root.makeStringMatcher = lexer_12.makeStringMatcher;
    root.makeCommentMatcher = lexer_12.makeCommentMatcher;
    root.makeNumberMatcher = lexer_12.makeNumberMatcher;
    root.makeTextMatcher = lexer_12.makeTextMatcher;
    root.OPEN = types_12.OPEN;
    root.CLOSE = types_12.CLOSE;
    root.BEFORE = types_12.BEFORE;
    root.AFTER = types_12.AFTER;
    root.EMPTY = types_12.EMPTY;
    root.util = util2;
    root.make = make;
    root.S = utility_12.S;
    exports3.default = Jsonic2;
    if (true) {
      module2.exports = Jsonic2;
    }
  })(jsonic$1, jsonic$1.exports);
  var jsonicExports = jsonic$1.exports;
  const Jsonic = /* @__PURE__ */ getDefaultExportFromCjs(jsonicExports);
  const config_defaults = {};
  const util = {};
  class Vxg {
    constructor(config2) {
      __publicField(this, "match");
      __publicField(this, "cmp");
      __publicField(this, "util");
      this.match = {
        allow: new Patrun({ gex: true })
      };
      this.cmp = {};
      this.config(config2);
      this.util = util;
    }
    config(custom_config) {
      Object.assign(this.config, config_defaults, custom_config || {});
      this.config.allow = this.config.allow || {};
      this.config.allow.modify = this.config.allow.modify || ((x) => x);
      this.config.allow.match = this.config.allow.match || [];
      for (const entry of this.config.allow.match) {
        this.match.allow.add(entry, { allow: true });
      }
    }
    allow(match2) {
      const mm = Jsonic(match2);
      const ms = Array.isArray(match2) ? match2 : Object.keys(mm).map((x) => mm[x]);
      let found = null;
      for (const m of ms) {
        const pat = this.config.allow.modify(__spreadValues({}, m || {}));
        found = this.match.allow.find(pat);
        if (found) {
          break;
        }
      }
      return found ? !!(found == null ? void 0 : found.allow) : false;
    }
  }
  const _excluded$V = ["defaultProps", "mixins", "overrides", "palette", "props", "styleOverrides"], _excluded2$6 = ["type", "mode"];
  function adaptV4Theme(inputTheme) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join("\n"));
    }
    const {
      defaultProps: defaultProps2 = {},
      mixins = {},
      overrides = {},
      palette: palette2 = {},
      props = {},
      styleOverrides = {}
    } = inputTheme, other = _objectWithoutPropertiesLoose(inputTheme, _excluded$V);
    const theme = _extends({}, other, {
      components: {}
    });
    Object.keys(defaultProps2).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = defaultProps2[component];
      theme.components[component] = componentValue;
    });
    Object.keys(props).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = props[component];
      theme.components[component] = componentValue;
    });
    Object.keys(styleOverrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = styleOverrides[component];
      theme.components[component] = componentValue;
    });
    Object.keys(overrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = overrides[component];
      theme.components[component] = componentValue;
    });
    theme.spacing = createSpacing(inputTheme.spacing);
    const breakpoints2 = createBreakpoints(inputTheme.breakpoints || {});
    const spacing2 = theme.spacing;
    theme.mixins = _extends({
      gutters: (styles2 = {}) => {
        return _extends({
          paddingLeft: spacing2(2),
          paddingRight: spacing2(2)
        }, styles2, {
          [breakpoints2.up("sm")]: _extends({
            paddingLeft: spacing2(3),
            paddingRight: spacing2(3)
          }, styles2[breakpoints2.up("sm")])
        });
      }
    }, mixins);
    const {
      type: typeInput,
      mode: modeInput
    } = palette2, paletteRest = _objectWithoutPropertiesLoose(palette2, _excluded2$6);
    const finalMode = modeInput || typeInput || "light";
    theme.palette = _extends({
      // theme.palette.text.hint
      text: {
        hint: finalMode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)"
      },
      mode: finalMode,
      type: finalMode
    }, paletteRest);
    return theme;
  }
  function createMuiStrictModeTheme(options, ...args) {
    return createTheme(deepmerge({
      unstable_strictMode: true
    }, options), ...args);
  }
  let warnedOnce = false;
  function createStyles(styles2) {
    if (!warnedOnce) {
      console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join("\n"));
      warnedOnce = true;
    }
    return styles2;
  }
  function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
  }
  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
  }
  function toUnitless(length2) {
    return parseFloat(length2);
  }
  function convertLength(baseFontSize) {
    return (length2, toUnit) => {
      const fromUnit = getUnit(length2);
      if (fromUnit === toUnit) {
        return length2;
      }
      let pxLength = toUnitless(length2);
      if (fromUnit !== "px") {
        if (fromUnit === "em") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        } else if (fromUnit === "rem") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        }
      }
      let outputLength = pxLength;
      if (toUnit !== "px") {
        if (toUnit === "em") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else if (toUnit === "rem") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else {
          return length2;
        }
      }
      return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
  }
  function alignProperty({
    size: size2,
    grid: grid2
  }) {
    const sizeBelow = size2 - size2 % grid2;
    const sizeAbove = sizeBelow + grid2;
    return size2 - sizeBelow < sizeAbove - size2 ? sizeBelow : sizeAbove;
  }
  function fontGrid({
    lineHeight: lineHeight2,
    pixels,
    htmlFontSize
  }) {
    return pixels / (lineHeight2 * htmlFontSize);
  }
  function responsiveProperty({
    cssProperty,
    min: min2,
    max: max2,
    unit = "rem",
    breakpoints: breakpoints2 = [600, 900, 1200],
    transform = null
  }) {
    const output = {
      [cssProperty]: `${min2}${unit}`
    };
    const factor = (max2 - min2) / breakpoints2[breakpoints2.length - 1];
    breakpoints2.forEach((breakpoint) => {
      let value = min2 + factor * breakpoint;
      if (transform !== null) {
        value = transform(value);
      }
      output[`@media (min-width:${breakpoint}px)`] = {
        [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`
      };
    });
    return output;
  }
  function responsiveFontSizes(themeInput, options = {}) {
    const {
      breakpoints: breakpoints2 = ["sm", "md", "lg"],
      disableAlign = false,
      factor = 2,
      variants = ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"]
    } = options;
    const theme = _extends({}, themeInput);
    theme.typography = _extends({}, theme.typography);
    const typography2 = theme.typography;
    const convert = convertLength(typography2.htmlFontSize);
    const breakpointValues = breakpoints2.map((x) => theme.breakpoints.values[x]);
    variants.forEach((variant) => {
      const style2 = typography2[variant];
      const remFontSize = parseFloat(convert(style2.fontSize, "rem"));
      if (remFontSize <= 1) {
        return;
      }
      const maxFontSize = remFontSize;
      const minFontSize = 1 + (maxFontSize - 1) / factor;
      let {
        lineHeight: lineHeight2
      } = style2;
      if (!isUnitless(lineHeight2) && !disableAlign) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` : formatMuiErrorMessage(6));
      }
      if (!isUnitless(lineHeight2)) {
        lineHeight2 = parseFloat(convert(lineHeight2, "rem")) / parseFloat(remFontSize);
      }
      let transform = null;
      if (!disableAlign) {
        transform = (value) => alignProperty({
          size: value,
          grid: fontGrid({
            pixels: 4,
            lineHeight: lineHeight2,
            htmlFontSize: typography2.htmlFontSize
          })
        });
      }
      typography2[variant] = _extends({}, style2, responsiveProperty({
        cssProperty: "fontSize",
        min: minFontSize,
        max: maxFontSize,
        unit: "rem",
        breakpoints: breakpointValues,
        transform
      }));
    });
    return theme;
  }
  "use client";
  const _excluded$U = ["theme"];
  function ThemeProvider(_ref) {
    let {
      theme: themeInput
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$U);
    const scopedTheme = themeInput[THEME_ID];
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$1, _extends({}, props, {
      themeId: scopedTheme ? THEME_ID : void 0,
      theme: scopedTheme || themeInput
    }));
  }
  process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
  } : void 0;
  function makeStyles() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: makeStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(14));
  }
  function withStyles() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: withStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(15));
  }
  function withTheme() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: withTheme is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(16));
  }
  function shouldSkipGeneratingVar(keys) {
    var _keys$;
    return !!keys[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig
    keys[0] === "palette" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
  }
  const _excluded$T = ["colorSchemes", "cssVarPrefix", "shouldSkipGeneratingVar"], _excluded2$5 = ["palette"];
  const defaultDarkOverlays = [...Array(25)].map((_2, index2) => {
    if (index2 === 0) {
      return void 0;
    }
    const overlay = getOverlayAlpha(index2);
    return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
  });
  function assignNode(obj, keys) {
    keys.forEach((k) => {
      if (!obj[k]) {
        obj[k] = {};
      }
    });
  }
  function setColor(obj, key, defaultValue) {
    if (!obj[key] && defaultValue) {
      obj[key] = defaultValue;
    }
  }
  function toRgb(color2) {
    if (!color2 || !color2.startsWith("hsl")) {
      return color2;
    }
    return hslToRgb(color2);
  }
  function setColorChannel(obj, key) {
    if (!(`${key}Channel` in obj)) {
      obj[`${key}Channel`] = private_safeColorChannel(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, e.g. "12 12 12") or undefined if you want to remove the channel token.`);
    }
  }
  const silent = (fn) => {
    try {
      return fn();
    } catch (error) {
    }
    return void 0;
  };
  const createGetCssVar = (cssVarPrefix = "mui") => createGetCssVar$1(cssVarPrefix);
  function extendTheme(options = {}, ...args) {
    var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
    const {
      colorSchemes: colorSchemesInput = {},
      cssVarPrefix = "mui",
      shouldSkipGeneratingVar: shouldSkipGeneratingVar$1 = shouldSkipGeneratingVar
    } = options, input = _objectWithoutPropertiesLoose(options, _excluded$T);
    const getCssVar = createGetCssVar(cssVarPrefix);
    const _createThemeWithoutVa = createTheme(_extends({}, input, colorSchemesInput.light && {
      palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
    })), {
      palette: lightPalette
    } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2$5);
    const {
      palette: darkPalette
    } = createTheme({
      palette: _extends({
        mode: "dark"
      }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
    });
    let theme = _extends({}, muiTheme, {
      cssVarPrefix,
      getCssVar,
      colorSchemes: _extends({}, colorSchemesInput, {
        light: _extends({}, colorSchemesInput.light, {
          palette: lightPalette,
          opacity: _extends({
            inputPlaceholder: 0.42,
            inputUnderline: 0.42,
            switchTrackDisabled: 0.12,
            switchTrack: 0.38
          }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
          overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
        }),
        dark: _extends({}, colorSchemesInput.dark, {
          palette: darkPalette,
          opacity: _extends({
            inputPlaceholder: 0.5,
            inputUnderline: 0.7,
            switchTrackDisabled: 0.2,
            switchTrack: 0.3
          }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
          overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
        })
      })
    });
    Object.keys(theme.colorSchemes).forEach((key) => {
      const palette2 = theme.colorSchemes[key].palette;
      const setCssVarColor = (cssVar) => {
        const tokens = cssVar.split("-");
        const color2 = tokens[1];
        const colorToken = tokens[2];
        return getCssVar(cssVar, palette2[color2][colorToken]);
      };
      if (key === "light") {
        setColor(palette2.common, "background", "#fff");
        setColor(palette2.common, "onBackground", "#000");
      } else {
        setColor(palette2.common, "background", "#000");
        setColor(palette2.common, "onBackground", "#fff");
      }
      assignNode(palette2, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
      if (key === "light") {
        setColor(palette2.Alert, "errorColor", private_safeDarken(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", private_safeDarken(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", private_safeDarken(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", private_safeDarken(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoFilledBg", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successFilledBg", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningFilledBg", setCssVarColor("palette-warning-main"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => lightPalette.getContrastText(palette2.error.main)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => lightPalette.getContrastText(palette2.info.main)));
        setColor(palette2.Alert, "successFilledColor", silent(() => lightPalette.getContrastText(palette2.success.main)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => lightPalette.getContrastText(palette2.warning.main)));
        setColor(palette2.Alert, "errorStandardBg", private_safeLighten(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", private_safeLighten(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", private_safeLighten(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", private_safeLighten(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", setCssVarColor("palette-grey-100"));
        setColor(palette2.Avatar, "defaultBg", setCssVarColor("palette-grey-400"));
        setColor(palette2.Button, "inheritContainedBg", setCssVarColor("palette-grey-300"));
        setColor(palette2.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-A100"));
        setColor(palette2.Chip, "defaultBorder", setCssVarColor("palette-grey-400"));
        setColor(palette2.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultIconColor", setCssVarColor("palette-grey-700"));
        setColor(palette2.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.LinearProgress, "secondaryBg", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.LinearProgress, "errorBg", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.LinearProgress, "infoBg", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.LinearProgress, "successBg", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.LinearProgress, "warningBg", private_safeLighten(palette2.warning.main, 0.62));
        setColor(palette2.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.11)`);
        setColor(palette2.Slider, "primaryTrack", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.Slider, "secondaryTrack", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.Slider, "errorTrack", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.Slider, "infoTrack", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.Slider, "successTrack", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.Slider, "warningTrack", private_safeLighten(palette2.warning.main, 0.62));
        const snackbarContentBackground = private_safeEmphasize(palette2.background.default, 0.8);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => lightPalette.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", setCssVarColor("palette-grey-400"));
        setColor(palette2.StepContent, "border", setCssVarColor("palette-grey-400"));
        setColor(palette2.Switch, "defaultColor", setCssVarColor("palette-common-white"));
        setColor(palette2.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-100"));
        setColor(palette2.Switch, "primaryDisabledColor", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.Switch, "secondaryDisabledColor", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.Switch, "errorDisabledColor", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.Switch, "infoDisabledColor", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.Switch, "successDisabledColor", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.Switch, "warningDisabledColor", private_safeLighten(palette2.warning.main, 0.62));
        setColor(palette2.TableCell, "border", private_safeLighten(private_safeAlpha(palette2.divider, 1), 0.88));
        setColor(palette2.Tooltip, "bg", private_safeAlpha(palette2.grey[700], 0.92));
      } else {
        setColor(palette2.Alert, "errorColor", private_safeLighten(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", private_safeLighten(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", private_safeLighten(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", private_safeLighten(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", setCssVarColor("palette-error-dark"));
        setColor(palette2.Alert, "infoFilledBg", setCssVarColor("palette-info-dark"));
        setColor(palette2.Alert, "successFilledBg", setCssVarColor("palette-success-dark"));
        setColor(palette2.Alert, "warningFilledBg", setCssVarColor("palette-warning-dark"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => darkPalette.getContrastText(palette2.error.dark)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => darkPalette.getContrastText(palette2.info.dark)));
        setColor(palette2.Alert, "successFilledColor", silent(() => darkPalette.getContrastText(palette2.success.dark)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => darkPalette.getContrastText(palette2.warning.dark)));
        setColor(palette2.Alert, "errorStandardBg", private_safeDarken(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", private_safeDarken(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", private_safeDarken(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", private_safeDarken(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", setCssVarColor("palette-grey-900"));
        setColor(palette2.AppBar, "darkBg", setCssVarColor("palette-background-paper"));
        setColor(palette2.AppBar, "darkColor", setCssVarColor("palette-text-primary"));
        setColor(palette2.Avatar, "defaultBg", setCssVarColor("palette-grey-600"));
        setColor(palette2.Button, "inheritContainedBg", setCssVarColor("palette-grey-800"));
        setColor(palette2.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultBorder", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.Chip, "defaultIconColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", private_safeDarken(palette2.primary.main, 0.5));
        setColor(palette2.LinearProgress, "secondaryBg", private_safeDarken(palette2.secondary.main, 0.5));
        setColor(palette2.LinearProgress, "errorBg", private_safeDarken(palette2.error.main, 0.5));
        setColor(palette2.LinearProgress, "infoBg", private_safeDarken(palette2.info.main, 0.5));
        setColor(palette2.LinearProgress, "successBg", private_safeDarken(palette2.success.main, 0.5));
        setColor(palette2.LinearProgress, "warningBg", private_safeDarken(palette2.warning.main, 0.5));
        setColor(palette2.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.13)`);
        setColor(palette2.Slider, "primaryTrack", private_safeDarken(palette2.primary.main, 0.5));
        setColor(palette2.Slider, "secondaryTrack", private_safeDarken(palette2.secondary.main, 0.5));
        setColor(palette2.Slider, "errorTrack", private_safeDarken(palette2.error.main, 0.5));
        setColor(palette2.Slider, "infoTrack", private_safeDarken(palette2.info.main, 0.5));
        setColor(palette2.Slider, "successTrack", private_safeDarken(palette2.success.main, 0.5));
        setColor(palette2.Slider, "warningTrack", private_safeDarken(palette2.warning.main, 0.5));
        const snackbarContentBackground = private_safeEmphasize(palette2.background.default, 0.98);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => darkPalette.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", setCssVarColor("palette-grey-600"));
        setColor(palette2.StepContent, "border", setCssVarColor("palette-grey-600"));
        setColor(palette2.Switch, "defaultColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-600"));
        setColor(palette2.Switch, "primaryDisabledColor", private_safeDarken(palette2.primary.main, 0.55));
        setColor(palette2.Switch, "secondaryDisabledColor", private_safeDarken(palette2.secondary.main, 0.55));
        setColor(palette2.Switch, "errorDisabledColor", private_safeDarken(palette2.error.main, 0.55));
        setColor(palette2.Switch, "infoDisabledColor", private_safeDarken(palette2.info.main, 0.55));
        setColor(palette2.Switch, "successDisabledColor", private_safeDarken(palette2.success.main, 0.55));
        setColor(palette2.Switch, "warningDisabledColor", private_safeDarken(palette2.warning.main, 0.55));
        setColor(palette2.TableCell, "border", private_safeDarken(private_safeAlpha(palette2.divider, 1), 0.68));
        setColor(palette2.Tooltip, "bg", private_safeAlpha(palette2.grey[700], 0.92));
      }
      setColorChannel(palette2.background, "default");
      setColorChannel(palette2.common, "background");
      setColorChannel(palette2.common, "onBackground");
      setColorChannel(palette2, "divider");
      Object.keys(palette2).forEach((color2) => {
        const colors = palette2[color2];
        if (colors && typeof colors === "object") {
          if (colors.main) {
            setColor(palette2[color2], "mainChannel", private_safeColorChannel(toRgb(colors.main)));
          }
          if (colors.light) {
            setColor(palette2[color2], "lightChannel", private_safeColorChannel(toRgb(colors.light)));
          }
          if (colors.dark) {
            setColor(palette2[color2], "darkChannel", private_safeColorChannel(toRgb(colors.dark)));
          }
          if (colors.contrastText) {
            setColor(palette2[color2], "contrastTextChannel", private_safeColorChannel(toRgb(colors.contrastText)));
          }
          if (color2 === "text") {
            setColorChannel(palette2[color2], "primary");
            setColorChannel(palette2[color2], "secondary");
          }
          if (color2 === "action") {
            if (colors.active) {
              setColorChannel(palette2[color2], "active");
            }
            if (colors.selected) {
              setColorChannel(palette2[color2], "selected");
            }
          }
        }
      });
    });
    theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
    const parserConfig = {
      prefix: cssVarPrefix,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar$1
    };
    const {
      vars: themeVars,
      generateCssVars
    } = prepareCssVars(theme, parserConfig);
    theme.vars = themeVars;
    theme.generateCssVars = generateCssVars;
    theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar$1;
    theme.unstable_sxConfig = _extends({}, defaultSxConfig, input == null ? void 0 : input.unstable_sxConfig);
    theme.unstable_sx = function sx(props) {
      return styleFunctionSx({
        sx: props,
        theme: this
      });
    };
    return theme;
  }
  const excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(24)].map((_2, index2) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index2 + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
  "use client";
  const defaultTheme$1 = extendTheme();
  const {
    CssVarsProvider,
    useColorScheme,
    getInitColorSchemeScript
  } = createCssVarsProvider({
    themeId: THEME_ID,
    theme: defaultTheme$1,
    attribute: "data-mui-color-scheme",
    modeStorageKey: "mui-mode",
    colorSchemeStorageKey: "mui-color-scheme",
    defaultColorScheme: {
      light: "light",
      dark: "dark"
    },
    resolveTheme: (theme) => {
      const newTheme = _extends({}, theme, {
        typography: createTypography(theme.palette, theme.typography)
      });
      newTheme.unstable_sx = function sx(props) {
        return styleFunctionSx({
          sx: props,
          theme: this
        });
      };
      return newTheme;
    },
    excludeVariablesFromRoot
  });
  "use client";
  function experimental_sx() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : formatMuiErrorMessage(20));
  }
  function isHostComponent(element) {
    return typeof element === "string";
  }
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent(elementType)) {
      return otherProps;
    }
    return _extends({}, otherProps, {
      ownerState: _extends({}, otherProps.ownerState, ownerState)
    });
  }
  function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
    return array1.length === array2.length && array1.every((value, index2) => itemComparer(value, array2[index2]));
  }
  "use client";
  const defaultContextValue = {
    disableDefaultClasses: false
  };
  const ClassNameConfiguratorContext = /* @__PURE__ */ React__namespace.createContext(defaultContextValue);
  function useClassNamesOverride(generateUtilityClass2) {
    const {
      disableDefaultClasses
    } = React__namespace.useContext(ClassNameConfiguratorContext);
    return (slot) => {
      if (disableDefaultClasses) {
        return "";
      }
      return generateUtilityClass2(slot);
    };
  }
  function ClassNameConfigurator(props) {
    const {
      disableDefaultClasses,
      children
    } = props;
    const contextValue = React__namespace.useMemo(() => ({
      disableDefaultClasses: disableDefaultClasses != null ? disableDefaultClasses : false
    }), [disableDefaultClasses]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ClassNameConfiguratorContext.Provider, {
      value: contextValue,
      children
    });
  }
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  function resolveComponentProps(componentProps, ownerState, slotState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState, slotState);
    }
    return componentProps;
  }
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }
  "use client";
  const _excluded$S = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded$S);
    const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps(_extends({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState(elementType, _extends({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }
  const _excluded$R = ["ownerState"];
  function prepareForSlot(Component) {
    return /* @__PURE__ */ React__namespace.forwardRef(function Slot(props, ref) {
      const other = _objectWithoutPropertiesLoose(props, _excluded$R);
      return /* @__PURE__ */ React__namespace.createElement(Component, _extends({}, other, {
        ref
      }));
    });
  }
  "use client";
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index2) => {
      if (callback(item)) {
        idx = index2;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = ownerDocument(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = ownerWindow(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  class ModalManager {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  }
  "use client";
  function getContainer$1(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  const defaultManager = new ModalManager();
  function useModal(parameters) {
    const {
      container,
      disableEscapeKeyDown = false,
      disableScrollLock = false,
      // @ts-ignore internal logic - Base UI supports the manager as a prop too
      manager = defaultManager,
      closeAfterTransition = false,
      onTransitionEnter,
      onTransitionExited,
      children,
      onClose,
      open,
      rootRef
    } = parameters;
    const modal = React__namespace.useRef({});
    const mountNodeRef = React__namespace.useRef(null);
    const modalRef = React__namespace.useRef(null);
    const handleRef = useForkRef(modalRef, rootRef);
    const [exited, setExited] = React__namespace.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
      ariaHiddenProp = false;
    }
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = useEventCallback(() => {
      const resolvedContainer = getContainer$1(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React__namespace.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else if (modalRef.current) {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React__namespace.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp, manager]);
    React__namespace.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React__namespace.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
      !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const createHandleBackdropClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
      return _extends({
        role: "presentation"
      }, externalEventHandlers, {
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        ref: handleRef
      });
    };
    const getBackdropProps = (otherHandlers = {}) => {
      const externalEventHandlers = otherHandlers;
      return _extends({
        "aria-hidden": true
      }, externalEventHandlers, {
        onClick: createHandleBackdropClick(externalEventHandlers),
        open
      });
    };
    const getTransitionProps2 = () => {
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      return {
        onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
        onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
      };
    };
    return {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      rootRef: handleRef,
      portalRef: handlePortalRef,
      isTopModal,
      exited,
      hasTransition
    };
  }
  "use client";
  "use client";
  function useBadge(parameters) {
    const {
      badgeContent: badgeContentProp,
      invisible: invisibleProp = false,
      max: maxProp = 99,
      showZero = false
    } = parameters;
    const prevProps = usePreviousProps({
      badgeContent: badgeContentProp,
      max: maxProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
      invisible = true;
    }
    const {
      badgeContent,
      max: max2 = maxProp
    } = invisible ? prevProps : parameters;
    const displayValue = badgeContent && Number(badgeContent) > max2 ? `${max2}+` : badgeContent;
    return {
      badgeContent,
      invisible,
      max: max2,
      displayValue
    };
  }
  "use client";
  function getBadgeUtilityClass(slot) {
    return generateUtilityClass("MuiBadge", slot);
  }
  const badgeClasses = generateUtilityClasses("MuiBadge", ["root", "badge", "invisible"]);
  "use client";
  const _excluded$Q = ["badgeContent", "children", "invisible", "max", "slotProps", "slots", "showZero"];
  const useUtilityClasses$I = (ownerState) => {
    const {
      invisible
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", invisible && "invisible"]
    };
    return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));
  };
  const Badge = /* @__PURE__ */ React__namespace.forwardRef(function Badge2(props, forwardedRef) {
    var _slots$root, _slots$badge;
    const {
      children,
      max: maxProp = 99,
      slotProps = {},
      slots = {},
      showZero = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$Q);
    const {
      badgeContent,
      max: max2,
      displayValue,
      invisible
    } = useBadge(_extends({}, props, {
      max: maxProp
    }));
    const ownerState = _extends({}, props, {
      badgeContent,
      invisible,
      max: max2,
      showZero
    });
    const classes = useUtilityClasses$I(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : "span";
    const badgeProps = useSlotProps({
      elementType: BadgeComponent,
      externalSlotProps: slotProps.badge,
      ownerState,
      className: classes.badge
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
      children: [children, /* @__PURE__ */ jsxRuntimeExports.jsx(BadgeComponent, _extends({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  process.env.NODE_ENV !== "production" ? Badge.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content rendered within the badge.
     */
    badgeContent: PropTypes.node,
    /**
     * The badge will be added relative to this node.
     */
    children: PropTypes.node,
    /**
     * If `true`, the badge is invisible.
     * @default false
     */
    invisible: PropTypes.bool,
    /**
     * Max count to show.
     * @default 99
     */
    max: PropTypes.number,
    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: PropTypes.bool,
    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    slotProps: PropTypes.shape({
      badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      badge: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function getButtonUtilityClass$1(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  const buttonClasses$1 = generateUtilityClasses("MuiButton", ["root", "active", "disabled", "focusVisible"]);
  "use client";
  function useButton(parameters = {}) {
    const {
      disabled = false,
      focusableWhenDisabled,
      href,
      rootRef: externalRef,
      tabIndex,
      to,
      type
    } = parameters;
    const buttonRef = React__namespace.useRef();
    const [active, setActive] = React__namespace.useState(false);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    if (disabled && !focusableWhenDisabled && focusVisible) {
      setFocusVisible(false);
    }
    React__namespace.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const [hostElementName, setHostElementName] = React__namespace.useState("");
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      if (focusVisible) {
        event.preventDefault();
      }
      (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous.call(otherHandlers, event);
    };
    const createHandleBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu2;
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        var _otherHandlers$onFocu;
        setFocusVisible(true);
        (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null || _otherHandlers$onFocu.call(otherHandlers, event);
      }
      (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null || _otherHandlers$onFocu2.call(otherHandlers, event);
    };
    const isNativeButton = () => {
      const button = buttonRef.current;
      return hostElementName === "BUTTON" || hostElementName === "INPUT" && ["button", "submit", "reset"].includes(button == null ? void 0 : button.type) || hostElementName === "A" && (button == null ? void 0 : button.href);
    };
    const createHandleClick = (otherHandlers) => (event) => {
      if (!disabled) {
        var _otherHandlers$onClic;
        (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      }
    };
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      if (!disabled) {
        setActive(true);
        document.addEventListener("mouseup", () => {
          setActive(false);
        }, {
          once: true
        });
      }
      (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null || _otherHandlers$onMous2.call(otherHandlers, event);
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if (event.target === event.currentTarget && !isNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (event.target === event.currentTarget && event.key === " " && !disabled) {
        setActive(true);
      }
      if (event.target === event.currentTarget && !isNativeButton() && event.key === "Enter" && !disabled) {
        var _otherHandlers$onClic2;
        (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);
        event.preventDefault();
      }
    };
    const createHandleKeyUp = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyU;
      if (event.target === event.currentTarget) {
        setActive(false);
      }
      (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event);
      if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === " " && !event.defaultMuiPrevented) {
        var _otherHandlers$onClic3;
        (_otherHandlers$onClic3 = otherHandlers.onClick) == null || _otherHandlers$onClic3.call(otherHandlers, event);
      }
    };
    const updateHostElementName = React__namespace.useCallback((instance) => {
      var _instance$tagName;
      setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : "");
    }, []);
    const handleRef = useForkRef(updateHostElementName, externalRef, focusVisibleRef, buttonRef);
    const buttonProps = {};
    if (tabIndex !== void 0) {
      buttonProps.tabIndex = tabIndex;
    }
    if (hostElementName === "BUTTON") {
      buttonProps.type = type != null ? type : "button";
      if (focusableWhenDisabled) {
        buttonProps["aria-disabled"] = disabled;
      } else {
        buttonProps.disabled = disabled;
      }
    } else if (hostElementName !== "") {
      if (!href && !to) {
        buttonProps.role = "button";
        buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
        buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
      }
    }
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));
      const props = _extends({
        type
      }, externalEventHandlers, buttonProps, externalProps, {
        onBlur: createHandleBlur(externalEventHandlers),
        onClick: createHandleClick(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        onKeyUp: createHandleKeyUp(externalEventHandlers),
        onMouseDown: createHandleMouseDown(externalEventHandlers),
        onMouseLeave: createHandleMouseLeave(externalEventHandlers),
        ref: handleRef
      });
      delete props.onFocusVisible;
      return props;
    };
    return {
      getRootProps,
      focusVisible,
      setFocusVisible,
      active,
      rootRef: handleRef
    };
  }
  "use client";
  "use client";
  const _excluded$P = ["action", "children", "disabled", "focusableWhenDisabled", "onFocusVisible", "slotProps", "slots"];
  const useUtilityClasses$H = (ownerState) => {
    const {
      active,
      disabled,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]
    };
    return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass$1));
  };
  const Button$1 = /* @__PURE__ */ React__namespace.forwardRef(function Button2(props, forwardedRef) {
    var _slots$root;
    const {
      action,
      children,
      focusableWhenDisabled = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$P);
    const buttonRef = React__namespace.useRef();
    const {
      active,
      focusVisible,
      setFocusVisible,
      getRootProps
    } = useButton(_extends({}, props, {
      focusableWhenDisabled
    }));
    React__namespace.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), [setFocusVisible]);
    const ownerState = _extends({}, props, {
      active,
      focusableWhenDisabled,
      focusVisible
    });
    const classes = useUtilityClasses$H(ownerState);
    const defaultElement = other.href || other.to ? "a" : "button";
    const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? Button$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions. It currently only supports `focusVisible()` action.
     */
    action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.shape({
        focusVisible: PropTypes.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, allows a disabled button to receive focus.
     * @default false
     */
    focusableWhenDisabled: PropTypes.bool,
    /**
     * @ignore
     */
    href: PropTypes.string,
    /**
     * @ignore
     */
    onFocusVisible: PropTypes.func,
    /**
     * The props used for each slot inside the Button.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Button.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * @ignore
     */
    to: PropTypes.string
  } : void 0;
  "use client";
  "use client";
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React__namespace.useRef(false);
    const nodeRef = React__namespace.useRef(null);
    const activatedRef = React__namespace.useRef(false);
    const syntheticEventRef = React__namespace.useRef(false);
    React__namespace.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = useForkRef(
      // @ts-expect-error TODO upstream fix
      children.ref,
      nodeRef
    );
    const handleClickAway = useEventCallback((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        ) || nodeRef.current.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        );
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React__namespace.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = ownerDocument(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React__namespace.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: /* @__PURE__ */ React__namespace.cloneElement(children, childrenProps)
    });
  }
  process.env.NODE_ENV !== "production" ? ClickAwayListener.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The wrapped element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * If `true`, the React tree is ignored and only the DOM tree is considered.
     * This prop changes how portaled elements are handled.
     * @default false
     */
    disableReactTree: PropTypes.bool,
    /**
     * The mouse event to listen to. You can disable the listener by providing `false`.
     * @default 'onClick'
     */
    mouseEvent: PropTypes.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
    /**
     * Callback fired when a "click away" event is detected.
     */
    onClickAway: PropTypes.func.isRequired,
    /**
     * The touch event to listen to. You can disable the listener by providing `false`.
     * @default 'onTouchEnd'
     */
    touchEvent: PropTypes.oneOf(["onTouchEnd", "onTouchStart", false])
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
  }
  const DropdownContext = /* @__PURE__ */ React__namespace.createContext(null);
  "use client";
  function areEqual(a, b) {
    return a === b;
  }
  const EMPTY_OBJECT$1 = {};
  const NOOP$1 = () => {
  };
  function getControlledState(internalState, controlledProps) {
    const augmentedState = _extends({}, internalState);
    Object.keys(controlledProps).forEach((key) => {
      if (controlledProps[key] !== void 0) {
        augmentedState[key] = controlledProps[key];
      }
    });
    return augmentedState;
  }
  function useStateChangeDetection(parameters) {
    const {
      nextState,
      initialState,
      stateComparers,
      onStateChange,
      controlledProps,
      lastActionRef
    } = parameters;
    const internalPreviousStateRef = React__namespace.useRef(initialState);
    React__namespace.useEffect(() => {
      if (lastActionRef.current === null) {
        return;
      }
      const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);
      Object.keys(nextState).forEach((key) => {
        var _stateComparers$key;
        const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;
        const nextStateItem = nextState[key];
        const previousStateItem = previousState[key];
        if (previousStateItem == null && nextStateItem != null || previousStateItem != null && nextStateItem == null || previousStateItem != null && nextStateItem != null && !stateComparer(nextStateItem, previousStateItem)) {
          var _event, _type;
          onStateChange == null || onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : "", nextState);
        }
      });
      internalPreviousStateRef.current = nextState;
      lastActionRef.current = null;
    }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);
  }
  function useControllableReducer(parameters) {
    const lastActionRef = React__namespace.useRef(null);
    const {
      reducer,
      initialState,
      controlledProps = EMPTY_OBJECT$1,
      stateComparers = EMPTY_OBJECT$1,
      onStateChange = NOOP$1,
      actionContext,
      componentName = ""
    } = parameters;
    const controlledPropsRef = React__namespace.useRef(controlledProps);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        Object.keys(controlledProps).forEach((key) => {
          if (controlledPropsRef.current[key] !== void 0 && controlledProps[key] === void 0) {
            console.error(`useControllableReducer: ${componentName ? `The ${componentName} component` : "A component"} is changing a controlled prop to be uncontrolled: ${key}`);
          }
          if (controlledPropsRef.current[key] === void 0 && controlledProps[key] !== void 0) {
            console.error(`useControllableReducer: ${componentName ? `The ${componentName} component` : "A component"} is changing an uncontrolled prop to be controlled: ${key}`);
          }
        });
      }, [controlledProps, componentName]);
    }
    const reducerWithControlledState = React__namespace.useCallback((state, action) => {
      lastActionRef.current = action;
      const controlledState = getControlledState(state, controlledProps);
      const newState = reducer(controlledState, action);
      return newState;
    }, [controlledProps, reducer]);
    const [nextState, dispatch] = React__namespace.useReducer(reducerWithControlledState, initialState);
    const dispatchWithContext = React__namespace.useCallback((action) => {
      dispatch(_extends({}, action, {
        context: actionContext
      }));
    }, [actionContext]);
    useStateChangeDetection({
      nextState,
      initialState,
      stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT$1,
      onStateChange: onStateChange != null ? onStateChange : NOOP$1,
      controlledProps,
      lastActionRef
    });
    return [getControlledState(nextState, controlledProps), dispatchWithContext];
  }
  const DropdownActionTypes = {
    blur: "dropdown:blur",
    escapeKeyDown: "dropdown:escapeKeyDown",
    toggle: "dropdown:toggle",
    open: "dropdown:open",
    close: "dropdown:close"
  };
  function dropdownReducer(state, action) {
    switch (action.type) {
      case DropdownActionTypes.blur:
        return {
          open: false
        };
      case DropdownActionTypes.escapeKeyDown:
        return {
          open: false
        };
      case DropdownActionTypes.toggle:
        return {
          open: !state.open
        };
      case DropdownActionTypes.open:
        return {
          open: true
        };
      case DropdownActionTypes.close:
        return {
          open: false
        };
      default:
        throw new Error(`Unhandled action`);
    }
  }
  "use client";
  function useDropdown(parameters = {}) {
    const {
      defaultOpen,
      onOpenChange,
      open: openProp,
      componentName = "useDropdown"
    } = parameters;
    const [popupId, setPopupId] = React__namespace.useState("");
    const [triggerElement, setTriggerElement] = React__namespace.useState(null);
    const lastActionType = React__namespace.useRef(null);
    const handleStateChange = React__namespace.useCallback((event, field, value, reason) => {
      if (field === "open") {
        onOpenChange == null || onOpenChange(event, value);
      }
      lastActionType.current = reason;
    }, [onOpenChange]);
    const controlledProps = React__namespace.useMemo(() => openProp !== void 0 ? {
      open: openProp
    } : {}, [openProp]);
    const [state, dispatch] = useControllableReducer({
      controlledProps,
      initialState: defaultOpen ? {
        open: true
      } : {
        open: false
      },
      onStateChange: handleStateChange,
      reducer: dropdownReducer,
      componentName
    });
    React__namespace.useEffect(() => {
      if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {
        triggerElement == null || triggerElement.focus();
      }
    }, [state.open, triggerElement]);
    const contextValue = {
      state,
      dispatch,
      popupId,
      registerPopup: setPopupId,
      registerTrigger: setTriggerElement,
      triggerElement
    };
    return {
      contextValue,
      open: state.open
    };
  }
  "use client";
  function Dropdown(props) {
    const {
      children,
      open,
      defaultOpen,
      onOpenChange
    } = props;
    const {
      contextValue
    } = useDropdown({
      defaultOpen,
      onOpenChange,
      open
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DropdownContext.Provider, {
      value: contextValue,
      children
    });
  }
  process.env.NODE_ENV !== "production" ? Dropdown.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * If `true`, the dropdown is initially open.
     */
    defaultOpen: PropTypes.bool,
    /**
     * Callback fired when the component requests to be opened or closed.
     */
    onOpenChange: PropTypes.func,
    /**
     * Allows to control whether the dropdown is open.
     * This is a controlled counterpart of `defaultOpen`.
     */
    open: PropTypes.bool
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    Dropdown["propTypes"] = exactProp(Dropdown.propTypes);
  }
  "use client";
  const candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React__namespace.useRef(false);
    const sentinelStart = React__namespace.useRef(null);
    const sentinelEnd = React__namespace.useRef(null);
    const nodeToRestore = React__namespace.useRef(null);
    const reactFocusEventTarget = React__namespace.useRef(null);
    const activated = React__namespace.useRef(false);
    const rootRef = React__namespace.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React__namespace.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (process.env.NODE_ENV !== "production") {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React__namespace.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      const contain = () => {
        const rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootElement.contains(doc.activeElement)) {
          return;
        }
        if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
          return;
        }
        if (doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          }
        } else {
          rootElement.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React__namespace.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  process.env.NODE_ENV !== "production" ? FocusTrap.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A single child content element.
     */
    children: elementAcceptingRef,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: PropTypes.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: PropTypes.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: PropTypes.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: PropTypes.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: PropTypes.func,
    /**
     * If `true`, focus is locked.
     */
    open: PropTypes.bool.isRequired
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
  }
  const FormControlContext$1 = /* @__PURE__ */ React__namespace.createContext(void 0);
  if (process.env.NODE_ENV !== "production") {
    FormControlContext$1.displayName = "FormControlContext";
  }
  function getFormControlUtilityClass(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  const formControlClasses$1 = generateUtilityClasses("MuiFormControl", ["root", "disabled", "error", "filled", "focused", "required"]);
  "use client";
  const _excluded$O = ["defaultValue", "children", "disabled", "error", "onChange", "required", "slotProps", "slots", "value"];
  function hasValue$1(value) {
    return value != null && !(Array.isArray(value) && value.length === 0) && value !== "";
  }
  function useUtilityClasses$G(ownerState) {
    const {
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focused && "focused", error && "error", filled && "filled", required && "required"]
    };
    return composeClasses(slots, useClassNamesOverride(getFormControlUtilityClass));
  }
  const FormControl$1 = /* @__PURE__ */ React__namespace.forwardRef(function FormControl2(props, forwardedRef) {
    var _slots$root;
    const {
      defaultValue,
      children,
      disabled = false,
      error = false,
      onChange,
      required = false,
      slotProps = {},
      slots = {},
      value: incomingValue
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$O);
    const [value, setValue] = useControlled({
      controlled: incomingValue,
      default: defaultValue,
      name: "FormControl",
      state: "value"
    });
    const filled = hasValue$1(value);
    const [focusedState, setFocused] = React__namespace.useState(false);
    const focused = focusedState && !disabled;
    React__namespace.useEffect(() => setFocused((isFocused) => disabled ? false : isFocused), [disabled]);
    const ownerState = _extends({}, props, {
      disabled,
      error,
      filled,
      focused,
      required
    });
    const childContext = React__namespace.useMemo(() => {
      return {
        disabled,
        error,
        filled,
        focused,
        onBlur: () => {
          setFocused(false);
        },
        onChange: (event) => {
          setValue(event.target.value);
          onChange == null || onChange(event);
        },
        onFocus: () => {
          setFocused(true);
        },
        required,
        value: value != null ? value : ""
      };
    }, [disabled, error, filled, focused, onChange, required, setValue, value]);
    const classes = useUtilityClasses$G(ownerState);
    const renderChildren = () => {
      if (typeof children === "function") {
        return children(childContext);
      }
      return children;
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef,
        children: renderChildren()
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
      value: childContext,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps))
    });
  });
  process.env.NODE_ENV !== "production" ? FormControl$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * Class name applied to the root element.
     */
    className: PropTypes.string,
    /**
     * @ignore
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: PropTypes.bool,
    /**
     * Callback fired when the form element's value is modified.
     */
    onChange: PropTypes.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The props used for each slot inside the FormControl.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the FormControl.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The value of the form element.
     */
    value: PropTypes.any
  } : void 0;
  "use client";
  function useFormControlContext() {
    return React__namespace.useContext(FormControlContext$1);
  }
  function getInputUtilityClass$1(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  const inputClasses$1 = generateUtilityClasses("MuiInput", ["root", "formControl", "focused", "disabled", "error", "multiline", "input", "inputMultiline", "inputTypeSearch", "adornedStart", "adornedEnd"]);
  "use client";
  function useInput(parameters = {}) {
    const {
      defaultValue: defaultValueProp,
      disabled: disabledProp = false,
      error: errorProp = false,
      onBlur,
      onChange,
      onFocus,
      required: requiredProp = false,
      value: valueProp,
      inputRef: inputRefProp
    } = parameters;
    const formControlContext = useFormControlContext();
    let defaultValue;
    let disabled;
    let error;
    let required;
    let value;
    if (formControlContext) {
      var _formControlContext$d, _formControlContext$e, _formControlContext$r;
      defaultValue = void 0;
      disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
      error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
      required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
      value = formControlContext.value;
      if (process.env.NODE_ENV !== "production") {
        const definedLocalProps = ["defaultValue", "disabled", "error", "required", "value"].filter((prop) => parameters[prop] !== void 0);
        if (definedLocalProps.length > 0) {
          console.warn(["MUI: You have set props on an input that is inside a FormControl.", "Set these props on a FormControl instead. Otherwise they will be ignored.", `Ignored props: ${definedLocalProps.join(", ")}`].join("\n"));
        }
      }
    } else {
      defaultValue = defaultValueProp;
      disabled = disabledProp;
      error = errorProp;
      required = requiredProp;
      value = valueProp;
    }
    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const handleInputRefWarning = React__namespace.useCallback((instance) => {
      if (process.env.NODE_ENV !== "production") {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const inputRef = React__namespace.useRef(null);
    const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);
    const [focused, setFocused] = React__namespace.useState(false);
    React__namespace.useEffect(() => {
      if (!formControlContext && disabled && focused) {
        setFocused(false);
        onBlur == null || onBlur();
      }
    }, [formControlContext, disabled, focused, onBlur]);
    const handleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      if (formControlContext != null && formControlContext.disabled) {
        event.stopPropagation();
        return;
      }
      (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
      if (formControlContext && formControlContext.onFocus) {
        var _formControlContext$o;
        formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
      } else {
        setFocused(true);
      }
    };
    const handleBlur2 = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
      if (formControlContext && formControlContext.onBlur) {
        formControlContext.onBlur();
      } else {
        setFocused(false);
      }
    };
    const handleChange = (otherHandlers) => (event, ...args) => {
      var _formControlContext$o2, _otherHandlers$onChan;
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));
        }
      }
      formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);
      (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event, ...args);
    };
    const handleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    };
    const getRootProps = (externalProps = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters, ["onBlur", "onChange", "onFocus"]);
      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
      return _extends({}, externalProps, externalEventHandlers, {
        onClick: handleClick(externalEventHandlers)
      });
    };
    const getInputProps = (externalProps = {}) => {
      const propsEventHandlers = {
        onBlur,
        onChange,
        onFocus
      };
      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
      const mergedEventHandlers = _extends({}, externalEventHandlers, {
        onBlur: handleBlur2(externalEventHandlers),
        onChange: handleChange(externalEventHandlers),
        onFocus: handleFocus(externalEventHandlers)
      });
      return _extends({}, mergedEventHandlers, {
        "aria-invalid": error || void 0,
        defaultValue,
        value,
        required,
        disabled
      }, externalProps, {
        ref: handleInputRef
      }, mergedEventHandlers);
    };
    return {
      disabled,
      error,
      focused,
      formControlContext,
      getInputProps,
      getRootProps,
      inputRef: handleInputRef,
      required,
      value
    };
  }
  "use client";
  "use client";
  const _excluded$N = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "defaultValue", "disabled", "endAdornment", "error", "id", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "startAdornment", "value", "type", "rows", "slotProps", "slots", "minRows", "maxRows"];
  const useUtilityClasses$F = (ownerState) => {
    const {
      disabled,
      error,
      focused,
      formControlContext,
      multiline,
      startAdornment,
      endAdornment
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", focused && "focused", Boolean(formControlContext) && "formControl", multiline && "multiline", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
      input: ["input", disabled && "disabled", multiline && "multiline"]
    };
    return composeClasses(slots, useClassNamesOverride(getInputUtilityClass$1));
  };
  const Input$1 = /* @__PURE__ */ React__namespace.forwardRef(function Input2(props, forwardedRef) {
    var _slots$root, _slots$textarea, _slots$input;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      autoComplete,
      autoFocus,
      className,
      defaultValue,
      disabled,
      endAdornment,
      error,
      id,
      multiline = false,
      name,
      onClick,
      onChange,
      onKeyDown,
      onKeyUp,
      onFocus,
      onBlur,
      placeholder,
      readOnly,
      required,
      startAdornment,
      value,
      type: typeProp,
      rows,
      slotProps = {},
      slots = {},
      minRows,
      maxRows
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$N);
    const {
      getRootProps,
      getInputProps,
      focused,
      formControlContext,
      error: errorState,
      disabled: disabledState
    } = useInput({
      disabled,
      defaultValue,
      error,
      onBlur,
      onClick,
      onChange,
      onFocus,
      required,
      value
    });
    const type = !multiline ? typeProp != null ? typeProp : "text" : void 0;
    const ownerState = _extends({}, props, {
      disabled: disabledState,
      error: errorState,
      focused,
      formControlContext,
      multiline,
      type
    });
    const classes = useUtilityClasses$F(ownerState);
    const propsToForward = {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      autoComplete,
      autoFocus,
      id,
      onKeyDown,
      onKeyUp,
      name,
      placeholder,
      readOnly,
      type
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: [classes.root, className]
    });
    const InputComponent = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : "textarea" : (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: InputComponent,
      getSlotProps: (otherHandlers) => {
        return getInputProps(_extends({}, propsToForward, otherHandlers));
      },
      externalSlotProps: slotProps.input,
      additionalProps: _extends({
        rows: multiline ? rows : void 0
      }, multiline && !isHostComponent(InputComponent) && {
        minRows: rows || minRows,
        maxRows: rows || maxRows
      }),
      ownerState,
      className: classes.input
    });
    if (process.env.NODE_ENV !== "production") {
      if (multiline) {
        if (rows) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
      children: [startAdornment, /* @__PURE__ */ jsxRuntimeExports.jsx(InputComponent, _extends({}, inputProps)), endAdornment]
    }));
  });
  process.env.NODE_ENV !== "production" ? Input$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    "aria-describedby": PropTypes.string,
    /**
     * @ignore
     */
    "aria-label": PropTypes.string,
    /**
     * @ignore
     */
    "aria-labelledby": PropTypes.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Class name applied to the root element.
     */
    className: PropTypes.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * Trailing adornment for this input.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * @ignore
     */
    inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.object
    })]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.number,
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.number,
    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * @ignore
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.number,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType,
      textarea: PropTypes.elementType
    }),
    /**
     * Leading adornment for this input.
     */
    startAdornment: PropTypes.node,
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.oneOf(["button", "checkbox", "color", "date", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]),
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  "use client";
  function getMenuUtilityClass$1(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  const menuClasses$1 = generateUtilityClasses("MuiMenu", ["root", "listbox", "expanded"]);
  const ListActionTypes = {
    blur: "list:blur",
    focus: "list:focus",
    itemClick: "list:itemClick",
    itemHover: "list:itemHover",
    itemsChange: "list:itemsChange",
    keyDown: "list:keyDown",
    resetHighlight: "list:resetHighlight",
    textNavigation: "list:textNavigation",
    clearSelection: "list:clearSelection"
  };
  function findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {
    if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {
      return -1;
    }
    let nextFocus = currentIndex;
    for (; ; ) {
      if (!wrapAround && lookupDirection === "next" && nextFocus === items.length || !wrapAround && lookupDirection === "previous" && nextFocus === -1) {
        return -1;
      }
      const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);
      if (nextFocusDisabled) {
        nextFocus += lookupDirection === "next" ? 1 : -1;
        if (wrapAround) {
          nextFocus = (nextFocus + items.length) % items.length;
        }
      } else {
        return nextFocus;
      }
    }
  }
  function moveHighlight(previouslyHighlightedValue, offset2, context) {
    var _items$nextIndex;
    const {
      items,
      isItemDisabled,
      disableListWrap,
      disabledItemsFocusable,
      itemComparer,
      focusManagement
    } = context;
    const defaultHighlightedIndex = focusManagement === "DOM" ? 0 : -1;
    const maxIndex = items.length - 1;
    const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex((item) => itemComparer(item, previouslyHighlightedValue));
    let nextIndexCandidate;
    let lookupDirection;
    let wrapAround = !disableListWrap;
    switch (offset2) {
      case "reset":
        if (defaultHighlightedIndex === -1) {
          return null;
        }
        nextIndexCandidate = 0;
        lookupDirection = "next";
        wrapAround = false;
        break;
      case "start":
        nextIndexCandidate = 0;
        lookupDirection = "next";
        wrapAround = false;
        break;
      case "end":
        nextIndexCandidate = maxIndex;
        lookupDirection = "previous";
        wrapAround = false;
        break;
      default: {
        const newIndex = previouslyHighlightedIndex + offset2;
        if (newIndex < 0) {
          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset2) > 1) {
            nextIndexCandidate = 0;
            lookupDirection = "next";
          } else {
            nextIndexCandidate = maxIndex;
            lookupDirection = "previous";
          }
        } else if (newIndex > maxIndex) {
          if (!wrapAround || Math.abs(offset2) > 1) {
            nextIndexCandidate = maxIndex;
            lookupDirection = "previous";
          } else {
            nextIndexCandidate = 0;
            lookupDirection = "next";
          }
        } else {
          nextIndexCandidate = newIndex;
          lookupDirection = offset2 >= 0 ? "next" : "previous";
        }
      }
    }
    const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);
    if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {
      return previouslyHighlightedValue;
    }
    return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;
  }
  function toggleSelection(item, selectedValues, selectionMode, itemComparer) {
    if (selectionMode === "none") {
      return [];
    }
    if (selectionMode === "single") {
      if (itemComparer(selectedValues[0], item)) {
        return selectedValues;
      }
      return [item];
    }
    if (selectedValues.some((sv) => itemComparer(sv, item))) {
      return selectedValues.filter((sv) => !itemComparer(sv, item));
    }
    return [...selectedValues, item];
  }
  function handleItemSelection(item, state, context) {
    const {
      itemComparer,
      isItemDisabled,
      selectionMode,
      items
    } = context;
    const {
      selectedValues
    } = state;
    const itemIndex = items.findIndex((i) => itemComparer(item, i));
    if (isItemDisabled(item, itemIndex)) {
      return state;
    }
    const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);
    return _extends({}, state, {
      selectedValues: newSelectedValues,
      highlightedValue: item
    });
  }
  function handleKeyDown(key, state, context) {
    const previouslySelectedValue = state.highlightedValue;
    const {
      orientation,
      pageSize: pageSize2
    } = context;
    switch (key) {
      case "Home":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, "start", context)
        });
      case "End":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, "end", context)
        });
      case "PageUp":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, -pageSize2, context)
        });
      case "PageDown":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, pageSize2, context)
        });
      case "ArrowUp":
        if (orientation !== "vertical") {
          break;
        }
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, -1, context)
        });
      case "ArrowDown":
        if (orientation !== "vertical") {
          break;
        }
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, 1, context)
        });
      case "ArrowLeft": {
        if (orientation === "vertical") {
          break;
        }
        const offset2 = orientation === "horizontal-ltr" ? -1 : 1;
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, offset2, context)
        });
      }
      case "ArrowRight": {
        if (orientation === "vertical") {
          break;
        }
        const offset2 = orientation === "horizontal-ltr" ? 1 : -1;
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, offset2, context)
        });
      }
      case "Enter":
      case " ":
        if (state.highlightedValue === null) {
          return state;
        }
        return handleItemSelection(state.highlightedValue, state, context);
      default:
        break;
    }
    return state;
  }
  function handleBlur(state, context) {
    if (context.focusManagement === "DOM") {
      return state;
    }
    return _extends({}, state, {
      highlightedValue: null
    });
  }
  function textCriteriaMatches$1(nextFocus, searchString, stringifyItem) {
    var _stringifyItem;
    const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();
    if (!text || text.length === 0) {
      return false;
    }
    return text.indexOf(searchString) === 0;
  }
  function handleTextNavigation(state, searchString, context) {
    const {
      items,
      isItemDisabled,
      disabledItemsFocusable,
      getItemAsString
    } = context;
    const startWithCurrentItem = searchString.length > 1;
    let nextItem2 = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);
    for (let index2 = 0; index2 < items.length; index2 += 1) {
      if (!nextItem2 || !startWithCurrentItem && state.highlightedValue === nextItem2) {
        return state;
      }
      if (textCriteriaMatches$1(nextItem2, searchString, getItemAsString) && (!isItemDisabled(nextItem2, items.indexOf(nextItem2)) || disabledItemsFocusable)) {
        return _extends({}, state, {
          highlightedValue: nextItem2
        });
      }
      nextItem2 = moveHighlight(nextItem2, 1, context);
    }
    return state;
  }
  function handleItemsChange(items, previousItems, state, context) {
    var _state$selectedValues;
    const {
      itemComparer,
      focusManagement
    } = context;
    let newHighlightedValue = null;
    if (state.highlightedValue != null) {
      var _items$find;
      newHighlightedValue = (_items$find = items.find((item) => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;
    } else if (focusManagement === "DOM" && previousItems.length === 0) {
      newHighlightedValue = moveHighlight(null, "reset", context);
    }
    const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];
    const newSelectedValues = selectedValues.filter((selectedValue) => items.some((item) => itemComparer(item, selectedValue)));
    return _extends({}, state, {
      highlightedValue: newHighlightedValue,
      selectedValues: newSelectedValues
    });
  }
  function handleResetHighlight(state, context) {
    return _extends({}, state, {
      highlightedValue: moveHighlight(null, "reset", context)
    });
  }
  function handleClearSelection(state, context) {
    return _extends({}, state, {
      selectedValues: [],
      highlightedValue: moveHighlight(null, "reset", context)
    });
  }
  function listReducer(state, action) {
    const {
      type,
      context
    } = action;
    switch (type) {
      case ListActionTypes.keyDown:
        return handleKeyDown(action.key, state, context);
      case ListActionTypes.itemClick:
        return handleItemSelection(action.item, state, context);
      case ListActionTypes.blur:
        return handleBlur(state, context);
      case ListActionTypes.textNavigation:
        return handleTextNavigation(state, action.searchString, context);
      case ListActionTypes.itemsChange:
        return handleItemsChange(action.items, action.previousItems, state, context);
      case ListActionTypes.resetHighlight:
        return handleResetHighlight(state, context);
      case ListActionTypes.clearSelection:
        return handleClearSelection(state, context);
      default:
        return state;
    }
  }
  "use client";
  const TEXT_NAVIGATION_RESET_TIMEOUT = 500;
  function useTextNavigation(callback) {
    const textCriteriaRef = React__namespace.useRef({
      searchString: "",
      lastTime: null
    });
    return React__namespace.useCallback((event) => {
      if (event.key.length === 1 && event.key !== " ") {
        const textCriteria = textCriteriaRef.current;
        const lowerKey = event.key.toLowerCase();
        const currentTime = performance.now();
        if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
          textCriteria.searchString = lowerKey;
        } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
          textCriteria.searchString += lowerKey;
        }
        textCriteria.lastTime = currentTime;
        callback(textCriteria.searchString, event);
      }
    }, [callback]);
  }
  "use client";
  const EMPTY_OBJECT = {};
  const NOOP = () => {
  };
  const defaultItemComparer = (optionA, optionB) => optionA === optionB;
  const defaultIsItemDisabled = () => false;
  const defaultItemStringifier = (item) => typeof item === "string" ? item : String(item);
  const defaultGetInitialState = () => ({
    highlightedValue: null,
    selectedValues: []
  });
  function useList(params) {
    const {
      controlledProps = EMPTY_OBJECT,
      disabledItemsFocusable = false,
      disableListWrap = false,
      focusManagement = "activeDescendant",
      getInitialState = defaultGetInitialState,
      getItemDomElement,
      getItemId,
      isItemDisabled = defaultIsItemDisabled,
      rootRef: externalListRef,
      onStateChange = NOOP,
      items,
      itemComparer = defaultItemComparer,
      getItemAsString = defaultItemStringifier,
      onChange,
      onHighlightChange,
      onItemsChange,
      orientation = "vertical",
      pageSize: pageSize2 = 5,
      reducerActionContext = EMPTY_OBJECT,
      selectionMode = "single",
      stateReducer: externalReducer,
      componentName = "useList"
    } = params;
    if (process.env.NODE_ENV !== "production") {
      if (focusManagement === "DOM" && getItemDomElement == null) {
        throw new Error("useList: The `getItemDomElement` prop is required when using the `DOM` focus management.");
      }
      if (focusManagement === "activeDescendant" && getItemId == null) {
        throw new Error("useList: The `getItemId` prop is required when using the `activeDescendant` focus management.");
      }
    }
    const listRef = React__namespace.useRef(null);
    const handleRef = useForkRef(externalListRef, listRef);
    const handleHighlightChange = React__namespace.useCallback((event, value, reason) => {
      onHighlightChange == null || onHighlightChange(event, value, reason);
      if (focusManagement === "DOM" && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {
        var _getItemDomElement;
        getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null || _getItemDomElement.focus();
      }
    }, [getItemDomElement, onHighlightChange, focusManagement]);
    const stateComparers = React__namespace.useMemo(() => ({
      highlightedValue: itemComparer,
      selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)
    }), [itemComparer]);
    const handleStateChange = React__namespace.useCallback((event, field, value, reason, state2) => {
      onStateChange == null || onStateChange(event, field, value, reason, state2);
      switch (field) {
        case "highlightedValue":
          handleHighlightChange(event, value, reason);
          break;
        case "selectedValues":
          onChange == null || onChange(event, value, reason);
          break;
        default:
          break;
      }
    }, [handleHighlightChange, onChange, onStateChange]);
    const listActionContext = React__namespace.useMemo(() => {
      return {
        disabledItemsFocusable,
        disableListWrap,
        focusManagement,
        isItemDisabled,
        itemComparer,
        items,
        getItemAsString,
        onHighlightChange: handleHighlightChange,
        orientation,
        pageSize: pageSize2,
        selectionMode,
        stateComparers
      };
    }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize2, selectionMode, stateComparers]);
    const initialState = getInitialState();
    const reducer = externalReducer != null ? externalReducer : listReducer;
    const actionContext = React__namespace.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);
    const [state, dispatch] = useControllableReducer({
      reducer,
      actionContext,
      initialState,
      controlledProps,
      stateComparers,
      onStateChange: handleStateChange,
      componentName
    });
    const {
      highlightedValue,
      selectedValues
    } = state;
    const handleTextNavigation2 = useTextNavigation((searchString, event) => dispatch({
      type: ListActionTypes.textNavigation,
      event,
      searchString
    }));
    const previousItems = React__namespace.useRef([]);
    React__namespace.useEffect(() => {
      if (areArraysEqual(previousItems.current, items, itemComparer)) {
        return;
      }
      dispatch({
        type: ListActionTypes.itemsChange,
        event: null,
        items,
        previousItems: previousItems.current
      });
      previousItems.current = items;
      onItemsChange == null || onItemsChange(items);
    }, [items, itemComparer, dispatch, onItemsChange]);
    const createHandleKeyDown = (externalHandlers) => (event) => {
      var _externalHandlers$onK;
      (_externalHandlers$onK = externalHandlers.onKeyDown) == null || _externalHandlers$onK.call(externalHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      const keysToPreventDefault = ["Home", "End", "PageUp", "PageDown"];
      if (orientation === "vertical") {
        keysToPreventDefault.push("ArrowUp", "ArrowDown");
      } else {
        keysToPreventDefault.push("ArrowLeft", "ArrowRight");
      }
      if (focusManagement === "activeDescendant") {
        keysToPreventDefault.push(" ", "Enter");
      }
      if (keysToPreventDefault.includes(event.key)) {
        event.preventDefault();
      }
      dispatch({
        type: ListActionTypes.keyDown,
        key: event.key,
        event
      });
      handleTextNavigation2(event);
    };
    const createHandleBlur = (externalHandlers) => (event) => {
      var _externalHandlers$onB, _listRef$current;
      (_externalHandlers$onB = externalHandlers.onBlur) == null || _externalHandlers$onB.call(externalHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {
        return;
      }
      dispatch({
        type: ListActionTypes.blur,
        event
      });
    };
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      return _extends({}, externalProps, {
        "aria-activedescendant": focusManagement === "activeDescendant" && highlightedValue != null ? getItemId(highlightedValue) : void 0,
        tabIndex: focusManagement === "DOM" ? -1 : 0,
        ref: handleRef
      }, externalEventHandlers, {
        onBlur: createHandleBlur(externalEventHandlers),
        onKeyDown: createHandleKeyDown(externalEventHandlers)
      });
    };
    const getItemState = React__namespace.useCallback((item) => {
      const selected = (selectedValues != null ? selectedValues : []).some((value) => value != null && itemComparer(item, value));
      const highlighted = highlightedValue != null && itemComparer(item, highlightedValue);
      const focusable = focusManagement === "DOM";
      return {
        focusable,
        highlighted,
        selected
      };
    }, [itemComparer, selectedValues, highlightedValue, focusManagement]);
    const contextValue = React__namespace.useMemo(() => ({
      dispatch,
      getItemState
    }), [dispatch, getItemState]);
    React__namespace.useDebugValue({
      state
    });
    return {
      contextValue,
      dispatch,
      getRootProps,
      rootRef: handleRef,
      state
    };
  }
  const ListContext$1 = /* @__PURE__ */ React__namespace.createContext(null);
  if (process.env.NODE_ENV !== "production") {
    ListContext$1.displayName = "ListContext";
  }
  "use client";
  function useListItem(parameters) {
    const {
      handlePointerOverEvents = false,
      item
    } = parameters;
    const listContext = React__namespace.useContext(ListContext$1);
    if (!listContext) {
      throw new Error("useListItem must be used within a ListProvider");
    }
    const {
      dispatch,
      getItemState
    } = listContext;
    const {
      highlighted,
      selected,
      focusable
    } = getItemState(item);
    const createHandleClick = React__namespace.useCallback((externalHandlers) => (event) => {
      var _externalHandlers$onC;
      (_externalHandlers$onC = externalHandlers.onClick) == null || _externalHandlers$onC.call(externalHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        if (item === void 0) {
          throw new Error(["MUI: The `item` provided to useListItem() is undefined.", "This should happen only during server-side rendering under React 17."].join("\n"));
        }
      }
      dispatch({
        type: ListActionTypes.itemClick,
        item,
        event
      });
    }, [dispatch, item]);
    const createHandlePointerOver = React__namespace.useCallback((externalHandlers) => (event) => {
      var _externalHandlers$onM;
      (_externalHandlers$onM = externalHandlers.onMouseOver) == null || _externalHandlers$onM.call(externalHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        if (item === void 0) {
          throw new Error(["MUI: The `item` provided to useListItem() is undefined.", "This should happen only during server-side rendering under React 17."].join("\n"));
        }
      }
      dispatch({
        type: ListActionTypes.itemHover,
        item,
        event
      });
    }, [dispatch, item]);
    let tabIndex;
    if (focusable) {
      tabIndex = highlighted ? 0 : -1;
    }
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      return _extends({}, externalProps, {
        onClick: createHandleClick(externalEventHandlers),
        onPointerOver: handlePointerOverEvents ? createHandlePointerOver(externalEventHandlers) : void 0,
        tabIndex
      });
    };
    return {
      getRootProps,
      highlighted,
      selected
    };
  }
  "use client";
  function menuReducer(state, action) {
    if (action.type === ListActionTypes.itemHover) {
      return state;
    }
    const newState = listReducer(state, action);
    if (newState.highlightedValue === null && action.context.items.length > 0) {
      return _extends({}, newState, {
        highlightedValue: action.context.items[0]
      });
    }
    if (action.type === ListActionTypes.keyDown) {
      if (action.event.key === "Escape") {
        return _extends({}, newState, {
          open: false
        });
      }
    }
    if (action.type === ListActionTypes.blur) {
      var _action$context$listb;
      if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {
        var _action$context$listb2, _action$event$related;
        const listboxId = (_action$context$listb2 = action.context.listboxRef.current) == null ? void 0 : _action$context$listb2.getAttribute("id");
        const controlledBy = (_action$event$related = action.event.relatedTarget) == null ? void 0 : _action$event$related.getAttribute("aria-controls");
        if (listboxId && controlledBy && listboxId === controlledBy) {
          return newState;
        }
        return _extends({}, newState, {
          open: false,
          highlightedValue: action.context.items[0]
        });
      }
    }
    return newState;
  }
  "use client";
  "use client";
  const CompoundComponentContext = /* @__PURE__ */ React__namespace.createContext(null);
  CompoundComponentContext.displayName = "CompoundComponentContext";
  function sortSubitems(subitems) {
    const subitemsArray = Array.from(subitems.keys()).map((key) => {
      const subitem = subitems.get(key);
      return {
        key,
        subitem
      };
    });
    subitemsArray.sort((a, b) => {
      const aNode = a.subitem.ref.current;
      const bNode = b.subitem.ref.current;
      if (aNode === null || bNode === null || aNode === bNode) {
        return 0;
      }
      return aNode.compareDocumentPosition(bNode) & Node.DOCUMENT_POSITION_PRECEDING ? 1 : -1;
    });
    return new Map(subitemsArray.map((item) => [item.key, item.subitem]));
  }
  function useCompoundParent() {
    const [subitems, setSubitems] = React__namespace.useState(/* @__PURE__ */ new Map());
    const subitemKeys = React__namespace.useRef(/* @__PURE__ */ new Set());
    const deregisterItem = React__namespace.useCallback(function deregisterItem2(id) {
      subitemKeys.current.delete(id);
      setSubitems((previousState) => {
        const newState = new Map(previousState);
        newState.delete(id);
        return newState;
      });
    }, []);
    const registerItem = React__namespace.useCallback(function registerItem2(id, item) {
      let providedOrGeneratedId;
      if (typeof id === "function") {
        providedOrGeneratedId = id(subitemKeys.current);
      } else {
        providedOrGeneratedId = id;
      }
      subitemKeys.current.add(providedOrGeneratedId);
      setSubitems((previousState) => {
        const newState = new Map(previousState);
        newState.set(providedOrGeneratedId, item);
        return newState;
      });
      return {
        id: providedOrGeneratedId,
        deregister: () => deregisterItem(providedOrGeneratedId)
      };
    }, [deregisterItem]);
    const sortedSubitems = React__namespace.useMemo(() => sortSubitems(subitems), [subitems]);
    const getItemIndex = React__namespace.useCallback(function getItemIndex2(id) {
      return Array.from(sortedSubitems.keys()).indexOf(id);
    }, [sortedSubitems]);
    const contextValue = React__namespace.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount: subitems.size
    }), [getItemIndex, registerItem, subitems.size]);
    return {
      contextValue,
      subitems: sortedSubitems
    };
  }
  "use client";
  function useCompoundItem(id, itemMetadata) {
    const context = React__namespace.useContext(CompoundComponentContext);
    if (context === null) {
      throw new Error("useCompoundItem must be used within a useCompoundParent");
    }
    const {
      registerItem
    } = context;
    const [registeredId, setRegisteredId] = React__namespace.useState(typeof id === "function" ? void 0 : id);
    useEnhancedEffect(() => {
      const {
        id: returnedId,
        deregister
      } = registerItem(id, itemMetadata);
      setRegisteredId(returnedId);
      return deregister;
    }, [registerItem, itemMetadata, id]);
    return {
      id: registeredId,
      index: registeredId !== void 0 ? context.getItemIndex(registeredId) : -1,
      totalItemCount: context.totalSubitemCount
    };
  }
  "use client";
  function combineHooksSlotProps(getFirstProps, getSecondProps) {
    return function getCombinedProps(external = {}) {
      const firstResult = _extends({}, external, getFirstProps(external));
      const result = _extends({}, firstResult, getSecondProps(firstResult));
      return result;
    };
  }
  "use client";
  const FALLBACK_MENU_CONTEXT$1 = {
    dispatch: () => {
    },
    popupId: "",
    registerPopup: () => {
    },
    registerTrigger: () => {
    },
    state: {
      open: true
    },
    triggerElement: null
  };
  function useMenu(parameters = {}) {
    var _useId, _React$useContext;
    const {
      listboxRef: listboxRefProp,
      onItemsChange,
      id: idParam,
      disabledItemsFocusable = true,
      disableListWrap = false,
      autoFocus = true,
      componentName = "useMenu"
    } = parameters;
    const rootRef = React__namespace.useRef(null);
    const handleRef = useForkRef(rootRef, listboxRefProp);
    const listboxId = (_useId = useId(idParam)) != null ? _useId : "";
    const {
      state: {
        open
      },
      dispatch: menuDispatch,
      triggerElement,
      registerPopup
    } = (_React$useContext = React__namespace.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT$1;
    const isInitiallyOpen = React__namespace.useRef(open);
    const {
      subitems,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const subitemKeys = React__namespace.useMemo(() => Array.from(subitems.keys()), [subitems]);
    const getItemDomElement = React__namespace.useCallback((itemId) => {
      var _subitems$get$ref$cur, _subitems$get;
      if (itemId == null) {
        return null;
      }
      return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;
    }, [subitems]);
    const isItemDisabled = React__namespace.useCallback((id) => {
      var _subitems$get2;
      return (subitems == null || (_subitems$get2 = subitems.get(id)) == null ? void 0 : _subitems$get2.disabled) || false;
    }, [subitems]);
    const getItemAsString = React__namespace.useCallback((id) => {
      var _subitems$get3, _subitems$get4;
      return ((_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.label) || ((_subitems$get4 = subitems.get(id)) == null || (_subitems$get4 = _subitems$get4.ref.current) == null ? void 0 : _subitems$get4.innerText);
    }, [subitems]);
    const reducerActionContext = React__namespace.useMemo(() => ({
      listboxRef: rootRef
    }), [rootRef]);
    const {
      dispatch: listDispatch,
      getRootProps: getListRootProps,
      contextValue: listContextValue,
      state: {
        highlightedValue
      },
      rootRef: mergedListRef
    } = useList({
      disabledItemsFocusable,
      disableListWrap,
      focusManagement: "DOM",
      getItemDomElement,
      getInitialState: () => ({
        selectedValues: [],
        highlightedValue: null
      }),
      isItemDisabled,
      items: subitemKeys,
      getItemAsString,
      rootRef: handleRef,
      onItemsChange,
      reducerActionContext,
      selectionMode: "none",
      stateReducer: menuReducer,
      componentName
    });
    useEnhancedEffect(() => {
      registerPopup(listboxId);
    }, [listboxId, registerPopup]);
    React__namespace.useEffect(() => {
      if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {
        var _subitems$get5;
        (_subitems$get5 = subitems.get(highlightedValue)) == null || (_subitems$get5 = _subitems$get5.ref) == null || (_subitems$get5 = _subitems$get5.current) == null || _subitems$get5.focus();
      }
    }, [open, autoFocus, highlightedValue, subitems, subitemKeys]);
    React__namespace.useEffect(() => {
      var _rootRef$current;
      if ((_rootRef$current = rootRef.current) != null && _rootRef$current.contains(document.activeElement) && highlightedValue !== null) {
        var _subitems$get6;
        subitems == null || (_subitems$get6 = subitems.get(highlightedValue)) == null || (_subitems$get6 = _subitems$get6.ref.current) == null || _subitems$get6.focus();
      }
    }, [highlightedValue, subitems]);
    const createHandleBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur, _rootRef$current2;
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if ((_rootRef$current2 = rootRef.current) != null && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {
        return;
      }
      menuDispatch({
        type: DropdownActionTypes.blur,
        event
      });
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if (event.key === "Escape") {
        menuDispatch({
          type: DropdownActionTypes.escapeKeyDown,
          event
        });
      }
    };
    const getOwnListboxHandlers = (otherHandlers = {}) => ({
      onBlur: createHandleBlur(otherHandlers),
      onKeyDown: createHandleKeyDown(otherHandlers)
    });
    const getListboxProps = (externalProps = {}) => {
      const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);
      const externalEventHandlers = extractEventHandlers(externalProps);
      return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {
        id: listboxId,
        role: "menu"
      });
    };
    React__namespace.useDebugValue({
      subitems,
      highlightedValue
    });
    return {
      contextValue: _extends({}, compoundComponentContextValue, listContextValue),
      dispatch: listDispatch,
      getListboxProps,
      highlightedValue,
      listboxRef: mergedListRef,
      menuItems: subitems,
      open,
      triggerElement
    };
  }
  "use client";
  function MenuProvider(props) {
    const {
      value,
      children
    } = props;
    const {
      dispatch,
      getItemIndex,
      getItemState,
      registerItem,
      totalSubitemCount
    } = value;
    const listContextValue = React__namespace.useMemo(() => ({
      dispatch,
      getItemState,
      getItemIndex
    }), [dispatch, getItemIndex, getItemState]);
    const compoundComponentContextValue = React__namespace.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
        value: listContextValue,
        children
      })
    });
  }
  "use client";
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements$1 = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
  function getNodeName$1(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }
  function getWindow$1(node2) {
    if (node2 == null) {
      return window;
    }
    if (node2.toString() !== "[object Window]") {
      var ownerDocument2 = node2.ownerDocument;
      return ownerDocument2 ? ownerDocument2.defaultView || window : window;
    }
    return node2;
  }
  function isElement$1(node2) {
    var OwnElement = getWindow$1(node2).Element;
    return node2 instanceof OwnElement || node2 instanceof Element;
  }
  function isHTMLElement$2(node2) {
    var OwnElement = getWindow$1(node2).HTMLElement;
    return node2 instanceof OwnElement || node2 instanceof HTMLElement;
  }
  function isShadowRoot$1(node2) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow$1(node2).ShadowRoot;
    return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
  }
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style2 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement$2(element) || !getNodeName$1(element)) {
        return;
      }
      Object.assign(element.style, style2);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style2 = styleProperties.reduce(function(style3, property) {
          style3[property] = "";
          return style3;
        }, {});
        if (!isHTMLElement$2(element) || !getNodeName$1(element)) {
          return;
        }
        Object.assign(element.style, style2);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  const applyStyles$1 = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect: effect$2,
    requires: ["computeStyles"]
  };
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }
  var max$1 = Math.max;
  var min$1 = Math.min;
  var round$1 = Math.round;
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }
  function getBoundingClientRect$1(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement$2(element)) {
      scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement$1(element) ? getWindow$1(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width2 = clientRect.width / scaleX;
    var height2 = clientRect.height / scaleY;
    return {
      width: width2,
      height: height2,
      top: y2,
      right: x + width2,
      bottom: y2 + height2,
      left: x,
      x,
      y: y2
    };
  }
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect$1(element);
    var width2 = element.offsetWidth;
    var height2 = element.offsetHeight;
    if (Math.abs(clientRect.width - width2) <= 1) {
      width2 = clientRect.width;
    }
    if (Math.abs(clientRect.height - height2) <= 1) {
      height2 = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width2,
      height: height2
    };
  }
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot$1(rootNode)) {
      var next2 = child;
      do {
        if (next2 && parent.isSameNode(next2)) {
          return true;
        }
        next2 = next2.parentNode || next2.host;
      } while (next2);
    }
    return false;
  }
  function getComputedStyle$1(element) {
    return getWindow$1(element).getComputedStyle(element);
  }
  function isTableElement$1(element) {
    return ["table", "td", "th"].indexOf(getNodeName$1(element)) >= 0;
  }
  function getDocumentElement$1(element) {
    return ((isElement$1(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }
  function getParentNode$1(element) {
    if (getNodeName$1(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot$1(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement$1(element)
    );
  }
  function getTrueOffsetParent$1(element) {
    if (!isHTMLElement$2(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock$1(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement$2(element)) {
      var elementCss = getComputedStyle$1(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode$1(element);
    if (isShadowRoot$1(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement$2(currentNode) && ["html", "body"].indexOf(getNodeName$1(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent$1(element) {
    var window2 = getWindow$1(element);
    var offsetParent = getTrueOffsetParent$1(element);
    while (offsetParent && isTableElement$1(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent$1(offsetParent);
    }
    if (offsetParent && (getNodeName$1(offsetParent) === "html" || getNodeName$1(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock$1(element) || window2;
  }
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }
  function within(min2, value, max2) {
    return max$1(min2, min$1(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }
  var toPaddingObject = function toPaddingObject2(padding2, state) {
    padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding2;
    return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
  };
  function arrow$2(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent$1(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect$1(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  const arrow$3 = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow$2,
    effect: effect$1,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };
  function getVariation(placement) {
    return placement.split("-")[1];
  }
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y2 = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round$1(x * dpr) / dpr || 0,
      y: round$1(y2 * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y: y2
    }) : {
      x,
      y: y2
    };
    x = _ref3.x;
    y2 = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent$1(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow$1(popper2)) {
        offsetParent = getDocumentElement$1(popper2);
        if (getComputedStyle$1(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y2 -= offsetY - popperRect.height;
        y2 *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y: y2
    }, getWindow$1(popper2)) : {
      x,
      y: y2
    };
    x = _ref4.x;
    y2 = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y2 + "px)" : "translate3d(" + x + "px, " + y2 + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  const computeStyles$1 = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };
  var passive = {
    passive: true
  };
  function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow$1(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  const eventListeners = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect,
    data: {}
  };
  var hash$1 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement$1(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash$1[matched];
    });
  }
  var hash = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash[matched];
    });
  }
  function getWindowScroll(node2) {
    var win = getWindow$1(node2);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }
  function getWindowScrollBarX$1(element) {
    return getBoundingClientRect$1(getDocumentElement$1(element)).left + getWindowScroll(element).scrollLeft;
  }
  function getViewportRect$1(element, strategy) {
    var win = getWindow$1(element);
    var html = getDocumentElement$1(element);
    var visualViewport = win.visualViewport;
    var width2 = html.clientWidth;
    var height2 = html.clientHeight;
    var x = 0;
    var y2 = 0;
    if (visualViewport) {
      width2 = visualViewport.width;
      height2 = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width: width2,
      height: height2,
      x: x + getWindowScrollBarX$1(element),
      y: y2
    };
  }
  function getDocumentRect$1(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement$1(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width2 = max$1(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height2 = max$1(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX$1(element);
    var y2 = -winScroll.scrollTop;
    if (getComputedStyle$1(body || html).direction === "rtl") {
      x += max$1(html.clientWidth, body ? body.clientWidth : 0) - width2;
    }
    return {
      width: width2,
      height: height2,
      x,
      y: y2
    };
  }
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle$1(element), overflow2 = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow2 + overflowY + overflowX);
  }
  function getScrollParent(node2) {
    if (["html", "body", "#document"].indexOf(getNodeName$1(node2)) >= 0) {
      return node2.ownerDocument.body;
    }
    if (isHTMLElement$2(node2) && isScrollParent(node2)) {
      return node2;
    }
    return getScrollParent(getParentNode$1(node2));
  }
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow$1(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode$1(target)))
    );
  }
  function rectToClientRect$1(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  function getInnerBoundingClientRect$1(element, strategy) {
    var rect = getBoundingClientRect$1(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect$1(getViewportRect$1(element, strategy)) : isElement$1(clippingParent) ? getInnerBoundingClientRect$1(clippingParent, strategy) : rectToClientRect$1(getDocumentRect$1(getDocumentElement$1(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode$1(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement$2(element) ? getOffsetParent$1(element) : element;
    if (!isElement$1(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName$1(clippingParent) !== "body";
    });
  }
  function getClippingRect$1(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max$1(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max$1(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }
  function detectOverflow$1(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect$1(isElement$1(element) ? element : element.contextElement || getDocumentElement$1(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect$1(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect$1(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements$1 : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow$1(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement$1(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip$1(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement$1(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow2 = detectOverflow$1(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding2
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement$1(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement$1(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow2[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow2[mainVariationSide] <= 0, overflow2[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  const flip$2 = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip$1,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };
  function getSideOffsets$1(overflow2, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow2.top - rect.height - preventedOffsets.y,
      right: overflow2.right - rect.width + preventedOffsets.x,
      bottom: overflow2.bottom - rect.height + preventedOffsets.y,
      left: overflow2.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped$1(overflow2) {
    return [top, right, bottom, left].some(function(side) {
      return overflow2[side] >= 0;
    });
  }
  function hide$1(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow$1(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow$1(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets$1(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets$1(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped$1(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped$1(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  const hide$2 = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide$1
  };
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset$1(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements$1.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y2 = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y2;
    }
    state.modifiersData[name] = data;
  }
  const offset$2 = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset$1
  };
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  const popperOffsets$1 = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow2 = detectOverflow$1(state, {
      boundary,
      rootBoundary,
      padding: padding2,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow2[mainSide];
      var max2 = offset2 - overflow2[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent$1(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min$1(min2, tetherMin) : min2, offset2, tether ? max$1(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow2[_mainSide];
      var _max = _offset - overflow2[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  const preventOverflow$1 = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  function getNodeScroll$1(node2) {
    if (node2 === getWindow$1(node2) || !isHTMLElement$2(node2)) {
      return getWindowScroll(node2);
    } else {
      return getHTMLElementScroll(node2);
    }
  }
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round$1(rect.width) / element.offsetWidth || 1;
    var scaleY = round$1(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement$2(offsetParent);
    var offsetParentIsScaled = isHTMLElement$2(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement$1(offsetParent);
    var rect = getBoundingClientRect$1(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName$1(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll$1(offsetParent);
      }
      if (isHTMLElement$2(offsetParent)) {
        offsets = getBoundingClientRect$1(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX$1(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }
  function debounce(fn) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement$1(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent$1(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
            if (state.reset === true) {
              state.reset = false;
              index2 = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index2], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn === "function") {
              state = fn({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect2 = _ref.effect;
          if (typeof effect2 === "function") {
            var cleanupFn = effect2({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn) {
          return fn();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper$2 = /* @__PURE__ */ popperGenerator();
  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /* @__PURE__ */ popperGenerator({
    defaultModifiers: defaultModifiers$1
  });
  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$2, flip$2, preventOverflow$1, arrow$3, hide$2];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });
  "use client";
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  const Portal = /* @__PURE__ */ React__namespace.forwardRef(function Portal2(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React__namespace.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React__namespace.isValidElement(children) ? children.ref : null, forwardedRef);
    useEnhancedEffect(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect(() => {
      if (mountNode && !disablePortal) {
        setRef(forwardedRef, mountNode);
        return () => {
          setRef(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React__namespace.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React__namespace.cloneElement(children, newProps);
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
        children
      });
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: mountNode ? /* @__PURE__ */ ReactDOM__namespace.createPortal(children, mountNode) : mountNode
    });
  });
  process.env.NODE_ENV !== "production" ? Portal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The children to render into the `container`.
     */
    children: PropTypes.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  "use client";
  function getPopperUtilityClass(slot) {
    return generateUtilityClass("MuiPopper", slot);
  }
  const popperClasses = generateUtilityClasses("MuiPopper", ["root"]);
  "use client";
  const _excluded$M = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"], _excluded2$4 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
  function flipPlacement(placement, direction) {
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl$1(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  function isHTMLElement$1(element) {
    return element.nodeType !== void 0;
  }
  function isVirtualElement(element) {
    return !isHTMLElement$1(element);
  }
  const useUtilityClasses$E = () => {
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, useClassNamesOverride(getPopperUtilityClass));
  };
  const defaultPopperOptions = {};
  const PopperTooltip = /* @__PURE__ */ React__namespace.forwardRef(function PopperTooltip2(props, forwardedRef) {
    var _slots$root;
    const {
      anchorEl,
      children,
      direction,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      slotProps = {},
      slots = {},
      TransitionProps
      // @ts-ignore internal logic
      // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$M);
    const tooltipRef = React__namespace.useRef(null);
    const ownRef = useForkRef(tooltipRef, forwardedRef);
    const popperRef = React__namespace.useRef(null);
    const handlePopperRef = useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = React__namespace.useRef(handlePopperRef);
    useEnhancedEffect(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React__namespace.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    const [placement, setPlacement] = React__namespace.useState(rtlPlacement);
    const [resolvedAnchorElement, setResolvedAnchorElement] = React__namespace.useState(resolveAnchorEl$1(anchorEl));
    React__namespace.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    React__namespace.useEffect(() => {
      if (anchorEl) {
        setResolvedAnchorElement(resolveAnchorEl$1(anchorEl));
      }
    }, [anchorEl]);
    useEnhancedEffect(() => {
      if (!resolvedAnchorElement || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      if (process.env.NODE_ENV !== "production") {
        if (resolvedAnchorElement && isHTMLElement$1(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
          const box = resolvedAnchorElement.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper2);
      return () => {
        popper2.destroy();
        handlePopperRefRef.current(null);
      };
    }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    const classes = useUtilityClasses$E();
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tooltip",
        ref: ownRef
      },
      ownerState: props,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  const Popper = /* @__PURE__ */ React__namespace.forwardRef(function Popper2(props, forwardedRef) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style: style2,
      transition = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded2$4);
    const [exited, setExited] = React__namespace.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    }
    let container;
    if (containerProp) {
      container = containerProp;
    } else if (anchorEl) {
      const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);
      container = resolvedAnchorEl && isHTMLElement$1(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
    }
    const display2 = !open && keepMounted && (!transition || exited) ? "none" : void 0;
    const transitionProps = transition ? {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    } : void 0;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, {
      disablePortal,
      container,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(PopperTooltip, _extends({
        anchorEl,
        direction,
        disablePortal,
        modifiers,
        ref: forwardedRef,
        open: transition ? !exited : open,
        placement,
        popperOptions,
        popperRef,
        slotProps,
        slots
      }, other, {
        style: _extends({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: "fixed",
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display: display2
        }, style2),
        TransitionProps: transitionProps,
        children
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? Popper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl$1(props.anchorEl);
        if (resolvedAnchorEl && isHTMLElement$1(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Popper render function or node.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * Direction of the text.
     * @default 'ltr'
     */
    direction: PropTypes.oneOf(["ltr", "rtl"]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: PropTypes.arrayOf(PropTypes.shape({
      data: PropTypes.object,
      effect: PropTypes.func,
      enabled: PropTypes.bool,
      fn: PropTypes.func,
      name: PropTypes.any,
      options: PropTypes.object,
      phase: PropTypes.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: PropTypes.arrayOf(PropTypes.string),
      requiresIfExists: PropTypes.arrayOf(PropTypes.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: PropTypes.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: PropTypes.shape({
      modifiers: PropTypes.array,
      onFirstUpdate: PropTypes.func,
      placement: PropTypes.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: PropTypes.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: PropTypes.bool
  } : void 0;
  "use client";
  "use client";
  const _excluded$L = ["actions", "anchor", "children", "onItemsChange", "slotProps", "slots"];
  function useUtilityClasses$D(ownerState) {
    const {
      open
    } = ownerState;
    const slots = {
      root: ["root", open && "expanded"],
      listbox: ["listbox", open && "expanded"]
    };
    return composeClasses(slots, useClassNamesOverride(getMenuUtilityClass$1));
  }
  const Menu$1 = /* @__PURE__ */ React__namespace.forwardRef(function Menu2(props, forwardedRef) {
    var _slots$root, _slots$listbox;
    const {
      actions,
      anchor: anchorProp,
      children,
      onItemsChange,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$L);
    const {
      contextValue,
      getListboxProps,
      dispatch,
      open,
      triggerElement
    } = useMenu({
      onItemsChange,
      componentName: "Menu"
    });
    const anchor = anchorProp != null ? anchorProp : triggerElement;
    React__namespace.useImperativeHandle(actions, () => ({
      dispatch,
      resetHighlight: () => dispatch({
        type: ListActionTypes.resetHighlight,
        event: null
      })
    }), [dispatch]);
    const ownerState = _extends({}, props, {
      open
    });
    const classes = useUtilityClasses$D(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef,
        role: void 0
      },
      className: classes.root,
      ownerState
    });
    const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
    const listboxProps = useSlotProps({
      elementType: Listbox,
      getSlotProps: getListboxProps,
      externalSlotProps: slotProps.listbox,
      className: classes.listbox,
      ownerState
    });
    if (open === true && anchor == null) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Listbox, _extends({}, listboxProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuProvider, {
            value: contextValue,
            children
          })
        }))
      }));
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Popper, _extends({}, rootProps, {
      open,
      anchorEl: anchor,
      slots: {
        root: Root
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Listbox, _extends({}, listboxProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuProvider, {
          value: contextValue,
          children
        })
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Menu$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref with imperative actions that can be performed on the menu.
     */
    actions: refType,
    /**
     * The element based on which the menu is positioned.
     */
    anchor: PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * Function called when the items displayed in the menu change.
     */
    onItemsChange: PropTypes.func,
    /**
     * The props used for each slot inside the Menu.
     * @default {}
     */
    slotProps: PropTypes.shape({
      listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Menu.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      listbox: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function useMenuButton(parameters = {}) {
    const {
      disabled = false,
      focusableWhenDisabled,
      rootRef: externalRef
    } = parameters;
    const menuContext = React__namespace.useContext(DropdownContext);
    if (menuContext === null) {
      throw new Error("useMenuButton: no menu context available.");
    }
    const {
      state,
      dispatch,
      registerTrigger,
      popupId
    } = menuContext;
    const {
      getRootProps: getButtonRootProps,
      rootRef: buttonRootRef,
      active
    } = useButton({
      disabled,
      focusableWhenDisabled,
      rootRef: externalRef
    });
    const handleRef = useForkRef(buttonRootRef, registerTrigger);
    const createHandleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      dispatch({
        type: DropdownActionTypes.toggle,
        event
      });
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        event.preventDefault();
        dispatch({
          type: DropdownActionTypes.open,
          event
        });
      }
    };
    const getOwnRootProps = (otherHandlers = {}) => ({
      onClick: createHandleClick(otherHandlers),
      onKeyDown: createHandleKeyDown(otherHandlers)
    });
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      const getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);
      return _extends({
        "aria-haspopup": "menu",
        "aria-expanded": state.open,
        "aria-controls": popupId
      }, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {
        tabIndex: 0,
        // this is needed to make the button focused after click in Safari
        ref: handleRef
      });
    };
    return {
      active,
      getRootProps,
      open: state.open,
      rootRef: handleRef
    };
  }
  "use client";
  function getMenuButtonUtilityClass(slot) {
    return generateUtilityClass("MuiMenuButton", slot);
  }
  const menuButtonClasses = generateUtilityClasses("MuiMenuButton", ["root", "active", "disabled", "expanded"]);
  "use client";
  const _excluded$K = ["children", "disabled", "label", "slots", "slotProps", "focusableWhenDisabled"];
  const useUtilityClasses$C = (ownerState) => {
    const {
      active,
      disabled,
      open
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", active && "active", open && "expanded"]
    };
    return composeClasses(slots, useClassNamesOverride(getMenuButtonUtilityClass));
  };
  const MenuButton = /* @__PURE__ */ React__namespace.forwardRef(function MenuButton2(props, forwardedRef) {
    const {
      children,
      disabled = false,
      slots = {},
      slotProps = {},
      focusableWhenDisabled = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$K);
    const {
      getRootProps,
      open,
      active
    } = useMenuButton({
      disabled,
      focusableWhenDisabled,
      rootRef: forwardedRef
    });
    const ownerState = _extends({}, props, {
      open,
      active,
      disabled,
      focusableWhenDisabled
    });
    const classes = useUtilityClasses$C(ownerState);
    const Root = slots.root || "button";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref: forwardedRef,
        type: "button"
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? MenuButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Class name applied to the root element.
     */
    className: PropTypes.string,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, allows a disabled button to receive focus.
     * @default false
     */
    focusableWhenDisabled: PropTypes.bool,
    /**
     * Label of the button
     */
    label: PropTypes.string,
    /**
     * The components used for each slot inside the MenuButton.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The props used for each slot inside the MenuButton.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass("MuiMenuItem", slot);
  }
  const menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "disabled", "focusVisible"]);
  "use client";
  function idGenerator(existingKeys) {
    return `menu-item-${existingKeys.size}`;
  }
  const FALLBACK_MENU_CONTEXT = {
    dispatch: () => {
    },
    popupId: "",
    registerPopup: () => {
    },
    registerTrigger: () => {
    },
    state: {
      open: true
    },
    triggerElement: null
  };
  function useMenuItem(params) {
    var _React$useContext;
    const {
      disabled = false,
      id: idParam,
      rootRef: externalRef,
      label
    } = params;
    const id = useId(idParam);
    const itemRef = React__namespace.useRef(null);
    const itemMetadata = React__namespace.useMemo(() => ({
      disabled,
      id: id != null ? id : "",
      label,
      ref: itemRef
    }), [disabled, id, label]);
    const {
      dispatch
    } = (_React$useContext = React__namespace.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT;
    const {
      getRootProps: getListRootProps,
      highlighted
    } = useListItem({
      item: id
    });
    const {
      index: index2,
      totalItemCount
    } = useCompoundItem(id != null ? id : idGenerator, itemMetadata);
    const {
      getRootProps: getButtonProps,
      focusVisible,
      rootRef: buttonRefHandler
    } = useButton({
      disabled,
      focusableWhenDisabled: true
    });
    const handleRef = useForkRef(buttonRefHandler, externalRef, itemRef);
    React__namespace.useDebugValue({
      id,
      highlighted,
      disabled,
      label
    });
    const createHandleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      dispatch({
        type: DropdownActionTypes.close,
        event
      });
    };
    const getOwnHandlers = (otherHandlers = {}) => _extends({}, otherHandlers, {
      onClick: createHandleClick(otherHandlers)
    });
    function getRootProps(externalProps = {}) {
      const externalEventHandlers = extractEventHandlers(externalProps);
      const getCombinedRootProps = combineHooksSlotProps(getOwnHandlers, combineHooksSlotProps(getButtonProps, getListRootProps));
      return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {
        id,
        ref: handleRef,
        role: "menuitem"
      });
    }
    if (id === void 0) {
      return {
        getRootProps,
        disabled: false,
        focusVisible,
        highlighted: false,
        index: -1,
        totalItemCount: 0,
        rootRef: handleRef
      };
    }
    return {
      getRootProps,
      disabled,
      focusVisible,
      highlighted,
      index: index2,
      totalItemCount,
      rootRef: handleRef
    };
  }
  "use client";
  function useMenuItemContextStabilizer(id) {
    const listContext = React__namespace.useContext(ListContext$1);
    if (!listContext) {
      throw new Error("MenuItem: ListContext was not found.");
    }
    const itemId = useId(id);
    const {
      getItemState,
      dispatch
    } = listContext;
    let itemState;
    if (itemId != null) {
      itemState = getItemState(itemId);
    } else {
      itemState = {
        focusable: true,
        highlighted: false,
        selected: false
      };
    }
    const {
      highlighted,
      selected,
      focusable
    } = itemState;
    const localGetItemState = React__namespace.useCallback((itemValue) => {
      if (itemValue !== itemId) {
        throw new Error(["Base UI MenuItem: Tried to access the state of another MenuItem.", `itemValue: ${itemValue} | id: ${itemId}`, "This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization."].join("/n"));
      }
      return {
        highlighted,
        selected,
        focusable
      };
    }, [highlighted, selected, focusable, itemId]);
    const localContextValue = React__namespace.useMemo(() => ({
      dispatch,
      getItemState: localGetItemState
    }), [dispatch, localGetItemState]);
    return {
      contextValue: localContextValue,
      id: itemId
    };
  }
  "use client";
  "use client";
  const _excluded$J = ["children", "disabled", "label", "id", "slotProps", "slots"];
  function useUtilityClasses$B(ownerState) {
    const {
      disabled,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));
  }
  const InnerMenuItem = /* @__PURE__ */ React__namespace.memo(/* @__PURE__ */ React__namespace.forwardRef(function MenuItem2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      disabled: disabledProp = false,
      label,
      id,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$J);
    const {
      getRootProps,
      disabled,
      focusVisible,
      highlighted
    } = useMenuItem({
      id,
      disabled: disabledProp,
      rootRef: forwardedRef,
      label
    });
    const ownerState = _extends({}, props, {
      disabled,
      focusVisible,
      highlighted
    });
    const classes = useUtilityClasses$B(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      className: classes.root,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
      children
    }));
  }));
  const MenuItem = /* @__PURE__ */ React__namespace.forwardRef(function MenuItem2(props, ref) {
    const {
      id: idProp
    } = props;
    const {
      contextValue,
      id
    } = useMenuItemContextStabilizer(idProp);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(InnerMenuItem, _extends({}, props, {
        id,
        ref
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? MenuItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the menu item will be disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * A text representation of the menu item's content.
     * Used for keyboard text navigation matching.
     */
    label: PropTypes.string,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * The props used for each slot inside the MenuItem.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the MenuItem.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function getModalUtilityClass$1(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  const modalClasses$1 = generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);
  "use client";
  const _excluded$I = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
  const useUtilityClasses$A = (ownerState) => {
    const {
      open,
      exited
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses(slots, useClassNamesOverride(getModalUtilityClass$1));
  };
  const Modal$1 = /* @__PURE__ */ React__namespace.forwardRef(function Modal2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      closeAfterTransition = false,
      container,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$I);
    const propsWithDefaults = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal(_extends({}, propsWithDefaults, {
      rootRef: forwardedRef
    }));
    const ownerState = _extends({}, propsWithDefaults, {
      exited,
      hasTransition
    });
    const classes = useUtilityClasses$A(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      className: classes.root,
      ownerState
    });
    const BackdropComponent = slots.backdrop;
    const backdropProps = useSlotProps({
      elementType: BackdropComponent,
      externalSlotProps: slotProps.backdrop,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends({}, otherHandlers, {
          onClick: (e) => {
            if (onBackdropClick) {
              onBackdropClick(e);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e);
            }
          }
        }));
      },
      className: classes.backdrop,
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropComponent, _extends({}, backdropProps)) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(FocusTrap, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React__namespace.cloneElement(children, childProps)
        })]
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? Modal$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: PropTypes.bool,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: PropTypes.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: PropTypes.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: PropTypes.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: PropTypes.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: PropTypes.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: PropTypes.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: PropTypes.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: PropTypes.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: PropTypes.shape({
      backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      backdrop: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function NoSsr(props) {
    const {
      children,
      defer = false,
      fallback = null
    } = props;
    const [mountedState, setMountedState] = React__namespace.useState(false);
    useEnhancedEffect(() => {
      if (!defer) {
        setMountedState(true);
      }
    }, [defer]);
    React__namespace.useEffect(() => {
      if (defer) {
        setMountedState(true);
      }
    }, [defer]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: mountedState ? children : fallback
    });
  }
  process.env.NODE_ENV !== "production" ? NoSsr.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * You can wrap a node.
     */
    children: PropTypes.node,
    /**
     * If `true`, the component will not only prevent server-side rendering.
     * It will also defer the rendering of the children into a different screen frame.
     * @default false
     */
    defer: PropTypes.bool,
    /**
     * The fallback content to display.
     * @default null
     */
    fallback: PropTypes.node
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    NoSsr["propTypes"] = exactProp(NoSsr.propTypes);
  }
  "use client";
  function getNumberInputUtilityClass(slot) {
    return generateUtilityClass("MuiNumberInput", slot);
  }
  const numberInputClasses = generateUtilityClasses("MuiNumberInput", ["root", "formControl", "focused", "disabled", "readOnly", "error", "input", "incrementButton", "decrementButton", "adornedStart", "adornedEnd"]);
  function simpleClamp(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
    return Math.max(min2, Math.min(val, max2));
  }
  function clamp$2(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER, stepProp = NaN) {
    if (Number.isNaN(stepProp)) {
      return simpleClamp(val, min2, max2);
    }
    const step = stepProp || 1;
    const remainder = val % step;
    const positivity = Math.sign(remainder);
    if (Math.abs(remainder) > step / 2) {
      return simpleClamp(val + positivity * (step - Math.abs(remainder)), min2, max2);
    }
    return simpleClamp(val - positivity * Math.abs(remainder), min2, max2);
  }
  function isNumber(val) {
    return typeof val === "number" && !Number.isNaN(val) && Number.isFinite(val);
  }
  "use client";
  const STEP_KEYS = ["ArrowUp", "ArrowDown", "PageUp", "PageDown"];
  const SUPPORTED_KEYS = [...STEP_KEYS, "Home", "End"];
  function getInputValueAsString(v) {
    return v ? String(v.trim()) : String(v);
  }
  function useNumberInput(parameters) {
    const {
      min: min2,
      max: max2,
      step,
      shiftMultiplier = 10,
      defaultValue: defaultValueProp,
      disabled: disabledProp = false,
      error: errorProp = false,
      onBlur,
      onInputChange,
      onFocus,
      onChange,
      required: requiredProp = false,
      readOnly: readOnlyProp = false,
      value: valueProp,
      inputRef: inputRefProp,
      inputId: inputIdProp
    } = parameters;
    const formControlContext = useFormControlContext();
    const {
      current: isControlled
    } = React__namespace.useRef(valueProp != null);
    const handleInputRefWarning = React__namespace.useCallback((instance) => {
      if (process.env.NODE_ENV !== "production") {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const inputRef = React__namespace.useRef(null);
    const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);
    const inputId = useId(inputIdProp);
    const [focused, setFocused] = React__namespace.useState(false);
    const [value, setValue] = useControlled({
      controlled: valueProp,
      default: defaultValueProp,
      name: "NumberInput"
    });
    const [dirtyValue, setDirtyValue] = React__namespace.useState(value ? String(value) : void 0);
    React__namespace.useEffect(() => {
      if (!formControlContext && disabledProp && focused) {
        setFocused(false);
        onBlur == null || onBlur();
      }
    }, [formControlContext, disabledProp, focused, onBlur]);
    const createHandleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
      if (event.defaultMuiPrevented || event.defaultPrevented) {
        return;
      }
      if (formControlContext && formControlContext.onFocus) {
        var _formControlContext$o;
        formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
      }
      setFocused(true);
    };
    const handleValueChange = () => (event, val) => {
      let newValue;
      if (val === void 0) {
        newValue = val;
        setDirtyValue("");
      } else {
        newValue = clamp$2(val, min2, max2, step);
        setDirtyValue(String(newValue));
      }
      setValue(newValue);
      if (isNumber(newValue)) {
        onChange == null || onChange(event, newValue);
      } else {
        onChange == null || onChange(event, void 0);
      }
    };
    const createHandleInputChange = (otherHandlers) => (event) => {
      var _formControlContext$o2, _otherHandlers$onInpu;
      if (!isControlled && event.target === null) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));
      }
      formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);
      (_otherHandlers$onInpu = otherHandlers.onInputChange) == null || _otherHandlers$onInpu.call(otherHandlers, event);
      if (event.defaultMuiPrevented || event.defaultPrevented) {
        return;
      }
      const val = getInputValueAsString(event.currentTarget.value);
      if (val === "" || val === "-") {
        setDirtyValue(val);
        setValue(void 0);
      }
      if (val.match(/^-?\d+?$/)) {
        setDirtyValue(val);
        setValue(parseInt(val, 10));
      }
    };
    const createHandleBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
      if (event.defaultMuiPrevented || event.defaultPrevented) {
        return;
      }
      const val = getInputValueAsString(event.currentTarget.value);
      if (val === "" || val === "-") {
        handleValueChange()(event, void 0);
      } else {
        handleValueChange()(event, parseInt(val, 10));
      }
      if (formControlContext && formControlContext.onBlur) {
        formControlContext.onBlur();
      }
      setFocused(false);
    };
    const createHandleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.defaultMuiPrevented || event.defaultPrevented) {
        return;
      }
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
    };
    const handleStep = (direction) => (event) => {
      let newValue;
      if (isNumber(value)) {
        const multiplier = event.shiftKey || event.key === "PageUp" || event.key === "PageDown" ? shiftMultiplier : 1;
        newValue = {
          up: value + (step != null ? step : 1) * multiplier,
          down: value - (step != null ? step : 1) * multiplier
        }[direction];
      } else {
        newValue = {
          up: min2 != null ? min2 : 0,
          down: max2 != null ? max2 : 0
        }[direction];
      }
      handleValueChange()(event, newValue);
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultMuiPrevented || event.defaultPrevented) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (SUPPORTED_KEYS.includes(event.key)) {
        event.preventDefault();
      }
      if (STEP_KEYS.includes(event.key)) {
        const direction = {
          ArrowUp: "up",
          ArrowDown: "down",
          PageUp: "up",
          PageDown: "down"
        }[event.key];
        handleStep(direction)(event);
      }
      if (event.key === "Home" && isNumber(max2)) {
        handleValueChange()(event, max2);
      }
      if (event.key === "End" && isNumber(min2)) {
        handleValueChange()(event, min2);
      }
    };
    const getRootProps = (externalProps = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters, [
        // these are handled by the input slot
        "onBlur",
        "onInputChange",
        "onFocus",
        "onChange"
      ]);
      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
      return _extends({}, externalProps, externalEventHandlers, {
        onClick: createHandleClick(externalEventHandlers)
      });
    };
    const getInputProps = (externalProps = {}) => {
      var _ref;
      const propsEventHandlers = {
        onBlur,
        onFocus,
        // onChange from normal props is the custom onChange so we ignore it here
        onChange: onInputChange
      };
      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps, [
        // onClick is handled by the root slot
        "onClick"
        // do not ignore 'onInputChange', we want slotProps.input.onInputChange to enter the DOM and throw
      ]));
      const mergedEventHandlers = _extends({}, externalEventHandlers, {
        onFocus: createHandleFocus(externalEventHandlers),
        // slotProps.onChange is renamed to onInputChange and passed to createHandleInputChange
        onChange: createHandleInputChange(_extends({}, externalEventHandlers, {
          onInputChange: externalEventHandlers.onChange
        })),
        onBlur: createHandleBlur(externalEventHandlers),
        onKeyDown: createHandleKeyDown(externalEventHandlers)
      });
      const displayValue = (_ref = focused ? dirtyValue : value) != null ? _ref : "";
      delete externalProps.onInputChange;
      return _extends({
        type: "text",
        id: inputId,
        "aria-invalid": errorProp || void 0,
        defaultValue: void 0,
        value: displayValue,
        "aria-valuenow": displayValue,
        "aria-valuetext": String(displayValue),
        "aria-valuemin": min2,
        "aria-valuemax": max2,
        autoComplete: "off",
        autoCorrect: "off",
        spellCheck: "false",
        required: requiredProp,
        readOnly: readOnlyProp,
        "aria-disabled": disabledProp,
        disabled: disabledProp
      }, externalProps, {
        ref: handleInputRef
      }, mergedEventHandlers);
    };
    const handleStepperButtonMouseDown = (event) => {
      event.preventDefault();
      if (inputRef.current) {
        inputRef.current.focus();
      }
    };
    const stepperButtonCommonProps = {
      "aria-controls": inputId,
      tabIndex: -1
    };
    const isIncrementDisabled = disabledProp || (isNumber(value) ? value >= (max2 != null ? max2 : Number.MAX_SAFE_INTEGER) : false);
    const getIncrementButtonProps = (externalProps = {}) => {
      return _extends({}, externalProps, stepperButtonCommonProps, {
        disabled: isIncrementDisabled,
        "aria-disabled": isIncrementDisabled,
        onMouseDown: handleStepperButtonMouseDown,
        onClick: handleStep("up")
      });
    };
    const isDecrementDisabled = disabledProp || (isNumber(value) ? value <= (min2 != null ? min2 : Number.MIN_SAFE_INTEGER) : false);
    const getDecrementButtonProps = (externalProps = {}) => {
      return _extends({}, externalProps, stepperButtonCommonProps, {
        disabled: isDecrementDisabled,
        "aria-disabled": isDecrementDisabled,
        onMouseDown: handleStepperButtonMouseDown,
        onClick: handleStep("down")
      });
    };
    return {
      disabled: disabledProp,
      error: errorProp,
      focused,
      formControlContext,
      getInputProps,
      getIncrementButtonProps,
      getDecrementButtonProps,
      getRootProps,
      required: requiredProp,
      value: focused ? dirtyValue : value,
      isIncrementDisabled,
      isDecrementDisabled,
      inputValue: dirtyValue
    };
  }
  "use client";
  "use client";
  const _excluded$H = ["className", "defaultValue", "disabled", "endAdornment", "error", "id", "max", "min", "onBlur", "onInputChange", "onFocus", "onChange", "placeholder", "required", "readOnly", "shiftMultiplier", "startAdornment", "step", "value", "slotProps", "slots"];
  const useUtilityClasses$z = (ownerState) => {
    const {
      disabled,
      error,
      focused,
      readOnly,
      formControlContext,
      isIncrementDisabled,
      isDecrementDisabled,
      startAdornment,
      endAdornment
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", focused && "focused", readOnly && "readOnly", Boolean(formControlContext) && "formControl", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
      input: ["input", disabled && "disabled", readOnly && "readOnly"],
      incrementButton: ["incrementButton", isIncrementDisabled && "disabled"],
      decrementButton: ["decrementButton", isDecrementDisabled && "disabled"]
    };
    return composeClasses(slots, useClassNamesOverride(getNumberInputUtilityClass));
  };
  const NumberInput = /* @__PURE__ */ React__namespace.forwardRef(function NumberInput2(props, forwardedRef) {
    var _slots$root, _slots$input, _slots$incrementButto, _slots$decrementButto;
    const {
      className,
      defaultValue,
      disabled,
      endAdornment,
      error,
      id,
      max: max2,
      min: min2,
      onBlur,
      onInputChange,
      onFocus,
      onChange,
      placeholder,
      required,
      readOnly = false,
      shiftMultiplier,
      startAdornment,
      step,
      value,
      slotProps = {},
      slots = {}
    } = props, rest = _objectWithoutPropertiesLoose(props, _excluded$H);
    const {
      getRootProps,
      getInputProps,
      getIncrementButtonProps,
      getDecrementButtonProps,
      focused,
      error: errorState,
      disabled: disabledState,
      formControlContext,
      isIncrementDisabled,
      isDecrementDisabled
    } = useNumberInput({
      min: min2,
      max: max2,
      step,
      shiftMultiplier,
      defaultValue,
      disabled,
      error,
      onFocus,
      onInputChange,
      onBlur,
      onChange,
      required,
      readOnly,
      value,
      inputId: id
    });
    const ownerState = _extends({}, props, {
      disabled: disabledState,
      error: errorState,
      focused,
      readOnly,
      formControlContext,
      isIncrementDisabled,
      isDecrementDisabled
    });
    const classes = useUtilityClasses$z(ownerState);
    const propsForwardedToInputSlot = {
      placeholder
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: rest,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: [classes.root, className]
    });
    const Input2 = (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: Input2,
      getSlotProps: (otherHandlers) => getInputProps(_extends({}, propsForwardedToInputSlot, otherHandlers)),
      externalSlotProps: slotProps.input,
      ownerState,
      className: classes.input
    });
    const IncrementButton = (_slots$incrementButto = slots.incrementButton) != null ? _slots$incrementButto : "button";
    const incrementButtonProps = useSlotProps({
      elementType: IncrementButton,
      getSlotProps: getIncrementButtonProps,
      externalSlotProps: slotProps.incrementButton,
      ownerState,
      className: classes.incrementButton
    });
    const DecrementButton = (_slots$decrementButto = slots.decrementButton) != null ? _slots$decrementButto : "button";
    const decrementButtonProps = useSlotProps({
      elementType: DecrementButton,
      getSlotProps: getDecrementButtonProps,
      externalSlotProps: slotProps.decrementButton,
      ownerState,
      className: classes.decrementButton
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(DecrementButton, _extends({}, decrementButtonProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(IncrementButton, _extends({}, incrementButtonProps)), startAdornment, /* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends({}, inputProps)), endAdornment]
    }));
  });
  process.env.NODE_ENV !== "production" ? NumberInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * Trailing adornment for this input.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.
     */
    error: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The maximum value.
     */
    max: PropTypes.number,
    /**
     * The minimum value.
     */
    min: PropTypes.number,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired after the value is clamped and changes - when the `input` is blurred or when
     * the stepper buttons are triggered.
     * Called with `undefined` when the value is unset.
     *
     * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback
     * @param {number|undefined} value The new value of the component
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the `input` value changes after each keypress, before clamping is applied.
     * Note that `event.target.value` may contain values that fall outside of `min` and `max` or
     * are otherwise "invalid".
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     */
    onInputChange: PropTypes.func,
    /**
     * @ignore
     */
    placeholder: PropTypes.string,
    /**
     * If `true`, the `input` element becomes read-only. The stepper buttons remain active,
     * with the addition that they are now keyboard focusable.
     * @default false
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Multiplier applied to `step` if the shift key is held while incrementing
     * or decrementing the value. Defaults to `10`.
     */
    shiftMultiplier: PropTypes.number,
    /**
     * The props used for each slot inside the NumberInput.
     * @default {}
     */
    slotProps: PropTypes.shape({
      decrementButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      incrementButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      decrementButton: PropTypes.elementType,
      incrementButton: PropTypes.elementType,
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Leading adornment for this input.
     */
    startAdornment: PropTypes.node,
    /**
     * The amount that the value changes on each increment or decrement.
     */
    step: PropTypes.number,
    /**
     * The current value. Use when the component is controlled.
     */
    value: PropTypes.number
  } : void 0;
  "use client";
  function getOptionGroupUtilityClass(slot) {
    return generateUtilityClass("MuiOptionGroup", slot);
  }
  const optionGroupClasses = generateUtilityClasses("MuiOptionGroup", ["root", "disabled", "label", "list"]);
  "use client";
  const _excluded$G = ["disabled", "slotProps", "slots"];
  function useUtilityClasses$y(disabled) {
    const slots = {
      root: ["root", disabled && "disabled"],
      label: ["label"],
      list: ["list"]
    };
    return composeClasses(slots, useClassNamesOverride(getOptionGroupUtilityClass));
  }
  const OptionGroup = /* @__PURE__ */ React__namespace.forwardRef(function OptionGroup2(props, forwardedRef) {
    const {
      disabled = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$G);
    const Root = (slots == null ? void 0 : slots.root) || "li";
    const Label = (slots == null ? void 0 : slots.label) || "span";
    const List2 = (slots == null ? void 0 : slots.list) || "ul";
    const classes = useUtilityClasses$y(disabled);
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState: props,
      className: classes.root
    });
    const labelProps = useSlotProps({
      elementType: Label,
      externalSlotProps: slotProps.label,
      ownerState: props,
      className: classes.label
    });
    const listProps = useSlotProps({
      elementType: List2,
      externalSlotProps: slotProps.list,
      ownerState: props,
      className: classes.list
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Label, _extends({}, labelProps, {
        children: props.label
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(List2, _extends({}, listProps, {
        children: props.children
      }))]
    }));
  });
  process.env.NODE_ENV !== "production" ? OptionGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true` all the options in the group will be disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * The human-readable description of the group.
     */
    label: PropTypes.node,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: PropTypes.shape({
      label: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      list: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the OptionGroup.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      label: PropTypes.elementType,
      list: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function getOptionUtilityClass(slot) {
    return generateUtilityClass("MuiOption", slot);
  }
  const optionClasses = generateUtilityClasses("MuiOption", ["root", "disabled", "selected", "highlighted"]);
  "use client";
  function useOption(params) {
    const {
      value,
      label,
      disabled,
      rootRef: optionRefParam,
      id: idParam
    } = params;
    const {
      getRootProps: getListItemProps,
      highlighted,
      selected
    } = useListItem({
      item: value
    });
    const id = useId(idParam);
    const optionRef = React__namespace.useRef(null);
    const selectOption = React__namespace.useMemo(() => ({
      disabled,
      label,
      value,
      ref: optionRef,
      id
    }), [disabled, label, value, id]);
    const {
      index: index2
    } = useCompoundItem(value, selectOption);
    const handleRef = useForkRef(optionRefParam, optionRef);
    return {
      getRootProps: (externalProps = {}) => {
        const externalEventHandlers = extractEventHandlers(externalProps);
        return _extends({}, externalProps, getListItemProps(externalEventHandlers), {
          id,
          ref: handleRef,
          role: "option",
          "aria-selected": selected
        });
      },
      highlighted,
      index: index2,
      selected,
      rootRef: handleRef
    };
  }
  "use client";
  function useOptionContextStabilizer(value) {
    const listContext = React__namespace.useContext(ListContext$1);
    if (!listContext) {
      throw new Error("Option: ListContext was not found.");
    }
    const {
      getItemState,
      dispatch
    } = listContext;
    const {
      highlighted,
      selected,
      focusable
    } = getItemState(value);
    const localGetItemState = React__namespace.useCallback((itemValue) => {
      if (itemValue !== value) {
        throw new Error(["Base UI Option: Tried to access the state of another Option.", "This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization."].join("/n"));
      }
      return {
        highlighted,
        selected,
        focusable
      };
    }, [highlighted, selected, focusable, value]);
    const localContextValue = React__namespace.useMemo(() => ({
      dispatch,
      getItemState: localGetItemState
    }), [dispatch, localGetItemState]);
    return {
      contextValue: localContextValue
    };
  }
  "use client";
  "use client";
  const _excluded$F = ["children", "disabled", "label", "slotProps", "slots", "value"];
  function useUtilityClasses$x(ownerState) {
    const {
      disabled,
      highlighted,
      selected
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
    };
    return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));
  }
  const InnerOption = /* @__PURE__ */ React__namespace.memo(/* @__PURE__ */ React__namespace.forwardRef(function Option2(props, forwardedRef) {
    var _slots$root, _optionRef$current;
    const {
      children,
      disabled = false,
      label,
      slotProps = {},
      slots = {},
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$F);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
    const optionRef = React__namespace.useRef(null);
    const combinedRef = useForkRef(optionRef, forwardedRef);
    const computedLabel = label != null ? label : typeof children === "string" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;
    const {
      getRootProps,
      selected,
      highlighted,
      index: index2
    } = useOption({
      disabled,
      label: computedLabel,
      rootRef: combinedRef,
      value
    });
    const ownerState = _extends({}, props, {
      disabled,
      highlighted,
      index: index2,
      selected
    });
    const classes = useUtilityClasses$x(ownerState);
    const rootProps = useSlotProps({
      getSlotProps: getRootProps,
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      className: classes.root,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
      children
    }));
  }));
  const Option = /* @__PURE__ */ React__namespace.forwardRef(function Option2(props, ref) {
    const {
      value
    } = props;
    const {
      contextValue
    } = useOptionContextStabilizer(value);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(InnerOption, _extends({}, props, {
        ref
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? Option.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the option will be disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * A text representation of the option's content.
     * Used for keyboard text navigation matching.
     */
    label: PropTypes.string,
    /**
     * The props used for each slot inside the Option.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Option.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The value of the option.
     */
    value: PropTypes.any.isRequired
  } : void 0;
  "use client";
  const sides = ["top", "right", "bottom", "left"];
  const alignments = ["start", "end"];
  const placements = /* @__PURE__ */ sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
  const min = Math.min;
  const max = Math.max;
  const round = Math.round;
  const floor = Math.floor;
  const createCoords = (v) => ({
    x: v,
    y: v
  });
  const oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  const oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp$1(start2, value, end2) {
    return max(start2, min(value, end2));
  }
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length2 = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length2] > rects.floating[length2]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl)
          return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding2) {
    return __spreadValues({
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, padding2);
  }
  function getPaddingObject(padding2) {
    return typeof padding2 !== "number" ? expandPaddingObject(padding2) : {
      top: padding2,
      right: padding2,
      bottom: padding2,
      left: padding2
    };
  }
  function rectToClientRect(rect) {
    return __spreadProps(__spreadValues({}, rect), {
      top: rect.y,
      left: rect.x,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference: reference2,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference2.x + reference2.width / 2 - floating.width / 2;
    const commonY = reference2.y + reference2.height / 2 - floating.height / 2;
    const commonAlign = reference2[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference2.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case "right":
        coords = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference2.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference2.x,
          y: reference2.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  const computePosition$1 = (reference2, floating, config2) => __async(this, null, function* () {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2
    } = config2;
    const validMiddleware = middleware2.filter(Boolean);
    const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
    let rects = yield platform2.getElementRects({
      reference: reference2,
      floating,
      strategy
    });
    let {
      x,
      y: y2
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i = 0; i < validMiddleware.length; i++) {
      const {
        name,
        fn
      } = validMiddleware[i];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = yield fn({
        x,
        y: y2,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference: reference2,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y2 = nextY != null ? nextY : y2;
      middlewareData = __spreadProps(__spreadValues({}, middlewareData), {
        [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data)
      });
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? yield platform2.getElementRects({
              reference: reference2,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y: y2
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i = -1;
        continue;
      }
    }
    return {
      x,
      y: y2,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  });
  function detectOverflow(state, options) {
    return __async(this, null, function* () {
      var _await$platform$isEle;
      if (options === void 0) {
        options = {};
      }
      const {
        x,
        y: y2,
        platform: platform2,
        rects,
        elements,
        strategy
      } = state;
      const {
        boundary = "clippingAncestors",
        rootBoundary = "viewport",
        elementContext = "floating",
        altBoundary = false,
        padding: padding2 = 0
      } = evaluate(options, state);
      const paddingObject = getPaddingObject(padding2);
      const altContext = elementContext === "floating" ? "reference" : "floating";
      const element = elements[altBoundary ? altContext : elementContext];
      const clippingClientRect = rectToClientRect(yield platform2.getClippingRect({
        element: ((_await$platform$isEle = yield platform2.isElement == null ? void 0 : platform2.isElement(element)) != null ? _await$platform$isEle : true) ? element : element.contextElement || (yield platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
        boundary,
        rootBoundary,
        strategy
      }));
      const rect = elementContext === "floating" ? __spreadProps(__spreadValues({}, rects.floating), {
        x,
        y: y2
      }) : rects.reference;
      const offsetParent = yield platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating);
      const offsetScale = (yield platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? (yield platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
        x: 1,
        y: 1
      } : {
        x: 1,
        y: 1
      };
      const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
        rect,
        offsetParent,
        strategy
      }) : rect);
      return {
        top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
        bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
        left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
        right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
      };
    });
  }
  const arrow$1 = (options) => ({
    name: "arrow",
    options,
    fn(state) {
      return __async(this, null, function* () {
        const {
          x,
          y: y2,
          placement,
          rects,
          platform: platform2,
          elements,
          middlewareData
        } = state;
        const {
          element,
          padding: padding2 = 0
        } = evaluate(options, state) || {};
        if (element == null) {
          return {};
        }
        const paddingObject = getPaddingObject(padding2);
        const coords = {
          x,
          y: y2
        };
        const axis = getAlignmentAxis(placement);
        const length2 = getAxisLength(axis);
        const arrowDimensions = yield platform2.getDimensions(element);
        const isYAxis = axis === "y";
        const minProp = isYAxis ? "top" : "left";
        const maxProp = isYAxis ? "bottom" : "right";
        const clientProp = isYAxis ? "clientHeight" : "clientWidth";
        const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = yield platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element);
        let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
        if (!clientSize || !(yield platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
          clientSize = elements.floating[clientProp] || rects.floating[length2];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
        const minPadding = min(paddingObject[minProp], largestPossiblePadding);
        const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
        const min$12 = minPadding;
        const max2 = clientSize - arrowDimensions[length2] - maxPadding;
        const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
        const offset2 = clamp$1(min$12, center, max2);
        const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset2 && rects.reference[length2] / 2 - (center < min$12 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
        const alignmentOffset = shouldAddOffset ? center < min$12 ? center - min$12 : center - max2 : 0;
        return {
          [axis]: coords[axis] + alignmentOffset,
          data: __spreadValues({
            [axis]: offset2,
            centerOffset: center - offset2 - alignmentOffset
          }, shouldAddOffset && {
            alignmentOffset
          }),
          reset: shouldAddOffset
        };
      });
    }
  });
  function getPlacementList(alignment, autoAlignment, allowedPlacements) {
    const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
    return allowedPlacementsSortedByAlignment.filter((placement) => {
      if (alignment) {
        return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
      }
      return true;
    });
  }
  const autoPlacement = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "autoPlacement",
      options,
      fn(state) {
        return __async(this, null, function* () {
          var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
          const {
            rects,
            middlewareData,
            placement,
            platform: platform2,
            elements
          } = state;
          const _a2 = evaluate(options, state), {
            crossAxis = false,
            alignment,
            allowedPlacements = placements,
            autoAlignment = true
          } = _a2, detectOverflowOptions = __objRest(_a2, [
            "crossAxis",
            "alignment",
            "allowedPlacements",
            "autoAlignment"
          ]);
          const placements$12 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
          const overflow2 = yield detectOverflow(state, detectOverflowOptions);
          const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
          const currentPlacement = placements$12[currentIndex];
          if (currentPlacement == null) {
            return {};
          }
          const alignmentSides = getAlignmentSides(currentPlacement, rects, yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
          if (placement !== currentPlacement) {
            return {
              reset: {
                placement: placements$12[0]
              }
            };
          }
          const currentOverflows = [overflow2[getSide(currentPlacement)], overflow2[alignmentSides[0]], overflow2[alignmentSides[1]]];
          const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
            placement: currentPlacement,
            overflows: currentOverflows
          }];
          const nextPlacement = placements$12[currentIndex + 1];
          if (nextPlacement) {
            return {
              data: {
                index: currentIndex + 1,
                overflows: allOverflows
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          const placementsSortedByMostSpace = allOverflows.map((d) => {
            const alignment2 = getAlignment(d.placement);
            return [d.placement, alignment2 && crossAxis ? (
              // Check along the mainAxis and main crossAxis side.
              d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0)
            ) : (
              // Check only the mainAxis.
              d.overflows[0]
            ), d.overflows];
          }).sort((a, b) => a[1] - b[1]);
          const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d) => d[2].slice(
            0,
            // Aligned placements should not check their opposite crossAxis
            // side.
            getAlignment(d[0]) ? 2 : 3
          ).every((v) => v <= 0));
          const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
          if (resetPlacement !== placement) {
            return {
              data: {
                index: currentIndex + 1,
                overflows: allOverflows
              },
              reset: {
                placement: resetPlacement
              }
            };
          }
          return {};
        });
      }
    };
  };
  const flip = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      fn(state) {
        return __async(this, null, function* () {
          var _middlewareData$arrow, _middlewareData$flip;
          const {
            placement,
            middlewareData,
            rects,
            initialPlacement,
            platform: platform2,
            elements
          } = state;
          const _a2 = evaluate(options, state), {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true,
            fallbackPlacements: specifiedFallbackPlacements,
            fallbackStrategy = "bestFit",
            fallbackAxisSideDirection = "none",
            flipAlignment = true
          } = _a2, detectOverflowOptions = __objRest(_a2, [
            "mainAxis",
            "crossAxis",
            "fallbackPlacements",
            "fallbackStrategy",
            "fallbackAxisSideDirection",
            "flipAlignment"
          ]);
          if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          const side = getSide(placement);
          const isBasePlacement = getSide(initialPlacement) === initialPlacement;
          const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating);
          const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
          if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
            fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
          }
          const placements2 = [initialPlacement, ...fallbackPlacements];
          const overflow2 = yield detectOverflow(state, detectOverflowOptions);
          const overflows = [];
          let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
          if (checkMainAxis) {
            overflows.push(overflow2[side]);
          }
          if (checkCrossAxis) {
            const sides2 = getAlignmentSides(placement, rects, rtl);
            overflows.push(overflow2[sides2[0]], overflow2[sides2[1]]);
          }
          overflowsData = [...overflowsData, {
            placement,
            overflows
          }];
          if (!overflows.every((side2) => side2 <= 0)) {
            var _middlewareData$flip2, _overflowsData$filter;
            const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
            const nextPlacement = placements2[nextIndex];
            if (nextPlacement) {
              return {
                data: {
                  index: nextIndex,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }
            let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
            if (!resetPlacement) {
              switch (fallbackStrategy) {
                case "bestFit": {
                  var _overflowsData$map$so;
                  const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow3) => overflow3 > 0).reduce((acc, overflow3) => acc + overflow3, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                  if (placement2) {
                    resetPlacement = placement2;
                  }
                  break;
                }
                case "initialPlacement":
                  resetPlacement = initialPlacement;
                  break;
              }
            }
            if (placement !== resetPlacement) {
              return {
                reset: {
                  placement: resetPlacement
                }
              };
            }
          }
          return {};
        });
      }
    };
  };
  function getSideOffsets(overflow2, rect) {
    return {
      top: overflow2.top - rect.height,
      right: overflow2.right - rect.width,
      bottom: overflow2.bottom - rect.height,
      left: overflow2.left - rect.width
    };
  }
  function isAnySideFullyClipped(overflow2) {
    return sides.some((side) => overflow2[side] >= 0);
  }
  const hide = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "hide",
      options,
      fn(state) {
        return __async(this, null, function* () {
          const {
            rects
          } = state;
          const _a2 = evaluate(options, state), {
            strategy = "referenceHidden"
          } = _a2, detectOverflowOptions = __objRest(_a2, [
            "strategy"
          ]);
          switch (strategy) {
            case "referenceHidden": {
              const overflow2 = yield detectOverflow(state, __spreadProps(__spreadValues({}, detectOverflowOptions), {
                elementContext: "reference"
              }));
              const offsets = getSideOffsets(overflow2, rects.reference);
              return {
                data: {
                  referenceHiddenOffsets: offsets,
                  referenceHidden: isAnySideFullyClipped(offsets)
                }
              };
            }
            case "escaped": {
              const overflow2 = yield detectOverflow(state, __spreadProps(__spreadValues({}, detectOverflowOptions), {
                altBoundary: true
              }));
              const offsets = getSideOffsets(overflow2, rects.floating);
              return {
                data: {
                  escapedOffsets: offsets,
                  escaped: isAnySideFullyClipped(offsets)
                }
              };
            }
            default: {
              return {};
            }
          }
        });
      }
    };
  };
  function getBoundingRect(rects) {
    const minX = min(...rects.map((rect) => rect.left));
    const minY = min(...rects.map((rect) => rect.top));
    const maxX = max(...rects.map((rect) => rect.right));
    const maxY = max(...rects.map((rect) => rect.bottom));
    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  }
  function getRectsByLine(rects) {
    const sortedRects = rects.slice().sort((a, b) => a.y - b.y);
    const groups = [];
    let prevRect = null;
    for (let i = 0; i < sortedRects.length; i++) {
      const rect = sortedRects[i];
      if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
        groups.push([rect]);
      } else {
        groups[groups.length - 1].push(rect);
      }
      prevRect = rect;
    }
    return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
  }
  const inline = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "inline",
      options,
      fn(state) {
        return __async(this, null, function* () {
          const {
            placement,
            elements,
            rects,
            platform: platform2,
            strategy
          } = state;
          const {
            padding: padding2 = 2,
            x,
            y: y2
          } = evaluate(options, state);
          const nativeClientRects = Array.from((yield platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
          const clientRects = getRectsByLine(nativeClientRects);
          const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
          const paddingObject = getPaddingObject(padding2);
          function getBoundingClientRect2() {
            if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y2 != null) {
              return clientRects.find((rect) => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y2 > rect.top - paddingObject.top && y2 < rect.bottom + paddingObject.bottom) || fallback;
            }
            if (clientRects.length >= 2) {
              if (getSideAxis(placement) === "y") {
                const firstRect = clientRects[0];
                const lastRect = clientRects[clientRects.length - 1];
                const isTop = getSide(placement) === "top";
                const top3 = firstRect.top;
                const bottom3 = lastRect.bottom;
                const left3 = isTop ? firstRect.left : lastRect.left;
                const right3 = isTop ? firstRect.right : lastRect.right;
                const width3 = right3 - left3;
                const height3 = bottom3 - top3;
                return {
                  top: top3,
                  bottom: bottom3,
                  left: left3,
                  right: right3,
                  width: width3,
                  height: height3,
                  x: left3,
                  y: top3
                };
              }
              const isLeftSide = getSide(placement) === "left";
              const maxRight = max(...clientRects.map((rect) => rect.right));
              const minLeft = min(...clientRects.map((rect) => rect.left));
              const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
              const top2 = measureRects[0].top;
              const bottom2 = measureRects[measureRects.length - 1].bottom;
              const left2 = minLeft;
              const right2 = maxRight;
              const width2 = right2 - left2;
              const height2 = bottom2 - top2;
              return {
                top: top2,
                bottom: bottom2,
                left: left2,
                right: right2,
                width: width2,
                height: height2,
                x: left2,
                y: top2
              };
            }
            return fallback;
          }
          const resetRects = yield platform2.getElementRects({
            reference: {
              getBoundingClientRect: getBoundingClientRect2
            },
            floating: elements.floating,
            strategy
          });
          if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
            return {
              reset: {
                rects: resetRects
              }
            };
          }
          return {};
        });
      }
    };
  };
  function convertValueToCoords(state, options) {
    return __async(this, null, function* () {
      const {
        placement,
        platform: platform2,
        elements
      } = state;
      const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isVertical = getSideAxis(placement) === "y";
      const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
      const crossAxisMulti = rtl && isVertical ? -1 : 1;
      const rawValue = evaluate(options, state);
      let {
        mainAxis,
        crossAxis,
        alignmentAxis
      } = typeof rawValue === "number" ? {
        mainAxis: rawValue,
        crossAxis: 0,
        alignmentAxis: null
      } : __spreadValues({
        mainAxis: 0,
        crossAxis: 0,
        alignmentAxis: null
      }, rawValue);
      if (alignment && typeof alignmentAxis === "number") {
        crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
      }
      return isVertical ? {
        x: crossAxis * crossAxisMulti,
        y: mainAxis * mainAxisMulti
      } : {
        x: mainAxis * mainAxisMulti,
        y: crossAxis * crossAxisMulti
      };
    });
  }
  const offset = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      fn(state) {
        return __async(this, null, function* () {
          var _middlewareData$offse, _middlewareData$arrow;
          const {
            x,
            y: y2,
            placement,
            middlewareData
          } = state;
          const diffCoords = yield convertValueToCoords(state, options);
          if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          return {
            x: x + diffCoords.x,
            y: y2 + diffCoords.y,
            data: __spreadProps(__spreadValues({}, diffCoords), {
              placement
            })
          };
        });
      }
    };
  };
  const shift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      fn(state) {
        return __async(this, null, function* () {
          const {
            x,
            y: y2,
            placement
          } = state;
          const _a2 = evaluate(options, state), {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = false,
            limiter = {
              fn: (_ref) => {
                let {
                  x: x2,
                  y: y3
                } = _ref;
                return {
                  x: x2,
                  y: y3
                };
              }
            }
          } = _a2, detectOverflowOptions = __objRest(_a2, [
            "mainAxis",
            "crossAxis",
            "limiter"
          ]);
          const coords = {
            x,
            y: y2
          };
          const overflow2 = yield detectOverflow(state, detectOverflowOptions);
          const crossAxis = getSideAxis(getSide(placement));
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          if (checkMainAxis) {
            const minSide = mainAxis === "y" ? "top" : "left";
            const maxSide = mainAxis === "y" ? "bottom" : "right";
            const min2 = mainAxisCoord + overflow2[minSide];
            const max2 = mainAxisCoord - overflow2[maxSide];
            mainAxisCoord = clamp$1(min2, mainAxisCoord, max2);
          }
          if (checkCrossAxis) {
            const minSide = crossAxis === "y" ? "top" : "left";
            const maxSide = crossAxis === "y" ? "bottom" : "right";
            const min2 = crossAxisCoord + overflow2[minSide];
            const max2 = crossAxisCoord - overflow2[maxSide];
            crossAxisCoord = clamp$1(min2, crossAxisCoord, max2);
          }
          const limitedCoords = limiter.fn(__spreadProps(__spreadValues({}, state), {
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          }));
          return __spreadProps(__spreadValues({}, limitedCoords), {
            data: {
              x: limitedCoords.x - x,
              y: limitedCoords.y - y2
            }
          });
        });
      }
    };
  };
  const limitShift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      options,
      fn(state) {
        const {
          x,
          y: y2,
          placement,
          rects,
          middlewareData
        } = state;
        const {
          offset: offset2 = 0,
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true
        } = evaluate(options, state);
        const coords = {
          x,
          y: y2
        };
        const crossAxis = getSideAxis(placement);
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        const rawOffset = evaluate(offset2, state);
        const computedOffset = typeof rawOffset === "number" ? {
          mainAxis: rawOffset,
          crossAxis: 0
        } : __spreadValues({
          mainAxis: 0,
          crossAxis: 0
        }, rawOffset);
        if (checkMainAxis) {
          const len = mainAxis === "y" ? "height" : "width";
          const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
          const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
          if (mainAxisCoord < limitMin) {
            mainAxisCoord = limitMin;
          } else if (mainAxisCoord > limitMax) {
            mainAxisCoord = limitMax;
          }
        }
        if (checkCrossAxis) {
          var _middlewareData$offse, _middlewareData$offse2;
          const len = mainAxis === "y" ? "width" : "height";
          const isOriginSide = ["top", "left"].includes(getSide(placement));
          const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
          const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
          if (crossAxisCoord < limitMin) {
            crossAxisCoord = limitMin;
          } else if (crossAxisCoord > limitMax) {
            crossAxisCoord = limitMax;
          }
        }
        return {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        };
      }
    };
  };
  const size = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      fn(state) {
        return __async(this, null, function* () {
          const {
            placement,
            rects,
            platform: platform2,
            elements
          } = state;
          const _a2 = evaluate(options, state), {
            apply = () => {
            }
          } = _a2, detectOverflowOptions = __objRest(_a2, [
            "apply"
          ]);
          const overflow2 = yield detectOverflow(state, detectOverflowOptions);
          const side = getSide(placement);
          const alignment = getAlignment(placement);
          const isYAxis = getSideAxis(placement) === "y";
          const {
            width: width2,
            height: height2
          } = rects.floating;
          let heightSide;
          let widthSide;
          if (side === "top" || side === "bottom") {
            heightSide = side;
            widthSide = alignment === ((yield platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
          } else {
            widthSide = side;
            heightSide = alignment === "end" ? "top" : "bottom";
          }
          const overflowAvailableHeight = height2 - overflow2[heightSide];
          const overflowAvailableWidth = width2 - overflow2[widthSide];
          const noShift = !state.middlewareData.shift;
          let availableHeight = overflowAvailableHeight;
          let availableWidth = overflowAvailableWidth;
          if (isYAxis) {
            const maximumClippingWidth = width2 - overflow2.left - overflow2.right;
            availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
          } else {
            const maximumClippingHeight = height2 - overflow2.top - overflow2.bottom;
            availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
          }
          if (noShift && !alignment) {
            const xMin = max(overflow2.left, 0);
            const xMax = max(overflow2.right, 0);
            const yMin = max(overflow2.top, 0);
            const yMax = max(overflow2.bottom, 0);
            if (isYAxis) {
              availableWidth = width2 - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow2.left, overflow2.right));
            } else {
              availableHeight = height2 - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow2.top, overflow2.bottom));
            }
          }
          yield apply(__spreadProps(__spreadValues({}, state), {
            availableWidth,
            availableHeight
          }));
          const nextDimensions = yield platform2.getDimensions(elements.floating);
          if (width2 !== nextDimensions.width || height2 !== nextDimensions.height) {
            return {
              reset: {
                rects: true
              }
            };
          }
          return {};
        });
      }
    };
  };
  function getNodeName(node2) {
    if (isNode(node2)) {
      return (node2.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow(node2) {
    var _node$ownerDocument;
    return (node2 == null ? void 0 : (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node2) {
    var _ref;
    return (_ref = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  function isElement(value) {
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  function isHTMLElement(value) {
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow: overflow2,
      overflowX,
      overflowY,
      display: display2
    } = getComputedStyle(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow2 + overflowY + overflowX) && !["inline", "contents"].includes(display2);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  function isContainingBlock(element) {
    const webkit = isWebKit();
    const css = getComputedStyle(element);
    return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else {
        currentNode = getParentNode(currentNode);
      }
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports)
      return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node2) {
    return ["html", "body", "#document"].includes(getNodeName(node2));
  }
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  function getParentNode(node2) {
    if (getNodeName(node2) === "html") {
      return node2;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node2.assignedSlot || // DOM Element detected.
      node2.parentNode || // ShadowRoot detected.
      isShadowRoot(node2) && node2.host || // Fallback.
      getDocumentElement(node2)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node2) {
    const parentNode = getParentNode(node2);
    if (isLastTraversableNode(parentNode)) {
      return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node2, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node2);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getCssDimensions(element) {
    const css = getComputedStyle(element);
    let width2 = parseFloat(css.width) || 0;
    let height2 = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width2;
    const offsetHeight = hasOffset ? element.offsetHeight : height2;
    const shouldFallback = round(width2) !== offsetWidth || round(height2) !== offsetHeight;
    if (shouldFallback) {
      width2 = offsetWidth;
      height2 = offsetHeight;
    }
    return {
      width: width2,
      height: height2,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element;
  }
  function getScale$1(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width: width2,
      height: height2,
      $
    } = getCssDimensions(domElement);
    let x = ($ ? round(rect.width) : rect.width) / width2;
    let y2 = ($ ? round(rect.height) : rect.height) / height2;
    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y2 || !Number.isFinite(y2)) {
      y2 = 1;
    }
    return {
      x,
      y: y2
    };
  }
  const noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale$1(offsetParent);
        }
      } else {
        scale = getScale$1(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y2 = (clientRect.top + visualOffsets.y) / scale.y;
    let width2 = clientRect.width / scale.x;
    let height2 = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentIFrame = win.frameElement;
      while (currentIFrame && offsetParent && offsetWin !== win) {
        const iframeScale = getScale$1(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle(currentIFrame);
        const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x *= iframeScale.x;
        y2 *= iframeScale.y;
        width2 *= iframeScale.x;
        height2 *= iframeScale.y;
        x += left2;
        y2 += top2;
        currentIFrame = getWindow(currentIFrame).frameElement;
      }
    }
    return rectToClientRect({
      width: width2,
      height: height2,
      x,
      y: y2
    });
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    if (offsetParent === documentElement) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale$1(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
  }
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width2 = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height2 = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y2 = -scroll.scrollTop;
    if (getComputedStyle(body).direction === "rtl") {
      x += max(html.clientWidth, body.clientWidth) - width2;
    }
    return {
      width: width2,
      height: height2,
      x,
      y: y2
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width2 = html.clientWidth;
    let height2 = html.clientHeight;
    let x = 0;
    let y2 = 0;
    if (visualViewport) {
      width2 = visualViewport.width;
      height2 = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width: width2,
      height: height2,
      x,
      y: y2
    };
  }
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top2 = clientRect.top + element.clientTop;
    const left2 = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale$1(element) : createCoords(1);
    const width2 = element.clientWidth * scale.x;
    const height2 = element.clientHeight * scale.y;
    const x = left2 * scale.x;
    const y2 = top2 * scale.y;
    return {
      width: width2,
      height: height2,
      x,
      y: y2
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = __spreadProps(__spreadValues({}, clippingAncestor), {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y
      });
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache2) {
    const cachedResult = cache2.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache2.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    return getCssDimensions(element);
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    return element.offsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const window2 = getWindow(element);
    if (!isHTMLElement(element)) {
      return window2;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }
  const getElementRects = function(_ref) {
    return __async(this, null, function* () {
      let {
        reference: reference2,
        floating,
        strategy
      } = _ref;
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      return {
        reference: getRectRelativeToOffsetParent(reference2, yield getOffsetParentFn(floating), strategy),
        floating: __spreadValues({
          x: 0,
          y: 0
        }, yield getDimensionsFn(floating))
      };
    });
  };
  function isRTL(element) {
    return getComputedStyle(element).direction === "rtl";
  }
  const platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale: getScale$1,
    isElement,
    isRTL
  };
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
      clearTimeout(timeoutId);
      io && io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const {
        left: left2,
        top: top2,
        width: width2,
        height: height2
      } = element.getBoundingClientRect();
      if (!skip) {
        onMove();
      }
      if (!width2 || !height2) {
        return;
      }
      const insetTop = floor(top2);
      const insetRight = floor(root.clientWidth - (left2 + width2));
      const insetBottom = floor(root.clientHeight - (top2 + height2));
      const insetLeft = floor(left2);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 100);
          } else {
            refresh(false, ratio);
          }
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, __spreadProps(__spreadValues({}, options), {
          // Handle <iframe>s
          root: root.ownerDocument
        }));
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference2, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference2);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            resizeObserver && resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference2) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference2);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      cleanupIo && cleanupIo();
      resizeObserver && resizeObserver.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  const computePosition = (reference2, floating, options) => {
    const cache2 = /* @__PURE__ */ new Map();
    const mergedOptions = __spreadValues({
      platform
    }, options);
    const platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), {
      _c: cache2
    });
    return computePosition$1(reference2, floating, __spreadProps(__spreadValues({}, mergedOptions), {
      platform: platformWithCache
    }));
  };
  const arrow = (options) => {
    function isRef(value) {
      return {}.hasOwnProperty.call(value, "current");
    }
    return {
      name: "arrow",
      options,
      fn(state) {
        const {
          element,
          padding: padding2
        } = typeof options === "function" ? options(state) : options;
        if (element && isRef(element)) {
          if (element.current != null) {
            return arrow$1({
              element: element.current,
              padding: padding2
            }).fn(state);
          }
          return {};
        } else if (element) {
          return arrow$1({
            element,
            padding: padding2
          }).fn(state);
        }
        return {};
      }
    };
  };
  var index = typeof document !== "undefined" ? React.useLayoutEffect : React.useEffect;
  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (typeof a !== typeof b) {
      return false;
    }
    if (typeof a === "function" && a.toString() === b.toString()) {
      return true;
    }
    let length2, i, keys;
    if (a && b && typeof a == "object") {
      if (Array.isArray(a)) {
        length2 = a.length;
        if (length2 != b.length)
          return false;
        for (i = length2; i-- !== 0; ) {
          if (!deepEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a);
      length2 = keys.length;
      if (length2 !== Object.keys(b).length) {
        return false;
      }
      for (i = length2; i-- !== 0; ) {
        if (!{}.hasOwnProperty.call(b, keys[i])) {
          return false;
        }
      }
      for (i = length2; i-- !== 0; ) {
        const key = keys[i];
        if (key === "_owner" && a.$$typeof) {
          continue;
        }
        if (!deepEqual(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    return a !== a && b !== b;
  }
  function getDPR(element) {
    if (typeof window === "undefined") {
      return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  function roundByDPR(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
  }
  function useLatestRef(value) {
    const ref = React__namespace.useRef(value);
    index(() => {
      ref.current = value;
    });
    return ref;
  }
  function useFloating(options) {
    if (options === void 0) {
      options = {};
    }
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2,
      elements: {
        reference: externalReference,
        floating: externalFloating
      } = {},
      transform = true,
      whileElementsMounted,
      open
    } = options;
    const [data, setData] = React__namespace.useState({
      x: 0,
      y: 0,
      strategy,
      placement,
      middlewareData: {},
      isPositioned: false
    });
    const [latestMiddleware, setLatestMiddleware] = React__namespace.useState(middleware2);
    if (!deepEqual(latestMiddleware, middleware2)) {
      setLatestMiddleware(middleware2);
    }
    const [_reference, _setReference] = React__namespace.useState(null);
    const [_floating, _setFloating] = React__namespace.useState(null);
    const setReference = React__namespace.useCallback((node2) => {
      if (node2 != referenceRef.current) {
        referenceRef.current = node2;
        _setReference(node2);
      }
    }, [_setReference]);
    const setFloating = React__namespace.useCallback((node2) => {
      if (node2 !== floatingRef.current) {
        floatingRef.current = node2;
        _setFloating(node2);
      }
    }, [_setFloating]);
    const referenceEl = externalReference || _reference;
    const floatingEl = externalFloating || _floating;
    const referenceRef = React__namespace.useRef(null);
    const floatingRef = React__namespace.useRef(null);
    const dataRef = React__namespace.useRef(data);
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const platformRef = useLatestRef(platform2);
    const update = React__namespace.useCallback(() => {
      if (!referenceRef.current || !floatingRef.current) {
        return;
      }
      const config2 = {
        placement,
        strategy,
        middleware: latestMiddleware
      };
      if (platformRef.current) {
        config2.platform = platformRef.current;
      }
      computePosition(referenceRef.current, floatingRef.current, config2).then((data2) => {
        const fullData = __spreadProps(__spreadValues({}, data2), {
          isPositioned: true
        });
        if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
          dataRef.current = fullData;
          ReactDOM__namespace.flushSync(() => {
            setData(fullData);
          });
        }
      });
    }, [latestMiddleware, placement, strategy, platformRef]);
    index(() => {
      if (open === false && dataRef.current.isPositioned) {
        dataRef.current.isPositioned = false;
        setData((data2) => __spreadProps(__spreadValues({}, data2), {
          isPositioned: false
        }));
      }
    }, [open]);
    const isMountedRef = React__namespace.useRef(false);
    index(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    index(() => {
      if (referenceEl)
        referenceRef.current = referenceEl;
      if (floatingEl)
        floatingRef.current = floatingEl;
      if (referenceEl && floatingEl) {
        if (whileElementsMountedRef.current) {
          return whileElementsMountedRef.current(referenceEl, floatingEl, update);
        } else {
          update();
        }
      }
    }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
    const refs = React__namespace.useMemo(() => ({
      reference: referenceRef,
      floating: floatingRef,
      setReference,
      setFloating
    }), [setReference, setFloating]);
    const elements = React__namespace.useMemo(() => ({
      reference: referenceEl,
      floating: floatingEl
    }), [referenceEl, floatingEl]);
    const floatingStyles = React__namespace.useMemo(() => {
      const initialStyles = {
        position: strategy,
        left: 0,
        top: 0
      };
      if (!elements.floating) {
        return initialStyles;
      }
      const x = roundByDPR(elements.floating, data.x);
      const y2 = roundByDPR(elements.floating, data.y);
      if (transform) {
        return __spreadValues(__spreadProps(__spreadValues({}, initialStyles), {
          transform: "translate(" + x + "px, " + y2 + "px)"
        }), getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        });
      }
      return {
        position: strategy,
        left: x,
        top: y2
      };
    }, [strategy, transform, elements.floating, data.x, data.y]);
    return React__namespace.useMemo(() => __spreadProps(__spreadValues({}, data), {
      update,
      refs,
      elements,
      floatingStyles
    }), [data, update, refs, elements, floatingStyles]);
  }
  function getPopupUtilityClass(slot) {
    return generateUtilityClass("MuiPopup", slot);
  }
  const popupClasses = generateUtilityClasses("MuiPopup", ["root", "open"]);
  "use client";
  const _excluded$E = ["anchor", "children", "container", "disablePortal", "keepMounted", "middleware", "offset", "open", "placement", "slotProps", "slots", "strategy", "withTransition"];
  function useUtilityClasses$w(ownerState) {
    const {
      open
    } = ownerState;
    const slots = {
      root: ["root", open && "open"]
    };
    return composeClasses(slots, useClassNamesOverride(getPopupUtilityClass));
  }
  function resolveAnchor(anchor) {
    return typeof anchor === "function" ? anchor() : anchor;
  }
  const Popup = /* @__PURE__ */ React__namespace.forwardRef(function Popup2(props, forwardedRef) {
    var _slots$root;
    const {
      anchor: anchorProp,
      children,
      container,
      disablePortal = false,
      keepMounted = false,
      middleware: middleware2,
      offset: offsetProp = 0,
      open = false,
      placement = "bottom",
      slotProps = {},
      slots = {},
      strategy = "absolute",
      withTransition = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$E);
    const {
      refs,
      elements,
      floatingStyles,
      update,
      placement: finalPlacement
    } = useFloating({
      elements: {
        reference: resolveAnchor(anchorProp)
      },
      open,
      middleware: middleware2 != null ? middleware2 : [offset(offsetProp != null ? offsetProp : 0), flip()],
      placement,
      strategy,
      whileElementsMounted: !keepMounted ? autoUpdate : void 0
    });
    const handleRef = useForkRef(refs.setFloating, forwardedRef);
    const [exited, setExited] = React__namespace.useState(true);
    const handleEntering = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    useEnhancedEffect(() => {
      if (keepMounted && open && elements.reference && elements.floating) {
        const cleanup = autoUpdate(elements.reference, elements.floating, update);
        return cleanup;
      }
      return void 0;
    }, [keepMounted, open, elements, update]);
    const ownerState = _extends({}, props, {
      disablePortal,
      keepMounted,
      offset,
      open,
      placement,
      finalPlacement,
      strategy,
      withTransition
    });
    const display2 = !open && keepMounted && (!withTransition || exited) ? "none" : void 0;
    const classes = useUtilityClasses$w(ownerState);
    const Root = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root,
      additionalProps: {
        ref: handleRef,
        role: "tooltip",
        style: _extends({}, floatingStyles, {
          display: display2
        })
      }
    });
    const shouldRender = open || keepMounted || withTransition && !exited;
    if (!shouldRender) {
      return null;
    }
    const childProps = {
      placement: finalPlacement,
      requestOpen: open,
      onExited: handleExited,
      onEnter: handleEntering
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, {
      disablePortal,
      container,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
        children: typeof children === "function" ? children(childProps) : children
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? Popup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, [virtual element](https://floating-ui.com/docs/virtual-elements),
     * or a function that returns either.
     * It's used to set the position of the popup.
     */
    anchor: PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),
    /**
     * @ignore
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * An HTML element or function that returns one. The container will have the portal children appended to it.
     * By default, it uses the body of the top-level document object, so it's `document.body` in these cases.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * If `true`, the popup will be rendered where it is defined, without the use of portals.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * If `true`, the popup will exist in the DOM even if it's closed.
     * Its visibility will be controlled by the `display` CSS property.
     *
     * Otherwise, a closed popup will be removed from the DOM.
     *
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Collection of Floating UI middleware to use when positioning the popup.
     * If not provided, the [`offset`](https://floating-ui.com/docs/offset)
     * and [`flip`](https://floating-ui.com/docs/flip) functions will be used.
     *
     * @see https://floating-ui.com/docs/computePosition#middleware
     */
    middleware: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.shape({
      fn: PropTypes.func.isRequired,
      name: PropTypes.string.isRequired,
      options: PropTypes.any
    })])),
    /**
     * Distance between a popup and the trigger element.
     * This prop is ignored when custom `middleware` is provided.
     *
     * @default 0
     * @see https://floating-ui.com/docs/offset
     */
    offset: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.shape({
      alignmentAxis: PropTypes.number,
      crossAxis: PropTypes.number,
      mainAxis: PropTypes.number
    })]),
    /**
     * If `true`, the popup is visible.
     *
     * @default false
     */
    open: PropTypes.bool,
    /**
     * Determines where to place the popup relative to the trigger element.
     *
     * @default 'bottom'
     * @see https://floating-ui.com/docs/computePosition#placement
     */
    placement: PropTypes.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * The props used for each slot inside the Popup.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Popup.
     * Either a string to use a HTML element or a component.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The type of CSS position property to use (absolute or fixed).
     *
     * @default 'absolute'
     * @see https://floating-ui.com/docs/computePosition#strategy
     */
    strategy: PropTypes.oneOf(["absolute", "fixed"]),
    /**
     * If `true`, the popup will not disappear immediately when it needs to be closed
     * but wait until the exit transition has finished.
     * In such a case, a function form of `children` must be used and `onExited`
     * callback function must be called when the transition or animation finish.
     *
     * @default false
     */
    withTransition: PropTypes.bool
  } : void 0;
  "use client";
  const SelectActionTypes = {
    buttonClick: "buttonClick",
    browserAutoFill: "browserAutoFill"
  };
  const defaultOptionStringifier = (option) => {
    const {
      label,
      value
    } = option;
    if (typeof label === "string") {
      return label;
    }
    if (typeof value === "string") {
      return value;
    }
    return String(option);
  };
  function selectReducer(state, action) {
    const {
      open
    } = state;
    const {
      context: {
        selectionMode
      }
    } = action;
    if (action.type === SelectActionTypes.buttonClick) {
      var _state$selectedValues;
      const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, "start", action.context);
      return _extends({}, state, {
        open: !open,
        highlightedValue: !open ? itemToHighlight : null
      });
    }
    if (action.type === SelectActionTypes.browserAutoFill) {
      return handleItemSelection(action.item, state, action.context);
    }
    const newState = listReducer(state, action);
    switch (action.type) {
      case ListActionTypes.keyDown:
        if (state.open) {
          if (action.event.key === "Escape") {
            return _extends({}, newState, {
              open: false
            });
          }
          if (selectionMode === "single" && (action.event.key === "Enter" || action.event.key === " ")) {
            return _extends({}, newState, {
              open: false
            });
          }
        } else {
          if (action.event.key === "Enter" || action.event.key === " " || action.event.key === "ArrowDown") {
            var _state$selectedValues2;
            return _extends({}, state, {
              open: true,
              highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, "start", action.context)
            });
          }
          if (action.event.key === "ArrowUp") {
            var _state$selectedValues3;
            return _extends({}, state, {
              open: true,
              highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, "end", action.context)
            });
          }
        }
        break;
      case ListActionTypes.itemClick:
        if (selectionMode === "single") {
          return _extends({}, newState, {
            open: false
          });
        }
        break;
      case ListActionTypes.blur:
        return _extends({}, newState, {
          open: false
        });
      default:
        return newState;
    }
    return newState;
  }
  "use client";
  const visuallyHiddenStyle = {
    clip: "rect(1px, 1px, 1px, 1px)",
    clipPath: "inset(50%)",
    height: "1px",
    width: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    left: "50%",
    bottom: 0
    // to display the native browser validation error at the bottom of the Select.
  };
  function defaultFormValueProvider(selectedOption) {
    if (Array.isArray(selectedOption)) {
      if (selectedOption.length === 0) {
        return "";
      }
      return JSON.stringify(selectedOption.map((o) => o.value));
    }
    if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
      return "";
    }
    if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
      return selectedOption.value;
    }
    return JSON.stringify(selectedOption.value);
  }
  function preventDefault(event) {
    event.preventDefault();
  }
  function useSelect(props) {
    const {
      areOptionsEqual,
      buttonRef: buttonRefProp,
      defaultOpen = false,
      defaultValue: defaultValueProp,
      disabled = false,
      listboxId: listboxIdProp,
      listboxRef: listboxRefProp,
      multiple = false,
      name,
      required,
      onChange,
      onHighlightChange,
      onOpenChange,
      open: openProp,
      options: optionsParam,
      getOptionAsString = defaultOptionStringifier,
      getSerializedValue = defaultFormValueProvider,
      value: valueProp,
      componentName = "useSelect"
    } = props;
    const buttonRef = React__namespace.useRef(null);
    const handleButtonRef = useForkRef(buttonRefProp, buttonRef);
    const listboxRef = React__namespace.useRef(null);
    const listboxId = useId(listboxIdProp);
    let defaultValue;
    if (valueProp === void 0 && defaultValueProp === void 0) {
      defaultValue = [];
    } else if (defaultValueProp !== void 0) {
      if (multiple) {
        defaultValue = defaultValueProp;
      } else {
        defaultValue = defaultValueProp == null ? [] : [defaultValueProp];
      }
    }
    const value = React__namespace.useMemo(() => {
      if (valueProp !== void 0) {
        if (multiple) {
          return valueProp;
        }
        return valueProp == null ? [] : [valueProp];
      }
      return void 0;
    }, [valueProp, multiple]);
    const {
      subitems,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const options = React__namespace.useMemo(() => {
      if (optionsParam != null) {
        return new Map(optionsParam.map((option, index2) => [option.value, {
          value: option.value,
          label: option.label,
          disabled: option.disabled,
          ref: /* @__PURE__ */ React__namespace.createRef(),
          id: `${listboxId}_${index2}`
        }]));
      }
      return subitems;
    }, [optionsParam, subitems, listboxId]);
    const handleListboxRef = useForkRef(listboxRefProp, listboxRef);
    const {
      getRootProps: getButtonRootProps,
      active: buttonActive,
      focusVisible: buttonFocusVisible,
      rootRef: mergedButtonRef
    } = useButton({
      disabled,
      rootRef: handleButtonRef
    });
    const optionValues = React__namespace.useMemo(() => Array.from(options.keys()), [options]);
    const getOptionByValue = React__namespace.useCallback((valueToGet) => {
      if (areOptionsEqual !== void 0) {
        const similarValue = optionValues.find((optionValue) => areOptionsEqual(optionValue, valueToGet));
        return options.get(similarValue);
      }
      return options.get(valueToGet);
    }, [options, areOptionsEqual, optionValues]);
    const isItemDisabled = React__namespace.useCallback((valueToCheck) => {
      var _option$disabled;
      const option = getOptionByValue(valueToCheck);
      return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;
    }, [getOptionByValue]);
    const stringifyOption = React__namespace.useCallback((valueToCheck) => {
      const option = getOptionByValue(valueToCheck);
      if (!option) {
        return "";
      }
      return getOptionAsString(option);
    }, [getOptionByValue, getOptionAsString]);
    const controlledState = React__namespace.useMemo(() => ({
      selectedValues: value,
      open: openProp
    }), [value, openProp]);
    const getItemId = React__namespace.useCallback((itemValue) => {
      var _options$get;
      return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;
    }, [options]);
    const handleSelectionChange = React__namespace.useCallback((event, newValues) => {
      if (multiple) {
        onChange == null || onChange(event, newValues);
      } else {
        var _newValues$;
        onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);
      }
    }, [multiple, onChange]);
    const handleHighlightChange = React__namespace.useCallback((event, newValue) => {
      onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);
    }, [onHighlightChange]);
    const handleStateChange = React__namespace.useCallback((event, field, fieldValue) => {
      if (field === "open") {
        onOpenChange == null || onOpenChange(fieldValue);
        if (fieldValue === false && (event == null ? void 0 : event.type) !== "blur") {
          var _buttonRef$current;
          (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
        }
      }
    }, [onOpenChange]);
    const useListParameters = {
      getInitialState: () => {
        var _defaultValue;
        return {
          highlightedValue: null,
          selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],
          open: defaultOpen
        };
      },
      getItemId,
      controlledProps: controlledState,
      itemComparer: areOptionsEqual,
      isItemDisabled,
      rootRef: mergedButtonRef,
      onChange: handleSelectionChange,
      onHighlightChange: handleHighlightChange,
      onStateChange: handleStateChange,
      reducerActionContext: React__namespace.useMemo(() => ({
        multiple
      }), [multiple]),
      items: optionValues,
      getItemAsString: stringifyOption,
      selectionMode: multiple ? "multiple" : "single",
      stateReducer: selectReducer,
      componentName
    };
    const {
      dispatch,
      getRootProps: getListboxRootProps,
      contextValue: listContextValue,
      state: {
        open,
        highlightedValue: highlightedOption,
        selectedValues: selectedOptions
      },
      rootRef: mergedListRootRef
    } = useList(useListParameters);
    const createHandleButtonMouseDown = (externalEventHandlers) => (event) => {
      var _externalEventHandler;
      externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onMouseDown) == null || _externalEventHandler.call(externalEventHandlers, event);
      if (!event.defaultMuiPrevented) {
        const action = {
          type: SelectActionTypes.buttonClick,
          event
        };
        dispatch(action);
      }
    };
    useEnhancedEffect(() => {
      if (highlightedOption != null) {
        var _getOptionByValue;
        const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;
        if (!listboxRef.current || !(optionRef != null && optionRef.current)) {
          return;
        }
        const listboxClientRect = listboxRef.current.getBoundingClientRect();
        const optionClientRect = optionRef.current.getBoundingClientRect();
        if (optionClientRect.top < listboxClientRect.top) {
          listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
        } else if (optionClientRect.bottom > listboxClientRect.bottom) {
          listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
        }
      }
    }, [highlightedOption, getOptionByValue]);
    const getOptionMetadata = React__namespace.useCallback((optionValue) => getOptionByValue(optionValue), [getOptionByValue]);
    const getSelectTriggerProps = (otherHandlers = {}) => {
      return _extends({}, otherHandlers, {
        onMouseDown: createHandleButtonMouseDown(otherHandlers),
        ref: mergedListRootRef,
        role: "combobox",
        "aria-expanded": open,
        "aria-controls": listboxId
      });
    };
    const getButtonProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);
      const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);
      return _extends({}, externalProps, combinedProps(externalEventHandlers));
    };
    const getListboxProps = (externalProps = {}) => {
      return _extends({}, externalProps, {
        id: listboxId,
        role: "listbox",
        "aria-multiselectable": multiple ? "true" : void 0,
        ref: handleListboxRef,
        onMouseDown: preventDefault
        // to prevent the button from losing focus when interacting with the listbox
      });
    };
    React__namespace.useDebugValue({
      selectedOptions,
      highlightedOption,
      open
    });
    const contextValue = React__namespace.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);
    let selectValue;
    if (props.multiple) {
      selectValue = selectedOptions;
    } else {
      selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;
    }
    let selectedOptionsMetadata;
    if (multiple) {
      selectedOptionsMetadata = selectValue.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
    } else {
      var _getOptionMetadata;
      selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;
    }
    const createHandleHiddenInputChange = (externalEventHandlers) => (event) => {
      var _externalEventHandler2;
      externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      const option = options.get(event.target.value);
      if (event.target.value === "") {
        dispatch({
          type: ListActionTypes.clearSelection
        });
      } else if (option !== void 0) {
        dispatch({
          type: SelectActionTypes.browserAutoFill,
          item: option.value,
          event
        });
      }
    };
    const getHiddenInputProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      return _extends({
        name,
        tabIndex: -1,
        "aria-hidden": true,
        required: required ? true : void 0,
        value: getSerializedValue(selectedOptionsMetadata),
        style: visuallyHiddenStyle
      }, externalProps, {
        onChange: createHandleHiddenInputChange(externalEventHandlers)
      });
    };
    return {
      buttonActive,
      buttonFocusVisible,
      buttonRef: mergedButtonRef,
      contextValue,
      disabled,
      dispatch,
      getButtonProps,
      getHiddenInputProps,
      getListboxProps,
      getOptionMetadata,
      listboxRef: mergedListRootRef,
      open,
      options: optionValues,
      value: selectValue,
      highlightedOption
    };
  }
  "use client";
  function SelectProvider(props) {
    const {
      value,
      children
    } = props;
    const {
      dispatch,
      getItemIndex,
      getItemState,
      registerItem,
      totalSubitemCount
    } = value;
    const listContextValue = React__namespace.useMemo(() => ({
      dispatch,
      getItemState,
      getItemIndex
    }), [dispatch, getItemIndex, getItemState]);
    const compoundComponentContextValue = React__namespace.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
        value: listContextValue,
        children
      })
    });
  }
  "use client";
  function getSelectUtilityClass(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  const selectClasses$1 = generateUtilityClasses("MuiSelect", ["root", "button", "listbox", "popper", "active", "expanded", "disabled", "focusVisible"]);
  "use client";
  var _span$4;
  const _excluded$D = ["areOptionsEqual", "autoComplete", "autoFocus", "children", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "multiple", "name", "required", "onChange", "onListboxOpenChange", "getOptionAsString", "renderValue", "placeholder", "slotProps", "slots", "value"];
  function defaultRenderValue(selectedOptions) {
    var _selectedOptions$labe;
    if (Array.isArray(selectedOptions)) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
        children: selectedOptions.map((o) => o.label).join(", ")
      });
    }
    return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : null;
  }
  function useUtilityClasses$v(ownerState) {
    const {
      active,
      disabled,
      open,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
      listbox: ["listbox", disabled && "disabled"],
      popper: ["popper"]
    };
    return composeClasses(slots, useClassNamesOverride(getSelectUtilityClass));
  }
  const Select$1 = /* @__PURE__ */ React__namespace.forwardRef(function Select2(props, forwardedRef) {
    var _slots$root, _slots$listbox, _slots$popper, _ref, _renderValue;
    const {
      areOptionsEqual,
      autoComplete,
      autoFocus,
      children,
      defaultValue,
      defaultListboxOpen = false,
      disabled: disabledProp,
      getSerializedValue,
      listboxId,
      listboxOpen: listboxOpenProp,
      multiple = false,
      name,
      required = false,
      onChange,
      onListboxOpenChange,
      getOptionAsString = defaultOptionStringifier,
      renderValue: renderValueProp,
      placeholder,
      slotProps = {},
      slots = {},
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$D);
    const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;
    const [buttonDefined, setButtonDefined] = React__namespace.useState(false);
    const buttonRef = React__namespace.useRef(null);
    const listboxRef = React__namespace.useRef(null);
    const Button2 = (_slots$root = slots.root) != null ? _slots$root : "button";
    const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
    const PopperComponent = (_slots$popper = slots.popper) != null ? _slots$popper : Popper;
    const handleButtonRefChange = React__namespace.useCallback((element) => {
      setButtonDefined(element != null);
    }, []);
    const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);
    React__namespace.useEffect(() => {
      if (autoFocus) {
        buttonRef.current.focus();
      }
    }, [autoFocus]);
    const {
      buttonActive,
      buttonFocusVisible,
      contextValue,
      disabled,
      getButtonProps,
      getListboxProps,
      getHiddenInputProps,
      getOptionMetadata,
      value,
      open
    } = useSelect({
      name,
      required,
      getSerializedValue,
      areOptionsEqual,
      buttonRef: handleButtonRef,
      defaultOpen: defaultListboxOpen,
      defaultValue,
      disabled: disabledProp,
      listboxId,
      multiple,
      open: listboxOpenProp,
      onChange,
      onOpenChange: onListboxOpenChange,
      getOptionAsString,
      value: valueProp,
      componentName: "Select"
    });
    const ownerState = _extends({}, props, {
      active: buttonActive,
      defaultListboxOpen,
      disabled,
      focusVisible: buttonFocusVisible,
      open,
      multiple,
      renderValue,
      value
    });
    const classes = useUtilityClasses$v(ownerState);
    const buttonProps = useSlotProps({
      elementType: Button2,
      getSlotProps: getButtonProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root
    });
    const listboxProps = useSlotProps({
      elementType: ListboxRoot,
      getSlotProps: getListboxProps,
      externalSlotProps: slotProps.listbox,
      additionalProps: {
        ref: listboxRef
      },
      ownerState,
      className: classes.listbox
    });
    const popperProps = useSlotProps({
      elementType: PopperComponent,
      externalSlotProps: slotProps.popper,
      additionalProps: {
        anchorEl: buttonRef.current,
        keepMounted: true,
        open,
        placement: "bottom-start",
        role: void 0
      },
      ownerState,
      className: classes.popper
    });
    let selectedOptionsMetadata;
    if (multiple) {
      selectedOptionsMetadata = value.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
    } else {
      var _getOptionMetadata;
      selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Button2, _extends({}, buttonProps, {
        children: (_ref = (_renderValue = renderValue(selectedOptionsMetadata)) != null ? _renderValue : placeholder) != null ? _ref : (
          // fall back to a zero-width space to prevent layout shift
          // from https://github.com/mui/material-ui/pull/24563
          _span$4 || (_span$4 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: "notranslate",
            children: "​"
          }))
        )
      })), buttonDefined && /* @__PURE__ */ jsxRuntimeExports.jsx(PopperComponent, _extends({}, popperProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListboxRoot, _extends({}, listboxProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(SelectProvider, {
            value: contextValue,
            children
          })
        }))
      })), /* @__PURE__ */ jsxRuntimeExports.jsx("input", _extends({}, getHiddenInputProps(), {
        autoComplete
      }))]
    });
  });
  process.env.NODE_ENV !== "production" ? Select$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A function used to determine if two options' values are equal.
     * By default, reference equality is used.
     *
     * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).
     * Therefore, it's recommented to use the default reference equality comparison whenever possible.
     */
    areOptionsEqual: PropTypes.func,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the select element is focused during the first mount
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the select will be initially open.
     * @default false
     */
    defaultListboxOpen: PropTypes.bool,
    /**
     * The default selected value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the select is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * A function used to convert the option label to a string.
     * It's useful when labels are elements and need to be converted to plain text
     * to enable navigation using character keys on a keyboard.
     *
     * @default defaultOptionStringifier
     */
    getOptionAsString: PropTypes.func,
    /**
     * A function to convert the currently selected value to a string.
     * Used to set a value of a hidden input associated with the select,
     * so that the selected value can be posted with a form.
     */
    getSerializedValue: PropTypes.func,
    /**
     * `id` attribute of the listbox element.
     */
    listboxId: PropTypes.string,
    /**
     * Controls the open state of the select's listbox.
     * @default undefined
     */
    listboxOpen: PropTypes.bool,
    /**
     * If `true`, selecting multiple values is allowed.
     * This affects the type of the `value`, `defaultValue`, and `onChange` props.
     *
     * @default false
     */
    multiple: PropTypes.bool,
    /**
     * Name of the element. For example used by the server to identify the fields in form submits.
     * If the name is provided, the component will render a hidden input element that can be submitted to a server.
     */
    name: PropTypes.string,
    /**
     * Callback fired when an option is selected.
     */
    onChange: PropTypes.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see listboxOpen).
     */
    onListboxOpenChange: PropTypes.func,
    /**
     * Text to show when there is no selected value.
     */
    placeholder: PropTypes.node,
    /**
     * Function that customizes the rendering of the selected value.
     */
    renderValue: PropTypes.func,
    /**
     * If `true`, the Select cannot be empty when submitting form.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: PropTypes.shape({
      listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Select.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      listbox: PropTypes.elementType,
      popper: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The selected value.
     * Set to `null` to deselect all options.
     */
    value: PropTypes.any
  } : void 0;
  "use client";
  function getSliderUtilityClass(slot) {
    return generateUtilityClass("MuiSlider", slot);
  }
  const sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb"]);
  "use client";
  const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
  function asc(a, b) {
    return a - b;
  }
  function clamp(value, min2, max2) {
    if (value == null) {
      return min2;
    }
    return Math.min(Math.max(min2, value), max2);
  }
  function findClosest(values2, currentValue) {
    var _values$reduce;
    const {
      index: closestIndex
    } = (_values$reduce = values2.reduce((acc, value, index2) => {
      const distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index: index2
        };
      }
      return acc;
    }, null)) != null ? _values$reduce : {};
    return closestIndex;
  }
  function trackFinger(event, touchId) {
    if (touchId.current !== void 0 && event.changedTouches) {
      const touchEvent = event;
      for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
        const touch = touchEvent.changedTouches[i];
        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  function valueToPercent(value, min2, max2) {
    return (value - min2) * 100 / (max2 - min2);
  }
  function percentToValue(percent, min2, max2) {
    return (max2 - min2) * percent + min2;
  }
  function getDecimalPrecision(num) {
    if (Math.abs(num) < 1) {
      const parts = num.toExponential().split("e-");
      const matissaDecimalPart = parts[0].split(".")[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToStep(value, step, min2) {
    const nearest = Math.round((value - min2) / step) * step + min2;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
  }
  function setValueIndex({
    values: values2,
    newValue,
    index: index2
  }) {
    const output = values2.slice();
    output[index2] = newValue;
    return output.sort(asc);
  }
  function focusThumb({
    sliderRef,
    activeIndex,
    setActive
  }) {
    var _sliderRef$current, _doc$activeElement;
    const doc = ownerDocument(sliderRef.current);
    if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
      var _sliderRef$current2;
      (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }
    if (setActive) {
      setActive(activeIndex);
    }
  }
  function areValuesEqual(newValue, oldValue) {
    if (typeof newValue === "number" && typeof oldValue === "number") {
      return newValue === oldValue;
    }
    if (typeof newValue === "object" && typeof oldValue === "object") {
      return areArraysEqual(newValue, oldValue);
    }
    return false;
  }
  const axisProps = {
    horizontal: {
      offset: (percent) => ({
        left: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    "horizontal-reverse": {
      offset: (percent) => ({
        right: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    vertical: {
      offset: (percent) => ({
        bottom: `${percent}%`
      }),
      leap: (percent) => ({
        height: `${percent}%`
      })
    }
  };
  const Identity$1 = (x) => x;
  let cachedSupportsTouchActionNone;
  function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === void 0) {
      if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
        cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
      } else {
        cachedSupportsTouchActionNone = true;
      }
    }
    return cachedSupportsTouchActionNone;
  }
  function useSlider(parameters) {
    const {
      "aria-labelledby": ariaLabelledby,
      defaultValue,
      disabled = false,
      disableSwap = false,
      isRtl = false,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      name,
      onChange,
      onChangeCommitted,
      orientation = "horizontal",
      rootRef: ref,
      scale = Identity$1,
      step = 1,
      tabIndex,
      value: valueProp
    } = parameters;
    const touchId = React__namespace.useRef();
    const [active, setActive] = React__namespace.useState(-1);
    const [open, setOpen] = React__namespace.useState(-1);
    const [dragging, setDragging] = React__namespace.useState(false);
    const moveCount = React__namespace.useRef(0);
    const [valueDerived, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue != null ? defaultValue : min2,
      name: "Slider"
    });
    const handleChange = onChange && ((event, value, thumbIndex) => {
      const nativeEvent = event.nativeEvent || event;
      const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
      Object.defineProperty(clonedEvent, "target", {
        writable: true,
        value: {
          value,
          name
        }
      });
      onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values2 = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values2 = values2.map((value) => clamp(value, min2, max2));
    const marks = marksProp === true && step !== null ? [...Array(Math.floor((max2 - min2) / step) + 1)].map((_2, index2) => ({
      value: min2 + step * index2
    })) : marksProp || [];
    const marksValues = marks.map((mark) => mark.value);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusedThumbIndex, setFocusedThumbIndex] = React__namespace.useState(-1);
    const sliderRef = React__namespace.useRef();
    const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
    const handleRef = useForkRef(ref, handleFocusRef);
    const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      const index2 = Number(event.currentTarget.getAttribute("data-index"));
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusedThumbIndex(index2);
      }
      setOpen(index2);
      otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
    };
    const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusedThumbIndex(-1);
      }
      setOpen(-1);
      otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    };
    useEnhancedEffect(() => {
      if (disabled && sliderRef.current.contains(document.activeElement)) {
        var _document$activeEleme;
        (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();
      }
    }, [disabled]);
    if (disabled && active !== -1) {
      setActive(-1);
    }
    if (disabled && focusedThumbIndex !== -1) {
      setFocusedThumbIndex(-1);
    }
    const createHandleHiddenInputChange = (otherHandlers) => (event) => {
      var _otherHandlers$onChan;
      (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);
      const index2 = Number(event.currentTarget.getAttribute("data-index"));
      const value = values2[index2];
      const marksIndex = marksValues.indexOf(value);
      let newValue = event.target.valueAsNumber;
      if (marks && step == null) {
        const maxMarksValue = marksValues[marksValues.length - 1];
        if (newValue > maxMarksValue) {
          newValue = maxMarksValue;
        } else if (newValue < marksValues[0]) {
          newValue = marksValues[0];
        } else {
          newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
      }
      newValue = clamp(newValue, min2, max2);
      if (range) {
        if (disableSwap) {
          newValue = clamp(newValue, values2[index2 - 1] || -Infinity, values2[index2 + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue,
          index: index2
        });
        let activeIndex = index2;
        if (!disableSwap) {
          activeIndex = newValue.indexOf(previousValue);
        }
        focusThumb({
          sliderRef,
          activeIndex
        });
      }
      setValueState(newValue);
      setFocusedThumbIndex(index2);
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(event, newValue, index2);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
    };
    const previousIndex = React__namespace.useRef();
    let axis = orientation;
    if (isRtl && orientation === "horizontal") {
      axis += "-reverse";
    }
    const getFingerNewValue = ({
      finger,
      move = false
    }) => {
      const {
        current: slider
      } = sliderRef;
      const {
        width: width2,
        height: height2,
        bottom: bottom2,
        left: left2
      } = slider.getBoundingClientRect();
      let percent;
      if (axis.indexOf("vertical") === 0) {
        percent = (bottom2 - finger.y) / height2;
      } else {
        percent = (finger.x - left2) / width2;
      }
      if (axis.indexOf("-reverse") !== -1) {
        percent = 1 - percent;
      }
      let newValue;
      newValue = percentToValue(percent, min2, max2);
      if (step) {
        newValue = roundValueToStep(newValue, step, min2);
      } else {
        const closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }
      newValue = clamp(newValue, min2, max2);
      let activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values2, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue,
          index: activeIndex
        });
        if (!(disableSwap && move)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue,
        activeIndex
      };
    };
    const handleTouchMove = useEventCallback((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      if (!finger) {
        return;
      }
      moveCount.current += 1;
      if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
        handleTouchEnd(nativeEvent);
        return;
      }
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        move: true
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
        setDragging(true);
      }
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    });
    const handleTouchEnd = useEventCallback((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      setDragging(false);
      if (!finger) {
        return;
      }
      const {
        newValue
      } = getFingerNewValue({
        finger,
        move: true
      });
      setActive(-1);
      if (nativeEvent.type === "touchend") {
        setOpen(-1);
      }
      if (onChangeCommitted) {
        onChangeCommitted(nativeEvent, newValue);
      }
      touchId.current = void 0;
      stopListening();
    });
    const handleTouchStart = useEventCallback((nativeEvent) => {
      if (disabled) {
        return;
      }
      if (!doesSupportTouchActionNone()) {
        nativeEvent.preventDefault();
      }
      const touch = nativeEvent.changedTouches[0];
      if (touch != null) {
        touchId.current = touch.identifier;
      }
      const finger = trackFinger(nativeEvent, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("touchmove", handleTouchMove);
      doc.addEventListener("touchend", handleTouchEnd);
    });
    const stopListening = React__namespace.useCallback(() => {
      const doc = ownerDocument(sliderRef.current);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    }, [handleTouchEnd, handleTouchMove]);
    React__namespace.useEffect(() => {
      const {
        current: slider
      } = sliderRef;
      slider.addEventListener("touchstart", handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      return () => {
        slider.removeEventListener("touchstart", handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        stopListening();
      };
    }, [stopListening, handleTouchStart]);
    React__namespace.useEffect(() => {
      if (disabled) {
        stopListening();
      }
    }, [disabled, stopListening]);
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
      if (disabled) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      const finger = trackFinger(event, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(event, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("mousemove", handleTouchMove);
      doc.addEventListener("mouseup", handleTouchEnd);
    };
    const trackOffset = valueToPercent(range ? values2[0] : min2, min2, max2);
    const trackLeap = valueToPercent(values2[values2.length - 1], min2, max2) - trackOffset;
    const getRootProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers(externalProps);
      const ownEventHandlers = {
        onMouseDown: createHandleMouseDown(externalHandlers || {})
      };
      const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
      return _extends({}, externalProps, {
        ref: handleRef
      }, mergedEventHandlers);
    };
    const createHandleMouseOver = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);
      const index2 = Number(event.currentTarget.getAttribute("data-index"));
      setOpen(index2);
    };
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous3;
      (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);
      setOpen(-1);
    };
    const getThumbProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers(externalProps);
      const ownEventHandlers = {
        onMouseOver: createHandleMouseOver(externalHandlers || {}),
        onMouseLeave: createHandleMouseLeave(externalHandlers || {})
      };
      return _extends({}, externalProps, externalHandlers, ownEventHandlers);
    };
    const getThumbStyle = (index2) => {
      return {
        // So the non active thumb doesn't show its label on hover.
        pointerEvents: active !== -1 && active !== index2 ? "none" : void 0
      };
    };
    const getHiddenInputProps = (externalProps = {}) => {
      var _parameters$step;
      const externalHandlers = extractEventHandlers(externalProps);
      const ownEventHandlers = {
        onChange: createHandleHiddenInputChange(externalHandlers || {}),
        onFocus: createHandleHiddenInputFocus(externalHandlers || {}),
        onBlur: createHandleHiddenInputBlur(externalHandlers || {})
      };
      const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
      return _extends({
        tabIndex,
        "aria-labelledby": ariaLabelledby,
        "aria-orientation": orientation,
        "aria-valuemax": scale(max2),
        "aria-valuemin": scale(min2),
        name,
        type: "range",
        min: parameters.min,
        max: parameters.max,
        step: parameters.step === null && parameters.marks ? "any" : (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
        disabled
      }, externalProps, mergedEventHandlers, {
        style: _extends({}, visuallyHidden, {
          direction: isRtl ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%"
        })
      });
    };
    return {
      active,
      axis,
      axisProps,
      dragging,
      focusedThumbIndex,
      getHiddenInputProps,
      getRootProps,
      getThumbProps,
      marks,
      open,
      range,
      rootRef: handleRef,
      trackLeap,
      trackOffset,
      values: values2,
      getThumbStyle
    };
  }
  "use client";
  "use client";
  const _excluded$C = ["aria-label", "aria-valuetext", "aria-labelledby", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelFormat", "isRtl", "defaultValue", "slotProps", "slots"];
  function Identity(x) {
    return x;
  }
  const useUtilityClasses$u = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled"],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return composeClasses(slots, useClassNamesOverride(getSliderUtilityClass));
  };
  const Slider = /* @__PURE__ */ React__namespace.forwardRef(function Slider2(props, forwardedRef) {
    var _slots$root, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      className,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      orientation = "horizontal",
      scale = Identity,
      step = 1,
      track = "normal",
      valueLabelFormat = Identity,
      isRtl = false,
      defaultValue,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$C);
    const partialOwnerState = _extends({}, props, {
      marks: marksProp,
      disabled,
      disableSwap,
      isRtl,
      defaultValue,
      max: max2,
      min: min2,
      orientation,
      scale,
      step,
      track,
      valueLabelFormat
    });
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      active,
      axis,
      range,
      focusedThumbIndex,
      dragging,
      marks,
      values: values2,
      trackOffset,
      trackLeap,
      getThumbStyle
    } = useSlider(_extends({}, partialOwnerState, {
      rootRef: forwardedRef
    }));
    const ownerState = _extends({}, partialOwnerState, {
      marked: marks.length > 0 && marks.some((mark) => mark.label),
      dragging,
      focusedThumbIndex,
      activeThumbIndex: active
    });
    const classes = useUtilityClasses$u(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: [classes.root, className]
    });
    const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : "span";
    const railProps = useSlotProps({
      elementType: Rail,
      externalSlotProps: slotProps.rail,
      ownerState,
      className: classes.rail
    });
    const Track = (_slots$track = slots.track) != null ? _slots$track : "span";
    const trackProps = useSlotProps({
      elementType: Track,
      externalSlotProps: slotProps.track,
      additionalProps: {
        style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
      },
      ownerState,
      className: classes.track
    });
    const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
    const thumbProps = useSlotProps({
      elementType: Thumb,
      getSlotProps: getThumbProps,
      externalSlotProps: slotProps.thumb,
      ownerState,
      skipResolvingSlotProps: true
    });
    const ValueLabel = slots.valueLabel;
    const valueLabelProps = useSlotProps({
      elementType: ValueLabel,
      externalSlotProps: slotProps.valueLabel,
      ownerState
    });
    const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : "span";
    const markProps = useSlotProps({
      elementType: Mark,
      externalSlotProps: slotProps.mark,
      ownerState,
      className: classes.mark
    });
    const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : "span";
    const markLabelProps = useSlotProps({
      elementType: MarkLabel,
      externalSlotProps: slotProps.markLabel,
      ownerState
    });
    const Input2 = slots.input || "input";
    const inputProps = useSlotProps({
      elementType: Input2,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: slotProps.input,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Rail, _extends({}, railProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(Track, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index2) => {
        const percent = valueToPercent(mark.value, min2, max2);
        const style2 = axisProps2[axis].offset(percent);
        let markActive;
        if (track === false) {
          markActive = values2.indexOf(mark.value) !== -1;
        } else {
          markActive = track === "normal" && (range ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Mark, _extends({
            "data-index": index2
          }, markProps, !isHostComponent(Mark) && {
            markActive
          }, {
            style: _extends({}, style2, markProps.style),
            className: clsx(markProps.className, markActive && classes.markActive)
          })), mark.label != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(MarkLabel, _extends({
            "aria-hidden": true,
            "data-index": index2
          }, markLabelProps, !isHostComponent(MarkLabel) && {
            markLabelActive: markActive
          }, {
            style: _extends({}, style2, markLabelProps.style),
            className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          })) : null]
        }, index2);
      }), values2.map((value, index2) => {
        const percent = valueToPercent(value, min2, max2);
        const style2 = axisProps2[axis].offset(percent);
        const resolvedSlotProps = resolveComponentProps(slotProps.thumb, ownerState, {
          index: index2,
          focused: focusedThumbIndex === index2,
          active: active === index2
        });
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(Thumb, _extends({
          "data-index": index2
        }, thumbProps, resolvedSlotProps, {
          className: clsx(classes.thumb, thumbProps.className, resolvedSlotProps == null ? void 0 : resolvedSlotProps.className, active === index2 && classes.active, focusedThumbIndex === index2 && classes.focusVisible),
          style: _extends({}, style2, getThumbStyle(index2), thumbProps.style, resolvedSlotProps == null ? void 0 : resolvedSlotProps.style),
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends({
            "data-index": index2,
            "aria-label": getAriaLabel ? getAriaLabel(index2) : ariaLabel,
            "aria-valuenow": scale(value),
            "aria-labelledby": ariaLabelledby,
            "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index2) : ariaValuetext,
            value: values2[index2]
          }, inputProps)), ValueLabel ? /* @__PURE__ */ jsxRuntimeExports.jsx(ValueLabel, _extends({}, !isHostComponent(ValueLabel) && {
            valueLabelFormat,
            index: index2,
            disabled
          }, valueLabelProps, {
            children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index2) : valueLabelFormat
          })) : null]
        }), index2);
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? Slider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The label of the slider.
     */
    "aria-label": chainPropTypes(PropTypes.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": PropTypes.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": chainPropTypes(PropTypes.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: PropTypes.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: PropTypes.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: PropTypes.func,
    /**
     * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
     * @default false
     */
    isRtl: PropTypes.bool,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
      label: PropTypes.node,
      value: PropTypes.number.isRequired
    })), PropTypes.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: PropTypes.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: PropTypes.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: PropTypes.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: PropTypes.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: PropTypes.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: PropTypes.func,
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      valueLabel: PropTypes.oneOfType([PropTypes.any, PropTypes.func])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      mark: PropTypes.elementType,
      markLabel: PropTypes.elementType,
      rail: PropTypes.elementType,
      root: PropTypes.elementType,
      thumb: PropTypes.elementType,
      track: PropTypes.elementType,
      valueLabel: PropTypes.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: PropTypes.number,
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: PropTypes.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: PropTypes.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])
  } : void 0;
  "use client";
  function getSnackbarUtilityClass(slot) {
    return generateUtilityClass("MuiSnackbar", slot);
  }
  const snackbarClasses = generateUtilityClasses("MuiSnackbar", ["root"]);
  "use client";
  function useSnackbar(parameters = {}) {
    const {
      autoHideDuration = null,
      disableWindowBlurListener = false,
      onClose,
      open,
      resumeHideDuration
    } = parameters;
    const timerAutoHide = React__namespace.useRef();
    React__namespace.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (!nativeEvent.defaultPrevented) {
          if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
            onClose == null || onClose(nativeEvent, "escapeKeyDown");
          }
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [open, onClose]);
    const handleClose = useEventCallback((event, reason) => {
      onClose == null || onClose(event, reason);
    });
    const setAutoHideTimer = useEventCallback((autoHideDurationParam) => {
      if (!onClose || autoHideDurationParam == null) {
        return;
      }
      clearTimeout(timerAutoHide.current);
      timerAutoHide.current = setTimeout(() => {
        handleClose(null, "timeout");
      }, autoHideDurationParam);
    });
    React__namespace.useEffect(() => {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }
      return () => {
        clearTimeout(timerAutoHide.current);
      };
    }, [open, autoHideDuration, setAutoHideTimer]);
    const handleClickAway = (event) => {
      onClose == null || onClose(event, "clickaway");
    };
    const handlePause = () => {
      clearTimeout(timerAutoHide.current);
    };
    const handleResume = React__namespace.useCallback(() => {
      if (autoHideDuration != null) {
        setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
      }
    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
    const createHandleBlur = (otherHandlers) => (event) => {
      const onBlurCallback = otherHandlers.onBlur;
      onBlurCallback == null || onBlurCallback(event);
      handleResume();
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      const onFocusCallback = otherHandlers.onFocus;
      onFocusCallback == null || onFocusCallback(event);
      handlePause();
    };
    const createMouseEnter = (otherHandlers) => (event) => {
      const onMouseEnterCallback = otherHandlers.onMouseEnter;
      onMouseEnterCallback == null || onMouseEnterCallback(event);
      handlePause();
    };
    const createMouseLeave = (otherHandlers) => (event) => {
      const onMouseLeaveCallback = otherHandlers.onMouseLeave;
      onMouseLeaveCallback == null || onMouseLeaveCallback(event);
      handleResume();
    };
    React__namespace.useEffect(() => {
      if (!disableWindowBlurListener && open) {
        window.addEventListener("focus", handleResume);
        window.addEventListener("blur", handlePause);
        return () => {
          window.removeEventListener("focus", handleResume);
          window.removeEventListener("blur", handlePause);
        };
      }
      return void 0;
    }, [disableWindowBlurListener, handleResume, open]);
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));
      return _extends({
        // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
        // See https://github.com/mui/material-ui/issues/29080
        role: "presentation"
      }, externalProps, externalEventHandlers, {
        onBlur: createHandleBlur(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onMouseEnter: createMouseEnter(externalEventHandlers),
        onMouseLeave: createMouseLeave(externalEventHandlers)
      });
    };
    return {
      getRootProps,
      onClickAway: handleClickAway
    };
  }
  "use client";
  "use client";
  const _excluded$B = ["autoHideDuration", "children", "disableWindowBlurListener", "exited", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "slotProps", "slots"];
  const useUtilityClasses$t = () => {
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));
  };
  const Snackbar = /* @__PURE__ */ React__namespace.forwardRef(function Snackbar2(props, forwardedRef) {
    const {
      autoHideDuration = null,
      children,
      disableWindowBlurListener = false,
      exited = true,
      onClose,
      open,
      resumeHideDuration,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$B);
    const classes = useUtilityClasses$t();
    const {
      getRootProps,
      onClickAway
    } = useSnackbar(_extends({}, props, {
      autoHideDuration,
      disableWindowBlurListener,
      onClose,
      open,
      resumeHideDuration
    }));
    const ownerState = props;
    const Root = slots.root || "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const clickAwayListenerProps = useSlotProps({
      elementType: ClickAwayListener,
      externalSlotProps: slotProps.clickAwayListener,
      additionalProps: {
        onClickAway
      },
      ownerState
    });
    delete clickAwayListenerProps.ownerState;
    if (!open && exited) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ClickAwayListener, _extends({}, clickAwayListenerProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
        children
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Snackbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The number of milliseconds to wait before automatically calling the
     * `onClose` function. `onClose` should then set the state of the `open`
     * prop to hide the Snackbar. This behavior is disabled by default with
     * the `null` value.
     * @default null
     */
    autoHideDuration: PropTypes.number,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
     * @default false
     */
    disableWindowBlurListener: PropTypes.bool,
    /**
     * The prop used to handle exited transition and unmount the component.
     * @default true
     */
    exited: PropTypes.bool,
    /**
     * Callback fired when the component requests to be closed.
     * Typically `onClose` is used to set state in the parent component,
     * which is used to control the `Snackbar` `open` prop.
     * The `reason` parameter can optionally be used to control the response to `onClose`,
     * for example ignoring `clickaway`.
     *
     * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
     * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool,
    /**
     * The number of milliseconds to wait before dismissing after user interaction.
     * If `autoHideDuration` prop isn't specified, it does nothing.
     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
     * we default to `autoHideDuration / 2` ms.
     */
    resumeHideDuration: PropTypes.number,
    /**
     * The props used for each slot inside the Snackbar.
     * @default {}
     */
    slotProps: PropTypes.shape({
      clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        children: PropTypes.element.isRequired,
        disableReactTree: PropTypes.bool,
        mouseEvent: PropTypes.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
        onClickAway: PropTypes.func,
        touchEvent: PropTypes.oneOf(["onTouchEnd", "onTouchStart", false])
      })]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Snackbar.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  "use client";
  function useSwitch(props) {
    const {
      checked: checkedProp,
      defaultChecked,
      disabled,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly,
      required
    } = props;
    const [checked, setCheckedState] = useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "Switch",
      state: "checked"
    });
    const createHandleInputChange = (otherProps) => (event) => {
      var _otherProps$onChange;
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      setCheckedState(event.target.checked);
      onChange == null || onChange(event);
      (_otherProps$onChange = otherProps.onChange) == null || _otherProps$onChange.call(otherProps, event);
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React__namespace.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const inputRef = React__namespace.useRef(null);
    const createHandleFocus = (otherProps) => (event) => {
      var _otherProps$onFocus;
      if (!inputRef.current) {
        inputRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        onFocusVisible == null || onFocusVisible(event);
      }
      onFocus == null || onFocus(event);
      (_otherProps$onFocus = otherProps.onFocus) == null || _otherProps$onFocus.call(otherProps, event);
    };
    const createHandleBlur = (otherProps) => (event) => {
      var _otherProps$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      onBlur == null || onBlur(event);
      (_otherProps$onBlur = otherProps.onBlur) == null || _otherProps$onBlur.call(otherProps, event);
    };
    const handleInputRef = useForkRef(focusVisibleRef, inputRef);
    const getInputProps = (otherProps = {}) => _extends({
      checked: checkedProp,
      defaultChecked,
      disabled,
      readOnly,
      ref: handleInputRef,
      required,
      type: "checkbox"
    }, otherProps, {
      onChange: createHandleInputChange(otherProps),
      onFocus: createHandleFocus(otherProps),
      onBlur: createHandleBlur(otherProps)
    });
    return {
      checked,
      disabled: Boolean(disabled),
      focusVisible,
      getInputProps,
      inputRef: handleInputRef,
      readOnly: Boolean(readOnly)
    };
  }
  "use client";
  function getSwitchUtilityClass(slot) {
    return generateUtilityClass("MuiSwitch", slot);
  }
  const switchClasses = generateUtilityClasses("MuiSwitch", ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);
  "use client";
  const _excluded$A = ["checked", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "slotProps", "slots"];
  const useUtilityClasses$s = (ownerState) => {
    const {
      checked,
      disabled,
      focusVisible,
      readOnly
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
      thumb: ["thumb"],
      input: ["input"],
      track: ["track"]
    };
    return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));
  };
  const Switch = /* @__PURE__ */ React__namespace.forwardRef(function Switch2(props, forwardedRef) {
    var _slots$root, _slots$thumb, _slots$input, _slots$track;
    const {
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$A);
    const {
      getInputProps,
      checked,
      disabled,
      focusVisible,
      readOnly
    } = useSwitch(props);
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      focusVisible,
      readOnly
    });
    const classes = useUtilityClasses$s(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
    const thumbProps = useSlotProps({
      elementType: Thumb,
      externalSlotProps: slotProps.thumb,
      ownerState,
      className: classes.thumb
    });
    const Input2 = (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: Input2,
      getSlotProps: getInputProps,
      externalSlotProps: slotProps.input,
      ownerState,
      className: classes.input
    });
    const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : "span";
    const trackProps = useSlotProps({
      elementType: Track,
      externalSlotProps: slotProps.track,
      ownerState,
      className: classes.track
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Track, _extends({}, trackProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(Thumb, _extends({}, thumbProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends({}, inputProps))]
    }));
  });
  process.env.NODE_ENV !== "production" ? Switch.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * Class name applied to the root element.
     */
    className: PropTypes.string,
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * @ignore
     */
    onFocusVisible: PropTypes.func,
    /**
     * If `true`, the component is read only.
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: PropTypes.bool,
    /**
     * The props used for each slot inside the Switch.
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Switch.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType,
      thumb: PropTypes.elementType,
      track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])
    })
  } : void 0;
  "use client";
  "use client";
  const _excluded$z = ["count", "getItemAriaLabel", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "direction", "ownerState", "slotProps", "slots"];
  var _span$3, _span2, _span3, _span4;
  function LastPageIconDefault() {
    return _span$3 || (_span$3 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "⇾|"
    }));
  }
  function FirstPageIconDefault() {
    return _span2 || (_span2 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "|⇽"
    }));
  }
  function NextPageIconDefault() {
    return _span3 || (_span3 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "⇾"
    }));
  }
  function BackPageIconDefault() {
    return _span4 || (_span4 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "⇽"
    }));
  }
  function defaultGetAriaLabel$1(type) {
    return `Go to ${type} page`;
  }
  const TablePaginationActions = /* @__PURE__ */ React__namespace.forwardRef(function TablePaginationActions2(props, forwardedRef) {
    var _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;
    const {
      count,
      getItemAriaLabel = defaultGetAriaLabel$1,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton = false,
      showLastButton = false,
      direction,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$z);
    const ownerState = props;
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState
    });
    const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : "button";
    const firstButtonProps = useSlotProps({
      elementType: FirstButton,
      externalSlotProps: slotProps.firstButton,
      additionalProps: {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page)
      },
      ownerState
    });
    const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : "button";
    const lastButtonProps = useSlotProps({
      elementType: LastButton,
      externalSlotProps: slotProps.lastButton,
      additionalProps: {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page)
      },
      ownerState
    });
    const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : "button";
    const nextButtonProps = useSlotProps({
      elementType: NextButton,
      externalSlotProps: slotProps.nextButton,
      additionalProps: {
        onClick: handleNextButtonClick,
        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      },
      ownerState
    });
    const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : "button";
    const backButtonProps = useSlotProps({
      elementType: BackButton,
      externalSlotProps: slotProps.backButton,
      additionalProps: {
        onClick: handleBackButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      },
      ownerState
    });
    const LastPageIcon = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;
    const FirstPageIcon = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;
    const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;
    const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
      children: [showFirstButton && /* @__PURE__ */ jsxRuntimeExports.jsx(FirstButton, _extends({}, firstButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(LastPageIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(FirstPageIcon, {})
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, _extends({}, backButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(NextPageIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(BackPageIcon, {})
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(NextButton, _extends({}, nextButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(BackPageIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(NextPageIcon, {})
      })), showLastButton && /* @__PURE__ */ jsxRuntimeExports.jsx(LastButton, _extends({}, lastButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(FirstPageIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(LastPageIcon, {})
      }))]
    }));
  });
  function getTablePaginationUtilityClass(slot) {
    return generateUtilityClass("MuiTablePagination", slot);
  }
  const tablePaginationClasses = generateUtilityClasses("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  "use client";
  const _excluded$y = ["colSpan", "count", "getItemAriaLabel", "labelDisplayedRows", "labelId", "labelRowsPerPage", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "selectId", "slotProps", "slots"];
  function defaultLabelDisplayedRows({
    from: from2,
    to,
    count
  }) {
    return `${from2}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  function defaultGetAriaLabel(type) {
    return `Go to ${type} page`;
  }
  const useUtilityClasses$r = () => {
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return composeClasses(slots, useClassNamesOverride(getTablePaginationUtilityClass));
  };
  const TablePagination = /* @__PURE__ */ React__namespace.forwardRef(function TablePagination2(props, forwardedRef) {
    var _slots$root, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;
    const {
      colSpan: colSpanProp,
      count,
      getItemAriaLabel = defaultGetAriaLabel,
      labelDisplayedRows = defaultLabelDisplayedRows,
      labelId: labelIdProp,
      labelRowsPerPage = "Rows per page:",
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      selectId: selectIdProp,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$y);
    const ownerState = props;
    const classes = useUtilityClasses$r();
    let colSpan;
    const Root = (_slots$root = slots.root) != null ? _slots$root : "td";
    if (Root === "td" || !isHostComponent(Root)) {
      colSpan = colSpanProp || 1e3;
    }
    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };
    const selectId = useId(selectIdProp);
    const labelId = useId(labelIdProp);
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        colSpan,
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const Select2 = (_slots$select = slots.select) != null ? _slots$select : "select";
    const selectProps = useSlotProps({
      elementType: Select2,
      externalSlotProps: slotProps.select,
      additionalProps: {
        value: rowsPerPage,
        id: selectId,
        onChange: (event) => onRowsPerPageChange && onRowsPerPageChange(event),
        "aria-label": rowsPerPage.toString(),
        "aria-labelledby": [labelId, selectId].filter(Boolean).join(" ") || void 0
      },
      ownerState,
      className: classes.select
    });
    const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : TablePaginationActions;
    const actionsProps = useSlotProps({
      elementType: Actions,
      externalSlotProps: slotProps.actions,
      additionalProps: {
        page,
        rowsPerPage,
        count,
        onPageChange,
        getItemAriaLabel
      },
      ownerState,
      className: classes.actions
    });
    const MenuItem2 = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : "option";
    const menuItemProps = useSlotProps({
      elementType: MenuItem2,
      externalSlotProps: slotProps.menuItem,
      additionalProps: {
        value: void 0
      },
      ownerState,
      className: classes.menuItem
    });
    const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : "p";
    const selectLabelProps = useSlotProps({
      elementType: SelectLabel,
      externalSlotProps: slotProps.selectLabel,
      additionalProps: {
        id: labelId
      },
      ownerState,
      className: classes.selectLabel
    });
    const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : "p";
    const displayedRowsProps = useSlotProps({
      elementType: DisplayedRows,
      externalSlotProps: slotProps.displayedRows,
      ownerState,
      className: classes.displayedRows
    });
    const Toolbar2 = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : "div";
    const toolbarProps = useSlotProps({
      elementType: Toolbar2,
      externalSlotProps: slotProps.toolbar,
      ownerState,
      className: classes.toolbar
    });
    const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : "div";
    const spacerProps = useSlotProps({
      elementType: Spacer,
      externalSlotProps: slotProps.spacer,
      ownerState,
      className: classes.spacer
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Toolbar2, _extends({}, toolbarProps, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Spacer, _extends({}, spacerProps)), rowsPerPageOptions.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(SelectLabel, _extends({}, selectLabelProps, {
          children: labelRowsPerPage
        })), rowsPerPageOptions.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(Select2, _extends({}, selectProps, {
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ React.createElement(MenuItem2, _extends({}, menuItemProps, {
            key: typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: typeof rowsPerPageOption !== "number" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(DisplayedRows, _extends({}, displayedRowsProps, {
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(Actions, _extends({}, actionsProps))]
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? TablePagination.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    colSpan: PropTypes.number,
    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: PropTypes.number.isRequired,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: PropTypes.func,
    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {
     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: PropTypes.func,
    /**
     * Id of the label element within the pagination.
     */
    labelId: PropTypes.string,
    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: PropTypes.node,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: PropTypes.func.isRequired,
    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: PropTypes.func,
    /**
     * The zero-based index of the current page.
     */
    page: chainPropTypes(integerPropType.isRequired, (props) => {
      const {
        count,
        page,
        rowsPerPage
      } = props;
      if (count === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: integerPropType.isRequired,
    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      label: PropTypes.string.isRequired,
      value: PropTypes.number.isRequired
    })]).isRequired),
    /**
     * Id of the select element within the pagination.
     */
    selectId: PropTypes.string,
    /**
     * The props used for each slot inside the TablePagination.
     * @default {}
     */
    slotProps: PropTypes.shape({
      actions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      displayedRows: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      menuItem: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      select: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      selectLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      spacer: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      toolbar: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the TablePagination.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      actions: PropTypes.elementType,
      displayedRows: PropTypes.elementType,
      menuItem: PropTypes.elementType,
      root: PropTypes.elementType,
      select: PropTypes.elementType,
      selectLabel: PropTypes.elementType,
      spacer: PropTypes.elementType,
      toolbar: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function getTabPanelUtilityClass(slot) {
    return generateUtilityClass("MuiTabPanel", slot);
  }
  const tabPanelClasses = generateUtilityClasses("MuiTabPanel", ["root", "hidden"]);
  function getTabsUtilityClass(slot) {
    return generateUtilityClass("MuiTabs", slot);
  }
  const tabsClasses = generateUtilityClasses("MuiTabs", ["root", "horizontal", "vertical"]);
  "use client";
  function useTabs(parameters) {
    const {
      value: valueProp,
      defaultValue,
      onChange,
      orientation = "horizontal",
      direction = "ltr",
      selectionFollowsFocus = false
    } = parameters;
    const [value, setValue] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "Tabs",
      state: "value"
    });
    const onSelected = React__namespace.useCallback((event, newValue) => {
      setValue(newValue);
      onChange == null || onChange(event, newValue);
    }, [onChange, setValue]);
    const {
      subitems: tabPanels,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const tabIdLookup = React__namespace.useRef(() => void 0);
    const getTabPanelId = React__namespace.useCallback((tabValue) => {
      var _tabPanels$get;
      return (_tabPanels$get = tabPanels.get(tabValue)) == null ? void 0 : _tabPanels$get.id;
    }, [tabPanels]);
    const getTabId = React__namespace.useCallback((tabPanelId) => {
      return tabIdLookup.current(tabPanelId);
    }, []);
    const registerTabIdLookup = React__namespace.useCallback((lookupFunction) => {
      tabIdLookup.current = lookupFunction;
    }, []);
    return {
      contextValue: _extends({
        direction,
        getTabId,
        getTabPanelId,
        onSelected,
        orientation,
        registerTabIdLookup,
        selectionFollowsFocus,
        value
      }, compoundComponentContextValue)
    };
  }
  const TabsContext = /* @__PURE__ */ React__namespace.createContext(null);
  if (process.env.NODE_ENV !== "production") {
    TabsContext.displayName = "TabsContext";
  }
  function useTabsContext() {
    const context = React__namespace.useContext(TabsContext);
    if (context == null) {
      throw new Error("No TabsContext provided");
    }
    return context;
  }
  "use client";
  function TabsProvider(props) {
    const {
      value: valueProp,
      children
    } = props;
    const {
      direction,
      getItemIndex,
      onSelected,
      orientation,
      registerItem,
      registerTabIdLookup,
      selectionFollowsFocus,
      totalSubitemCount,
      value,
      getTabId,
      getTabPanelId
    } = valueProp;
    const compoundComponentContextValue = React__namespace.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    const tabsContextValue = React__namespace.useMemo(() => ({
      direction,
      getTabId,
      getTabPanelId,
      onSelected,
      orientation,
      registerTabIdLookup,
      selectionFollowsFocus,
      value
    }), [direction, getTabId, getTabPanelId, onSelected, orientation, registerTabIdLookup, selectionFollowsFocus, value]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TabsContext.Provider, {
        value: tabsContextValue,
        children
      })
    });
  }
  "use client";
  "use client";
  const _excluded$x = ["children", "value", "defaultValue", "orientation", "direction", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
  const useUtilityClasses$q = (ownerState) => {
    const {
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation]
    };
    return composeClasses(slots, useClassNamesOverride(getTabsUtilityClass));
  };
  const Tabs = /* @__PURE__ */ React__namespace.forwardRef(function Tabs2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      orientation = "horizontal",
      direction = "ltr",
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$x);
    const ownerState = _extends({}, props, {
      orientation,
      direction
    });
    const {
      contextValue
    } = useTabs(ownerState);
    const classes = useUtilityClasses$q(ownerState);
    const TabsRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
    const tabsRootProps = useSlotProps({
      elementType: TabsRoot,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabsRoot, _extends({}, tabsRootProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TabsProvider, {
        value: contextValue,
        children
      })
    }));
  });
  process.env.NODE_ENV !== "production" ? Tabs.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The direction of the text.
     * @default 'ltr'
     */
    direction: PropTypes.oneOf(["ltr", "rtl"]),
    /**
     * Callback invoked when new value is being set.
     */
    onChange: PropTypes.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: PropTypes.oneOf(["horizontal", "vertical"]),
    /**
     * If `true` the selected tab changes on focus. Otherwise it only
     * changes on activation.
     */
    selectionFollowsFocus: PropTypes.bool,
    /**
     * The props used for each slot inside the Tabs.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Tabs.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The value of the currently selected `Tab`.
     * If you don't want any selected `Tab`, you can set this prop to `null`.
     */
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  } : void 0;
  "use client";
  "use client";
  function tabPanelValueGenerator(otherTabPanelValues) {
    return otherTabPanelValues.size;
  }
  function useTabPanel(parameters) {
    const {
      value: valueParam,
      id: idParam,
      rootRef: externalRef
    } = parameters;
    const context = useTabsContext();
    if (context === null) {
      throw new Error("No TabContext provided");
    }
    const {
      value: selectedTabValue,
      getTabId
    } = context;
    const id = useId(idParam);
    const ref = React__namespace.useRef(null);
    const handleRef = useForkRef(ref, externalRef);
    const metadata = React__namespace.useMemo(() => ({
      id,
      ref
    }), [id]);
    const {
      id: value
    } = useCompoundItem(valueParam != null ? valueParam : tabPanelValueGenerator, metadata);
    const hidden = value !== selectedTabValue;
    const correspondingTabId = value !== void 0 ? getTabId(value) : void 0;
    const getRootProps = (externalProps = {}) => {
      return _extends({
        "aria-labelledby": correspondingTabId != null ? correspondingTabId : void 0,
        hidden,
        id: id != null ? id : void 0
      }, externalProps, {
        ref: handleRef
      });
    };
    return {
      hidden,
      getRootProps,
      rootRef: handleRef
    };
  }
  "use client";
  const _excluded$w = ["children", "value", "slotProps", "slots"];
  const useUtilityClasses$p = (ownerState) => {
    const {
      hidden
    } = ownerState;
    const slots = {
      root: ["root", hidden && "hidden"]
    };
    return composeClasses(slots, useClassNamesOverride(getTabPanelUtilityClass));
  };
  const TabPanel = /* @__PURE__ */ React__namespace.forwardRef(function TabPanel2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$w);
    const {
      hidden,
      getRootProps
    } = useTabPanel(props);
    const ownerState = _extends({}, props, {
      hidden
    });
    const classes = useUtilityClasses$p(ownerState);
    const TabPanelRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
    const tabPanelRootProps = useSlotProps({
      elementType: TabPanelRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tabpanel",
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabPanelRoot, _extends({}, tabPanelRootProps, {
      children: !hidden && children
    }));
  });
  process.env.NODE_ENV !== "production" ? TabPanel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The props used for each slot inside the TabPanel.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the TabPanel.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
     * If not provided, it will fall back to the index of the panel.
     * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.
     */
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  } : void 0;
  "use client";
  function getTabsListUtilityClass(slot) {
    return generateUtilityClass("MuiTabsList", slot);
  }
  const tabsListClasses = generateUtilityClasses("MuiTabsList", ["root", "horizontal", "vertical"]);
  const TabsListActionTypes = {
    valueChange: "valueChange"
  };
  function tabsListReducer(state, action) {
    if (action.type === TabsListActionTypes.valueChange) {
      return _extends({}, state, {
        highlightedValue: action.value
      });
    }
    const newState = listReducer(state, action);
    const {
      context: {
        selectionFollowsFocus
      }
    } = action;
    if (action.type === ListActionTypes.itemsChange) {
      if (newState.selectedValues.length > 0) {
        return _extends({}, newState, {
          highlightedValue: newState.selectedValues[0]
        });
      }
      moveHighlight(null, "reset", action.context);
    }
    if (selectionFollowsFocus && newState.highlightedValue != null) {
      return _extends({}, newState, {
        selectedValues: [newState.highlightedValue]
      });
    }
    return newState;
  }
  "use client";
  function useTabsList(parameters) {
    var _selectedValues$;
    const {
      rootRef: externalRef
    } = parameters;
    const {
      direction = "ltr",
      onSelected,
      orientation = "horizontal",
      value,
      registerTabIdLookup,
      selectionFollowsFocus
    } = useTabsContext();
    const {
      subitems,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const tabIdLookup = React__namespace.useCallback((tabValue) => {
      var _subitems$get;
      return (_subitems$get = subitems.get(tabValue)) == null ? void 0 : _subitems$get.id;
    }, [subitems]);
    registerTabIdLookup(tabIdLookup);
    const subitemKeys = React__namespace.useMemo(() => Array.from(subitems.keys()), [subitems]);
    const getTabElement = React__namespace.useCallback((tabValue) => {
      var _subitems$get$ref$cur, _subitems$get2;
      if (tabValue == null) {
        return null;
      }
      return (_subitems$get$ref$cur = (_subitems$get2 = subitems.get(tabValue)) == null ? void 0 : _subitems$get2.ref.current) != null ? _subitems$get$ref$cur : null;
    }, [subitems]);
    const isRtl = direction === "rtl";
    let listOrientation;
    if (orientation === "vertical") {
      listOrientation = "vertical";
    } else {
      listOrientation = isRtl ? "horizontal-rtl" : "horizontal-ltr";
    }
    const handleChange = React__namespace.useCallback((event, newValue) => {
      var _newValue$;
      onSelected(event, (_newValue$ = newValue[0]) != null ? _newValue$ : null);
    }, [onSelected]);
    const controlledProps = React__namespace.useMemo(() => {
      if (value === void 0) {
        return {};
      }
      return value != null ? {
        selectedValues: [value]
      } : {
        selectedValues: []
      };
    }, [value]);
    const isItemDisabled = React__namespace.useCallback((item) => {
      var _subitems$get$disable, _subitems$get3;
      return (_subitems$get$disable = (_subitems$get3 = subitems.get(item)) == null ? void 0 : _subitems$get3.disabled) != null ? _subitems$get$disable : false;
    }, [subitems]);
    const {
      contextValue: listContextValue,
      dispatch,
      getRootProps: getListboxRootProps,
      state: {
        highlightedValue,
        selectedValues
      },
      rootRef: mergedRootRef
    } = useList({
      controlledProps,
      disabledItemsFocusable: !selectionFollowsFocus,
      focusManagement: "DOM",
      getItemDomElement: getTabElement,
      isItemDisabled,
      items: subitemKeys,
      rootRef: externalRef,
      onChange: handleChange,
      orientation: listOrientation,
      reducerActionContext: React__namespace.useMemo(() => ({
        selectionFollowsFocus: selectionFollowsFocus || false
      }), [selectionFollowsFocus]),
      selectionMode: "single",
      stateReducer: tabsListReducer
    });
    React__namespace.useEffect(() => {
      if (value === void 0) {
        return;
      }
      if (value != null) {
        dispatch({
          type: TabsListActionTypes.valueChange,
          value
        });
      }
    }, [dispatch, value]);
    const getRootProps = (externalProps = {}) => {
      return _extends({}, externalProps, getListboxRootProps(externalProps), {
        "aria-orientation": orientation === "vertical" ? "vertical" : void 0,
        role: "tablist"
      });
    };
    const contextValue = React__namespace.useMemo(() => _extends({}, compoundComponentContextValue, listContextValue), [compoundComponentContextValue, listContextValue]);
    return {
      contextValue,
      dispatch,
      getRootProps,
      highlightedValue,
      isRtl,
      orientation,
      rootRef: mergedRootRef,
      selectedValue: (_selectedValues$ = selectedValues[0]) != null ? _selectedValues$ : null
    };
  }
  "use client";
  function TabsListProvider(props) {
    const {
      value,
      children
    } = props;
    const {
      dispatch,
      getItemIndex,
      getItemState,
      registerItem,
      totalSubitemCount
    } = value;
    const listContextValue = React__namespace.useMemo(() => ({
      dispatch,
      getItemState,
      getItemIndex
    }), [dispatch, getItemIndex, getItemState]);
    const compoundComponentContextValue = React__namespace.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext$1.Provider, {
        value: listContextValue,
        children
      })
    });
  }
  "use client";
  "use client";
  const _excluded$v = ["children", "slotProps", "slots"];
  const useUtilityClasses$o = (ownerState) => {
    const {
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation]
    };
    return composeClasses(slots, useClassNamesOverride(getTabsListUtilityClass));
  };
  const TabsList = /* @__PURE__ */ React__namespace.forwardRef(function TabsList2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$v);
    const {
      isRtl,
      orientation,
      getRootProps,
      contextValue
    } = useTabsList({
      rootRef: forwardedRef
    });
    const ownerState = _extends({}, props, {
      isRtl,
      orientation
    });
    const classes = useUtilityClasses$o(ownerState);
    const TabsListRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
    const tabsListRootProps = useSlotProps({
      elementType: TabsListRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabsListProvider, {
      value: contextValue,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TabsListRoot, _extends({}, tabsListRootProps, {
        children
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? TabsList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The props used for each slot inside the TabsList.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the TabsList.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    })
  } : void 0;
  "use client";
  function getTabUtilityClass(slot) {
    return generateUtilityClass("MuiTab", slot);
  }
  const tabClasses = generateUtilityClasses("MuiTab", ["root", "selected", "disabled"]);
  "use client";
  function tabValueGenerator(otherTabValues) {
    return otherTabValues.size;
  }
  function useTab(parameters) {
    const {
      value: valueParam,
      rootRef: externalRef,
      disabled = false,
      id: idParam
    } = parameters;
    const tabRef = React__namespace.useRef(null);
    const id = useId(idParam);
    const {
      value: selectedValue,
      selectionFollowsFocus,
      getTabPanelId
    } = useTabsContext();
    const tabMetadata = React__namespace.useMemo(() => ({
      disabled,
      ref: tabRef,
      id
    }), [disabled, tabRef, id]);
    const {
      id: value,
      index: index2,
      totalItemCount: totalTabsCount
    } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);
    const {
      getRootProps: getTabProps,
      highlighted,
      selected
    } = useListItem({
      item: value
    });
    const {
      getRootProps: getButtonProps,
      rootRef: buttonRefHandler,
      active,
      focusVisible,
      setFocusVisible
    } = useButton({
      disabled,
      focusableWhenDisabled: !selectionFollowsFocus,
      type: "button"
    });
    const handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);
    const tabPanelId = value !== void 0 ? getTabPanelId(value) : void 0;
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);
      return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {
        role: "tab",
        "aria-controls": tabPanelId,
        "aria-selected": selected,
        id,
        ref: handleRef
      });
    };
    return {
      getRootProps,
      active,
      focusVisible,
      highlighted,
      index: index2,
      rootRef: handleRef,
      // the `selected` state isn't set on the server (it relies on effects to be calculated),
      // so we fall back to checking the `value` prop with the selectedValue from the TabsContext
      selected: selected || value === selectedValue,
      setFocusVisible,
      totalTabsCount
    };
  }
  "use client";
  "use client";
  const _excluded$u = ["action", "children", "disabled", "onChange", "onClick", "onFocus", "slotProps", "slots", "value"];
  const useUtilityClasses$n = (ownerState) => {
    const {
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", disabled && "disabled"]
    };
    return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));
  };
  const Tab = /* @__PURE__ */ React__namespace.forwardRef(function Tab2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      disabled = false,
      slotProps = {},
      slots = {},
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$u);
    const tabRef = React__namespace.useRef();
    const handleRef = useForkRef(tabRef, forwardedRef);
    const {
      active,
      highlighted,
      selected,
      getRootProps
    } = useTab(_extends({}, props, {
      rootRef: handleRef,
      value
    }));
    const ownerState = _extends({}, props, {
      active,
      disabled,
      highlighted,
      selected
    });
    const classes = useUtilityClasses$n(ownerState);
    const TabRoot = (_slots$root = slots.root) != null ? _slots$root : "button";
    const tabRootProps = useSlotProps({
      elementType: TabRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabRoot, _extends({}, tabRootProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? Tab.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions. It currently only supports `focusVisible()` action.
     */
    action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.shape({
        focusVisible: PropTypes.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * Callback invoked when new value is being set.
     */
    onChange: PropTypes.func,
    /**
     * The props used for each slot inside the Tab.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Tab.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * You can provide your own value. Otherwise, it falls back to the child position index.
     */
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  } : void 0;
  "use client";
  "use client";
  const _excluded$t = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue(value) {
    return parseInt(value, 10) || 0;
  }
  const styles$2 = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isEmpty$1(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
  }
  const TextareaAutosize = /* @__PURE__ */ React__namespace.forwardRef(function TextareaAutosize2(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style2,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$t);
    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const inputRef = React__namespace.useRef(null);
    const handleRef = useForkRef(forwardedRef, inputRef);
    const shadowRef = React__namespace.useRef(null);
    const renders = React__namespace.useRef(0);
    const [state, setState] = React__namespace.useState({
      outerHeightStyle: 0
    });
    const getUpdatedState = React__namespace.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0
        };
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing2 = computedStyle.boxSizing;
      const padding2 = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
      const border2 = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflow2 = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflow: overflow2
      };
    }, [maxRows, minRows, props.placeholder]);
    const updateState = (prevState, newState) => {
      const {
        outerHeightStyle,
        overflow: overflow2
      } = newState;
      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow2)) {
        renders.current += 1;
        return {
          overflow: overflow2,
          outerHeightStyle
        };
      }
      if (process.env.NODE_ENV !== "production") {
        if (renders.current === 20) {
          console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
        }
      }
      return prevState;
    };
    const syncHeight = React__namespace.useCallback(() => {
      const newState = getUpdatedState();
      if (isEmpty$1(newState)) {
        return;
      }
      setState((prevState) => updateState(prevState, newState));
    }, [getUpdatedState]);
    useEnhancedEffect(() => {
      const syncHeightWithFlushSync = () => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }
        ReactDOM__namespace.flushSync(() => {
          setState((prevState) => updateState(prevState, newState));
        });
      };
      const handleResize = () => {
        renders.current = 0;
        syncHeightWithFlushSync();
      };
      let rAF;
      const rAFHandleResize = () => {
        cancelAnimationFrame(rAF);
        rAF = requestAnimationFrame(() => {
          handleResize();
        });
      };
      const debounceHandleResize = debounce$1(handleResize);
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      containerWindow.addEventListener("resize", debounceHandleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(process.env.NODE_ENV === "test" ? rAFHandleResize : handleResize);
        resizeObserver.observe(input);
      }
      return () => {
        debounceHandleResize.clear();
        cancelAnimationFrame(rAF);
        containerWindow.removeEventListener("resize", debounceHandleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [getUpdatedState]);
    useEnhancedEffect(() => {
      syncHeight();
    });
    React__namespace.useEffect(() => {
      renders.current = 0;
    }, [value]);
    const handleChange = (event) => {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: _extends({
          height: state.outerHeightStyle,
          // Need a large enough difference to allow scrolling.
          // This prevents infinite rendering loop.
          overflow: state.overflow ? "hidden" : void 0
        }, style2)
      }, other)), /* @__PURE__ */ jsxRuntimeExports.jsx("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles$2.shadow, style2, {
          paddingTop: 0,
          paddingBottom: 0
        })
      })]
    });
  });
  process.env.NODE_ENV !== "production" ? TextareaAutosize.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * @ignore
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    placeholder: PropTypes.string,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * @ignore
     */
    value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])
  } : void 0;
  "use client";
  "use client";
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config2 = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify: stringify2,
      trim: trim2 = false
    } = config2;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim2 ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = !input ? options : options.filter((option) => {
        let candidate = (stringify2 || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }
    return -1;
  }
  const defaultFilterOptions = createFilterOptions();
  const pageSize = 5;
  const defaultIsActiveElementInListbox = (listboxRef) => {
    var _listboxRef$current$p;
    return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
  };
  function useAutocomplete(props) {
    const {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_classNamePrefix = "Mui",
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled: disabledProp,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionKey,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      isOptionEqualToValue = (option, value2) => option === value2,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = useId(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (process.env.NODE_ENV !== "production") {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React__namespace.useRef(false);
    const firstFocus = React__namespace.useRef(true);
    const inputRef = React__namespace.useRef(null);
    const listboxRef = React__namespace.useRef(null);
    const [anchorEl, setAnchorEl] = React__namespace.useState(null);
    const [focusedTag, setFocusedTag] = React__namespace.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React__namespace.useRef(defaultHighlighted);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = useControlled({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React__namespace.useState(false);
    const resetInputValue = React__namespace.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React__namespace.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(
      options.filter((option) => {
        if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
          return false;
        }
        return true;
      }),
      // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
        getOptionLabel
      }
    ) : [];
    const previousProps = usePreviousProps({
      filteredOptions,
      value,
      inputValue
    });
    React__namespace.useEffect(() => {
      const valueChange = value !== previousProps.value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (process.env.NODE_ENV !== "production") {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = useEventCallback((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React__namespace.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index2, direction) {
      if (!listboxRef.current || index2 < 0 || index2 >= filteredOptions.length) {
        return -1;
      }
      let nextFocus = index2;
      while (true) {
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && option.hasAttribute("tabindex") && !nextFocusDisabled) {
          return nextFocus;
        }
        if (direction === "next") {
          nextFocus = (nextFocus + 1) % filteredOptions.length;
        } else {
          nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;
        }
        if (nextFocus === index2) {
          return -1;
        }
      }
    }
    const setHighlightedIndex = useEventCallback(({
      event,
      index: index2,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index2;
      if (index2 === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index2}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index2 === -1 ? null : filteredOptions[index2], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
      if (prev2) {
        prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
        prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
      }
      let listboxNode = listboxRef.current;
      if (listboxRef.current.getAttribute("role") !== "listbox") {
        listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      }
      if (!listboxNode) {
        return;
      }
      if (index2 === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index2}"]`);
      if (!option) {
        return;
      }
      option.classList.add(`${unstable_classNamePrefix}-focused`);
      if (reason === "keyboard") {
        option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse" && reason !== "touch") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = useEventCallback(({
      event,
      diff,
      direction = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index2 = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index2 === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const checkHighlightedOptionExists = () => {
      const isSameValue = (value1, value2) => {
        const label1 = value1 ? getOptionLabel(value1) : "";
        const label2 = value2 ? getOptionLabel(value2) : "";
        return label1 === label2;
      };
      if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
        const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
        if (previousHighlightedOption) {
          const previousHighlightedOptionExists = filteredOptions.some((option) => {
            return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
          });
          if (previousHighlightedOptionExists) {
            return true;
          }
        }
      }
      return false;
    };
    const syncHighlightedIndex = React__namespace.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      if (checkHighlightedOptionExists()) {
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      // Only sync the highlighted index when the option switch between empty and not
      filteredOptions.length,
      // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = useEventCallback((node2) => {
      setRef(listboxRef, node2);
      if (!node2) {
        return;
      }
      syncHighlightedIndex();
    });
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React__namespace.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose) {
        onClose(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (multiple) {
        if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch = React__namespace.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (process.env.NODE_ENV !== "production") {
          const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index2, direction) {
      if (index2 === -1) {
        return -1;
      }
      let nextFocus = index2;
      while (true) {
        if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }
      if (inputValue === "") {
        handleClose(event, "toggleInput");
      }
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown2 = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index2 = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index2, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index2]
              });
            }
            break;
          case "Delete":
            if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
              const index2 = focusedTag;
              const newValue = value.slice();
              newValue.splice(index2, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index2]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur2 = (event) => {
      if (unstable_isActiveElementInListbox(listboxRef)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseMove = (event) => {
      const index2 = Number(event.currentTarget.getAttribute("data-option-index"));
      if (highlightedIndexRef.current !== index2) {
        setHighlightedIndex({
          event,
          index: index2,
          reason: "mouse"
        });
      }
    };
    const handleOptionTouchStart = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "touch"
      });
      isTouch.current = true;
    };
    const handleOptionClick = (event) => {
      const index2 = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index2], "selectOption");
      isTouch.current = false;
    };
    const handleTagDelete = (index2) => (event) => {
      const newValue = value.slice();
      newValue.splice(index2, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index2]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (!disabledProp && (inputValue === "" || !open)) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
      const indexBy = /* @__PURE__ */ new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index2) => {
        const group = groupBy(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (process.env.NODE_ENV !== "production") {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index2,
            index: index2,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur2();
    }
    return {
      getRootProps: (other = {}) => _extends({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown2(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur2,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        // if open then this is handled imperatively so don't let react override
        // only have an opinion about this when closed
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        // Disable browser's suggestion that might overlap with the popup.
        // Handle autocomplete but not autofill.
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox",
        disabled: disabledProp
      }),
      getClearProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index: index2
      }) => _extends({
        key: index2,
        "data-tag-index": index2,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index2)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index: index2,
        option
      }) => {
        var _getOptionKey;
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index2}`,
          onMouseMove: handleOptionMouseMove,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index2,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      expanded: popupOpen && anchorEl,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }
  "use client";
  "use client";
  /**
   * @mui/base v5.0.0-beta.28
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use client";
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }
  function hasClass(element, className) {
    if (element.classList)
      return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }
  function addClass(element, className) {
    if (element.classList)
      element.classList.add(className);
    else if (!hasClass(element, className))
      if (typeof element.className === "string")
        element.className = element.className + " " + className;
      else
        element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
  }
  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
  }
  function removeClass$1(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === "string") {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
    }
  }
  const config = {
    disabled: false
  };
  var timeoutsShape = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number,
    appear: PropTypes.number
  }).isRequired]) : null;
  var classNamesShape = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    enter: PropTypes.string,
    exit: PropTypes.string,
    active: PropTypes.string
  }), PropTypes.shape({
    enter: PropTypes.string,
    enterDone: PropTypes.string,
    enterActive: PropTypes.string,
    exit: PropTypes.string,
    exitDone: PropTypes.string,
    exitActive: PropTypes.string
  })]) : null;
  const TransitionGroupContext = React.createContext(null);
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;
      if (timeout != null && typeof timeout !== "number") {
        exit = timeout.exit;
        enter = timeout.enter;
        appear = timeout.appear !== void 0 ? timeout.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
            if (node2)
              forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(React.Component);
  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: PropTypes.shape({
      current: typeof Element === "undefined" ? PropTypes.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return PropTypes.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: PropTypes.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: PropTypes.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var _addClass = function addClass$1(node2, classes) {
    return node2 && classes && classes.split(" ").forEach(function(c) {
      return addClass(node2, c);
    });
  };
  var removeClass = function removeClass2(node2, classes) {
    return node2 && classes && classes.split(" ").forEach(function(c) {
      return removeClass$1(node2, c);
    });
  };
  var CSSTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(CSSTransition2, _React$Component);
    function CSSTransition2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };
      _this.onEnter = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
        _this.removeClasses(node2, "exit");
        _this.addClass(node2, appearing ? "appear" : "enter", "base");
        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };
      _this.onEntering = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
        var type = appearing ? "appear" : "enter";
        _this.addClass(node2, type, "active");
        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };
      _this.onEntered = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
        var type = appearing ? "appear" : "enter";
        _this.removeClasses(node2, type);
        _this.addClass(node2, type, "done");
        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };
      _this.onExit = function(maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument4[0];
        _this.removeClasses(node2, "appear");
        _this.removeClasses(node2, "enter");
        _this.addClass(node2, "exit", "base");
        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };
      _this.onExiting = function(maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument5[0];
        _this.addClass(node2, "exit", "active");
        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };
      _this.onExited = function(maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument6[0];
        _this.removeClasses(node2, "exit");
        _this.addClass(node2, "exit", "done");
        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };
      _this.resolveArguments = function(maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
      };
      _this.getClassNames = function(type) {
        var classNames = _this.props.classNames;
        var isStringClassNames = typeof classNames === "string";
        var prefix2 = isStringClassNames && classNames ? classNames + "-" : "";
        var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
        return {
          baseClassName,
          activeClassName,
          doneClassName
        };
      };
      return _this;
    }
    var _proto = CSSTransition2.prototype;
    _proto.addClass = function addClass2(node2, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];
      var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
      if (type === "appear" && phase === "done" && doneClassName) {
        className += " " + doneClassName;
      }
      if (phase === "active") {
        if (node2)
          forceReflow(node2);
      }
      if (className) {
        this.appliedClasses[type][phase] = className;
        _addClass(node2, className);
      }
    };
    _proto.removeClasses = function removeClasses(node2, type) {
      var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};
      if (baseClassName) {
        removeClass(node2, baseClassName);
      }
      if (activeClassName) {
        removeClass(node2, activeClassName);
      }
      if (doneClassName) {
        removeClass(node2, doneClassName);
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, _2 = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
      return /* @__PURE__ */ React.createElement(Transition, _extends({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };
    return CSSTransition2;
  }(React.Component);
  CSSTransition.defaultProps = {
    classNames: ""
  };
  CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends({}, Transition.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: PropTypes.func
  }) : {};
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && React.isValidElement(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children)
      React.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!React.isValidElement(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = React.cloneElement(child, {
          in: false
        });
      } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }
  var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component === null) {
        return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React.createElement(Component, props, children));
    };
    return TransitionGroup2;
  }(React.Component);
  TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: PropTypes.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: PropTypes.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: PropTypes.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: PropTypes.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: PropTypes.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: PropTypes.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var ReplaceTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(ReplaceTransition2, _React$Component);
    function ReplaceTransition2() {
      var _this;
      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
      _this.handleEnter = function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return _this.handleLifecycle("onEnter", 0, args);
      };
      _this.handleEntering = function() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return _this.handleLifecycle("onEntering", 0, args);
      };
      _this.handleEntered = function() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return _this.handleLifecycle("onEntered", 0, args);
      };
      _this.handleExit = function() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        return _this.handleLifecycle("onExit", 1, args);
      };
      _this.handleExiting = function() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        return _this.handleLifecycle("onExiting", 1, args);
      };
      _this.handleExited = function() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }
        return _this.handleLifecycle("onExited", 1, args);
      };
      return _this;
    }
    var _proto = ReplaceTransition2.prototype;
    _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
      var _child$props;
      var children = this.props.children;
      var child = React.Children.toArray(children)[idx];
      if (child.props[handler])
        (_child$props = child.props)[handler].apply(_child$props, originalArgs);
      if (this.props[handler]) {
        var maybeNode = child.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
        this.props[handler](maybeNode);
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
      var _React$Children$toArr = React.Children.toArray(children), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
      delete props.onEnter;
      delete props.onEntering;
      delete props.onEntered;
      delete props.onExit;
      delete props.onExiting;
      delete props.onExited;
      return /* @__PURE__ */ React.createElement(TransitionGroup, props, inProp ? React.cloneElement(first, {
        key: "first",
        onEnter: this.handleEnter,
        onEntering: this.handleEntering,
        onEntered: this.handleEntered
      }) : React.cloneElement(second, {
        key: "second",
        onEnter: this.handleExit,
        onEntering: this.handleExiting,
        onEntered: this.handleExited
      }));
    };
    return ReplaceTransition2;
  }(React.Component);
  ReplaceTransition.propTypes = process.env.NODE_ENV !== "production" ? {
    in: PropTypes.bool.isRequired,
    children: function children(props, propName) {
      if (React.Children.count(props[propName]) !== 2)
        return new Error('"' + propName + '" must be exactly two transition components.');
      return null;
    }
  } : {};
  var _leaveRenders, _enterRenders;
  function areChildrenDifferent(oldChildren, newChildren) {
    if (oldChildren === newChildren)
      return false;
    if (React.isValidElement(oldChildren) && React.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
      return false;
    }
    return true;
  }
  var modes = {
    out: "out-in",
    in: "in-out"
  };
  var callHook = function callHook2(element, name, cb) {
    return function() {
      var _element$props;
      element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
      cb();
    };
  };
  var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
    var current = _ref.current, changeState = _ref.changeState;
    return React.cloneElement(current, {
      in: false,
      onExited: callHook(current, "onExited", function() {
        changeState(ENTERING, null);
      })
    });
  }, _leaveRenders[modes.in] = function(_ref2) {
    var current = _ref2.current, changeState = _ref2.changeState, children = _ref2.children;
    return [current, React.cloneElement(children, {
      in: true,
      onEntered: callHook(children, "onEntered", function() {
        changeState(ENTERING);
      })
    })];
  }, _leaveRenders);
  var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
    var children = _ref3.children, changeState = _ref3.changeState;
    return React.cloneElement(children, {
      in: true,
      onEntered: callHook(children, "onEntered", function() {
        changeState(ENTERED, React.cloneElement(children, {
          in: true
        }));
      })
    });
  }, _enterRenders[modes.in] = function(_ref4) {
    var current = _ref4.current, children = _ref4.children, changeState = _ref4.changeState;
    return [React.cloneElement(current, {
      in: false,
      onExited: callHook(current, "onExited", function() {
        changeState(ENTERED, React.cloneElement(children, {
          in: true
        }));
      })
    }), React.cloneElement(children, {
      in: true
    })];
  }, _enterRenders);
  var SwitchTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(SwitchTransition2, _React$Component);
    function SwitchTransition2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        status: ENTERED,
        current: null
      };
      _this.appeared = false;
      _this.changeState = function(status, current) {
        if (current === void 0) {
          current = _this.state.current;
        }
        _this.setState({
          status,
          current
        });
      };
      return _this;
    }
    var _proto = SwitchTransition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.appeared = true;
    };
    SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.children == null) {
        return {
          current: null
        };
      }
      if (state.status === ENTERING && props.mode === modes.in) {
        return {
          status: ENTERING
        };
      }
      if (state.current && areChildrenDifferent(state.current, props.children)) {
        return {
          status: EXITING
        };
      }
      return {
        current: React.cloneElement(props.children, {
          in: true
        })
      };
    };
    _proto.render = function render() {
      var _this$props = this.props, children = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
      var data = {
        children,
        current,
        changeState: this.changeState,
        status
      };
      var component;
      switch (status) {
        case ENTERING:
          component = enterRenders[mode](data);
          break;
        case EXITING:
          component = leaveRenders[mode](data);
          break;
        case ENTERED:
          component = current;
      }
      return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: {
          isMounting: !this.appeared
        }
      }, component);
    };
    return SwitchTransition2;
  }(React.Component);
  SwitchTransition.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * Transition modes.
     * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
     * `in-out`: New element transitions in first, then when complete, the current element transitions out.
     *
     * @type {'out-in'|'in-out'}
     */
    mode: PropTypes.oneOf([modes.in, modes.out]),
    /**
     * Any `Transition` or `CSSTransition` component.
     */
    children: PropTypes.oneOfType([PropTypes.element.isRequired])
  } : {};
  SwitchTransition.defaultProps = {
    mode: modes.out
  };
  const reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout,
      easing: easing2,
      style: style2 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style2.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
      easing: (_style$transitionTimi = style2.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style2.transitionDelay
    };
  }
  "use client";
  const _excluded$s = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  const styles$1 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  const Fade = /* @__PURE__ */ React__namespace.forwardRef(function Fade2(props, ref) {
    const theme = useTheme();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$s);
    const enableStrictModeCompat = true;
    const nodeRef = React__namespace.useRef(null);
    const handleRef = useForkRef(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React__namespace.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles$1[state], style2, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  process.env.NODE_ENV !== "production" ? Fade.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: PropTypes.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  "use client";
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  const backdropClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);
  "use client";
  const _excluded$r = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  const useUtilityClasses$m = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  const BackdropRoot = styled("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.invisible && styles2.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  const Backdrop = /* @__PURE__ */ React__namespace.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useThemeProps({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$r);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses$m(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropRoot, _extends({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Backdrop.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      root: PropTypes.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: PropTypes.bool,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: PropTypes.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  "use client";
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  const modalClasses = generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);
  "use client";
  const _excluded$q = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
  const useUtilityClasses$l = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  const ModalRoot = styled("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.open && ownerState.exited && styles2.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  const ModalBackdrop = styled(Backdrop, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles2) => {
      return styles2.backdrop;
    }
  })({
    zIndex: -1
  });
  const Modal = /* @__PURE__ */ React__namespace.forwardRef(function Modal2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useThemeProps({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps,
      slots
      // eslint-disable-next-line react/prop-types
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$q);
    const propsWithDefaults = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal(_extends({}, propsWithDefaults, {
      rootRef: ref
    }));
    const ownerState = _extends({}, propsWithDefaults, {
      exited
    });
    const classes = useUtilityClasses$l(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
    });
    const backdropProps = useSlotProps({
      elementType: BackdropSlot,
      externalSlotProps: backdropSlotProps,
      additionalProps: BackdropProps,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends({}, otherHandlers, {
          onClick: (e) => {
            if (onBackdropClick) {
              onBackdropClick(e);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e);
            }
          }
        }));
      },
      className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(RootSlot, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropSlot, _extends({}, backdropProps)) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(FocusTrap, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React__namespace.cloneElement(children, childProps)
        })]
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? Modal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: PropTypes.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: PropTypes.object,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: PropTypes.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Backdrop: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: PropTypes.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: PropTypes.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: PropTypes.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: PropTypes.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: PropTypes.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: PropTypes.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: PropTypes.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: PropTypes.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: PropTypes.shape({
      backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      backdrop: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  "use client";
  const _excluded$p = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getTranslateValue(direction, node2, resolvedContainer) {
    const rect = node2.getBoundingClientRect();
    const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
    const containerWindow = ownerWindow(node2);
    let transform;
    if (node2.fakeTransform) {
      transform = node2.fakeTransform;
    } else {
      const computedStyle = containerWindow.getComputedStyle(node2);
      transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    let offsetX = 0;
    let offsetY = 0;
    if (transform && transform !== "none" && typeof transform === "string") {
      const transformValues = transform.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    if (direction === "left") {
      if (containerRect) {
        return `translateX(${containerRect.right + offsetX - rect.left}px)`;
      }
      return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
    }
    if (direction === "right") {
      if (containerRect) {
        return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
      }
      return `translateX(-${rect.left + rect.width - offsetX}px)`;
    }
    if (direction === "up") {
      if (containerRect) {
        return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
      }
      return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
    }
    if (containerRect) {
      return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
    }
    return `translateY(-${rect.top + rect.height - offsetY}px)`;
  }
  function resolveContainer(containerPropProp) {
    return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
  }
  function setTranslateValue(direction, node2, containerProp) {
    const resolvedContainer = resolveContainer(containerProp);
    const transform = getTranslateValue(direction, node2, resolvedContainer);
    if (transform) {
      node2.style.webkitTransform = transform;
      node2.style.transform = transform;
    }
  }
  const Slide = /* @__PURE__ */ React__namespace.forwardRef(function Slide2(props, ref) {
    const theme = useTheme();
    const defaultEasing = {
      enter: theme.transitions.easing.easeOut,
      exit: theme.transitions.easing.sharp
    };
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      container: containerProp,
      direction = "down",
      easing: easingProp = defaultEasing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$p);
    const childrenRef = React__namespace.useRef(null);
    const handleRef = useForkRef(children.ref, childrenRef, ref);
    const normalizedTransitionCallback = (callback) => (isAppearing) => {
      if (callback) {
        if (isAppearing === void 0) {
          callback(childrenRef.current);
        } else {
          callback(childrenRef.current, isAppearing);
        }
      }
    };
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      setTranslateValue(direction, node2, containerProp);
      reflow(node2);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const transitionProps = getTransitionProps({
        timeout,
        style: style2,
        easing: easingProp
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps));
      node2.style.transition = theme.transitions.create("transform", _extends({}, transitionProps));
      node2.style.webkitTransform = "none";
      node2.style.transform = "none";
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        timeout,
        style: style2,
        easing: easingProp
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      setTranslateValue(direction, node2, containerProp);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback((node2) => {
      node2.style.webkitTransition = "";
      node2.style.transition = "";
      if (onExited) {
        onExited(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(childrenRef.current, next2);
      }
    };
    const updatePosition = React__namespace.useCallback(() => {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current, containerProp);
      }
    }, [direction, containerProp]);
    React__namespace.useEffect(() => {
      if (inProp || direction === "down" || direction === "right") {
        return void 0;
      }
      const handleResize = debounce$1(() => {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current, containerProp);
        }
      });
      const containerWindow = ownerWindow(childrenRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [direction, inProp, containerProp]);
    React__namespace.useEffect(() => {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      appear,
      in: inProp,
      timeout
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React__namespace.cloneElement(children, _extends({
          ref: handleRef,
          style: _extends({
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, style2, children.props.style)
        }, childProps));
      }
    }));
  });
  process.env.NODE_ENV !== "production" ? Slide.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: PropTypes.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the container the Slide is transitioning from.
     */
    container: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.func]), (props) => {
      if (props.open) {
        const resolvedContainer = resolveContainer(props.container);
        if (resolvedContainer && resolvedContainer.nodeType === 1) {
          const box = resolvedContainer.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== "function" || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Direction the child node will enter from.
     * @default 'down'
     */
    direction: PropTypes.oneOf(["down", "left", "right", "up"]),
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     * @default {
     *   enter: theme.transitions.easing.easeOut,
     *   exit: theme.transitions.easing.sharp,
     * }
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  "use client";
  function getDrawerUtilityClass(slot) {
    return generateUtilityClass("MuiDrawer", slot);
  }
  const drawerClasses = generateUtilityClasses("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);
  "use client";
  const _excluded$o = ["BackdropProps"], _excluded2$3 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
  const overridesResolver = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles2.docked, styles2.modal];
  };
  const useUtilityClasses$k = (ownerState) => {
    const {
      classes,
      anchor,
      variant
    } = ownerState;
    const slots = {
      root: ["root"],
      docked: [(variant === "permanent" || variant === "persistent") && "docked"],
      modal: ["modal"],
      paper: ["paper", `paperAnchor${capitalize(anchor)}`, variant !== "temporary" && `paperAnchorDocked${capitalize(anchor)}`]
    };
    return composeClasses(slots, getDrawerUtilityClass, classes);
  };
  const DrawerRoot = styled(Modal, {
    name: "MuiDrawer",
    slot: "Root",
    overridesResolver
  })(({
    theme
  }) => ({
    zIndex: (theme.vars || theme).zIndex.drawer
  }));
  const DrawerDockedRoot = styled("div", {
    shouldForwardProp: rootShouldForwardProp,
    name: "MuiDrawer",
    slot: "Docked",
    skipVariantsResolver: false,
    overridesResolver
  })({
    flex: "0 0 auto"
  });
  const DrawerPaper = styled(Paper, {
    name: "MuiDrawer",
    slot: "Paper",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.paper, styles2[`paperAnchor${capitalize(ownerState.anchor)}`], ownerState.variant !== "temporary" && styles2[`paperAnchorDocked${capitalize(ownerState.anchor)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    overflowY: "auto",
    display: "flex",
    flexDirection: "column",
    height: "100%",
    flex: "1 0 auto",
    zIndex: (theme.vars || theme).zIndex.drawer,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    // temporary style
    position: "fixed",
    top: 0,
    // We disable the focus ring for mouse, touch and keyboard users.
    // At some point, it would be better to keep it for keyboard users.
    // :focus-ring CSS pseudo-class will help.
    outline: 0
  }, ownerState.anchor === "left" && {
    left: 0
  }, ownerState.anchor === "top" && {
    top: 0,
    left: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "right" && {
    right: 0
  }, ownerState.anchor === "bottom" && {
    top: "auto",
    left: 0,
    bottom: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
    borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
    borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
    borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
  }));
  const oppositeDirection = {
    left: "right",
    right: "left",
    top: "down",
    bottom: "up"
  };
  function isHorizontal(anchor) {
    return ["left", "right"].indexOf(anchor) !== -1;
  }
  function getAnchor(theme, anchor) {
    return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
  }
  const Drawer = /* @__PURE__ */ React__namespace.forwardRef(function Drawer2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDrawer"
    });
    const theme = useTheme();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      anchor: anchorProp = "left",
      BackdropProps,
      children,
      className,
      elevation = 16,
      hideBackdrop = false,
      ModalProps: {
        BackdropProps: BackdropPropsProp
      } = {},
      onClose,
      open = false,
      PaperProps = {},
      SlideProps,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Slide,
      transitionDuration = defaultTransitionDuration,
      variant = "temporary"
    } = props, ModalProps = _objectWithoutPropertiesLoose(props.ModalProps, _excluded$o), other = _objectWithoutPropertiesLoose(props, _excluded2$3);
    const mounted = React__namespace.useRef(false);
    React__namespace.useEffect(() => {
      mounted.current = true;
    }, []);
    const anchorInvariant = getAnchor(theme, anchorProp);
    const anchor = anchorProp;
    const ownerState = _extends({}, props, {
      anchor,
      elevation,
      open,
      variant
    }, other);
    const classes = useUtilityClasses$k(ownerState);
    const drawer = /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerPaper, _extends({
      elevation: variant === "temporary" ? elevation : 0,
      square: true
    }, PaperProps, {
      className: clsx(classes.paper, PaperProps.className),
      ownerState,
      children
    }));
    if (variant === "permanent") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerDockedRoot, _extends({
        className: clsx(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: drawer
      }));
    }
    const slidingDrawer = /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
      in: open,
      direction: oppositeDirection[anchorInvariant],
      timeout: transitionDuration,
      appear: mounted.current
    }, SlideProps, {
      children: drawer
    }));
    if (variant === "persistent") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerDockedRoot, _extends({
        className: clsx(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: slidingDrawer
      }));
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerRoot, _extends({
      BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
        transitionDuration
      }),
      className: clsx(classes.root, classes.modal, className),
      open,
      ownerState,
      onClose,
      hideBackdrop,
      ref
    }, other, ModalProps, {
      children: slidingDrawer
    }));
  });
  process.env.NODE_ENV !== "production" ? Drawer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Side from which the drawer will appear.
     * @default 'left'
     */
    anchor: PropTypes.oneOf(["bottom", "left", "right", "top"]),
    /**
     * @ignore
     */
    BackdropProps: PropTypes.object,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The elevation of the drawer.
     * @default 16
     */
    elevation: integerPropType,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: PropTypes.bool,
    /**
     * Props applied to the [`Modal`](/material-ui/api/modal/) element.
     * @default {}
     */
    ModalProps: PropTypes.object,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     * @default false
     */
    open: PropTypes.bool,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: PropTypes.object,
    /**
     * Props applied to the [`Slide`](/material-ui/api/slide/) element.
     */
    SlideProps: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })]),
    /**
     * The variant to use.
     * @default 'temporary'
     */
    variant: PropTypes.oneOf(["permanent", "persistent", "temporary"])
  } : void 0;
  "use client";
  const BasicDrawerHeader = styled("div")(({ theme }) => __spreadValues({
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    padding: theme.spacing(0, 1),
    minHeight: "43px"
  }, theme.mixins.toolbar));
  const BasicDrawer = styled(Drawer, { shouldForwardProp: (prop) => prop !== "open" })(
    ({ theme, open, drawerwidth }) => __spreadValues(__spreadValues({
      width: drawerwidth,
      flexShrink: 0,
      whiteSpace: "nowrap",
      boxSizing: "border-box"
    }, open && __spreadProps(__spreadValues({}, openedMixin(theme, drawerwidth)), {
      "& .MuiDrawer-paper": openedMixin(theme, drawerwidth)
    })), !open && __spreadProps(__spreadValues({}, closedMixin(theme)), {
      "& .MuiDrawer-paper": closedMixin(theme)
    }))
  );
  const openedMixin = (theme, drawerwidth) => ({
    // backgroundColor: theme.palette.primary.main,
    width: drawerwidth,
    transition: theme.transitions.create("width", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen
    }),
    overflowX: "hidden"
  });
  const closedMixin = (theme) => ({
    transition: theme.transitions.create("width", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    }),
    overflowX: "hidden",
    display: "none",
    width: `calc(${theme.spacing(7)} + 1px)`,
    [theme.breakpoints.up("sm")]: {
      width: `calc(${theme.spacing(8)} + 1px)`
    }
  });
  const BasicButton = styled(material.Button, {
    shouldForwardProp: (prop) => prop !== "theme"
  })(({ theme }) => ({
    // color: theme.palette.primary.main
    // border: '1px solid ' + theme.palette.primary.main
  }));
  const BasicAppBar = styled(AppBar, {
    shouldForwardProp: (prop) => prop !== "open"
  })(({ theme, open, drawerwidth }) => __spreadValues({
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    })
  }, open && {
    marginLeft: drawerwidth,
    width: `calc(100% - ${drawerwidth})`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen
    })
  }));
  "use client";
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout
    } = props;
    const [leaving, setLeaving] = React__namespace.useState(false);
    const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React__namespace.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
        className: childClassName
      })
    });
  }
  process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object.isRequired,
    className: PropTypes.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: PropTypes.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: PropTypes.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: PropTypes.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: PropTypes.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: PropTypes.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: PropTypes.number,
    /**
     * exit delay
     */
    timeout: PropTypes.number.isRequired
  } : void 0;
  function getTouchRippleUtilityClass(slot) {
    return generateUtilityClass("MuiTouchRipple", slot);
  }
  const touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  "use client";
  const _excluded$n = ["center", "classes", "className"];
  let _ = (t) => t, _t, _t2, _t3, _t4;
  const DURATION = 550;
  const DELAY_RIPPLE = 80;
  const enterKeyframe = react.keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  const exitKeyframe = react.keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  const pulsateKeyframe = react.keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  const TouchRippleRoot = styled("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  const TouchRippleRipple = styled(Ripple, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses.child, touchRippleClasses.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  const TouchRipple = /* @__PURE__ */ React__namespace.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$n);
    const [ripples, setRipples] = React__namespace.useState([]);
    const nextKey = React__namespace.useRef(0);
    const rippleCallback = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React__namespace.useRef(false);
    const startTimer = React__namespace.useRef(0);
    const startTimerCommit = React__namespace.useRef(null);
    const container = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      return () => {
        if (startTimer.current) {
          clearTimeout(startTimer.current);
        }
      };
    }, []);
    const startCommit = React__namespace.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRipple, {
        classes: {
          ripple: clsx(classes.ripple, touchRippleClasses.ripple),
          rippleVisible: clsx(classes.rippleVisible, touchRippleClasses.rippleVisible),
          ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses.ripplePulsate),
          child: clsx(classes.child, touchRippleClasses.child),
          childLeaving: clsx(classes.childLeaving, touchRippleClasses.childLeaving),
          childPulsate: clsx(classes.childPulsate, touchRippleClasses.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start2 = React__namespace.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * __pow(rect.width, 2) + __pow(rect.height, 2)) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(__pow(sizeX, 2) + __pow(sizeY, 2));
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = React__namespace.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React__namespace.useCallback((event, cb) => {
      clearTimeout(startTimer.current);
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React__namespace.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRoot, _extends({
      className: clsx(touchRippleClasses.root, classes.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionGroup, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string
  } : void 0;
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass("MuiButtonBase", slot);
  }
  const buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  "use client";
  const _excluded$m = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  const useUtilityClasses$j = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  const ButtonBaseRoot = styled("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  const ButtonBase = /* @__PURE__ */ React__namespace.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$m);
    const buttonRef = React__namespace.useRef(null);
    const rippleRef = React__namespace.useRef(null);
    const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React__namespace.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React__namespace.useState(false);
    React__namespace.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React__namespace.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur2 = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React__namespace.useRef(false);
    const handleKeyDown2 = useEventCallback((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses$j(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx(classes.root, className),
      ownerState,
      onBlur: handleBlur2,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? (
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        jsxRuntimeExports.jsx(TouchRipple, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps))
      ) : null]
    }));
  });
  process.env.NODE_ENV !== "production" ? ButtonBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: refType,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: PropTypes.bool,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: PropTypes.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: PropTypes.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: PropTypes.string,
    /**
     * @ignore
     */
    href: PropTypes.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: PropTypes.elementType,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onContextMenu: PropTypes.func,
    /**
     * @ignore
     */
    onDragLeave: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * @ignore
     */
    onMouseDown: PropTypes.func,
    /**
     * @ignore
     */
    onMouseLeave: PropTypes.func,
    /**
     * @ignore
     */
    onMouseUp: PropTypes.func,
    /**
     * @ignore
     */
    onTouchEnd: PropTypes.func,
    /**
     * @ignore
     */
    onTouchMove: PropTypes.func,
    /**
     * @ignore
     */
    onTouchStart: PropTypes.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @default 0
     */
    tabIndex: PropTypes.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: PropTypes.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.shape({
        pulsate: PropTypes.func.isRequired,
        start: PropTypes.func.isRequired,
        stop: PropTypes.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: PropTypes.oneOfType([PropTypes.oneOf(["button", "reset", "submit"]), PropTypes.string])
  } : void 0;
  "use client";
  function getButtonUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  const buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  const ButtonGroupContext = /* @__PURE__ */ React__namespace.createContext({});
  if (process.env.NODE_ENV !== "production") {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  const ButtonGroupButtonContext = /* @__PURE__ */ React__namespace.createContext(void 0);
  if (process.env.NODE_ENV !== "production") {
    ButtonGroupButtonContext.displayName = "ButtonGroupButtonContext";
  }
  "use client";
  const _excluded$l = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  const useUtilityClasses$i = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size: size2,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize(color2)}`, `size${capitalize(size2)}`, `${variant}Size${capitalize(size2)}`, color2 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["startIcon", `iconSize${capitalize(size2)}`],
      endIcon: ["endIcon", `iconSize${capitalize(size2)}`]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  const ButtonRoot = styled(ButtonBase, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color)}`], styles2[`size${capitalize(ownerState.size)}`], styles2[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === "inherit" && styles2.colorInherit, ownerState.disableElevation && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
    return _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[4],
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses.disabled}`]: _extends({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? (
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary
      ) : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses.disabled}`]: {
      boxShadow: "none"
    }
  });
  const ButtonStartIcon = styled("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.startIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  const ButtonEndIcon = styled("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.endIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  const Button = /* @__PURE__ */ React__namespace.forwardRef(function Button2(inProps, ref) {
    const contextProps = React__namespace.useContext(ButtonGroupContext);
    const buttonGroupButtonContextPositionClassName = React__namespace.useContext(ButtonGroupButtonContext);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useThemeProps({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size: size2 = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$l);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size: size2,
      type,
      variant
    });
    const classes = useUtilityClasses$i(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || "";
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonRoot, _extends({
      ownerState,
      className: clsx(contextProps.className, classes.root, className, positionClassName),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  process.env.NODE_ENV !== "production" ? Button.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * Element placed after the children.
     */
    endIcon: PropTypes.node,
    /**
     * @ignore
     */
    focusVisibleClassName: PropTypes.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: PropTypes.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["small", "medium", "large"]), PropTypes.string]),
    /**
     * Element placed before the children.
     */
    startIcon: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @ignore
     */
    type: PropTypes.oneOfType([PropTypes.oneOf(["button", "reset", "submit"]), PropTypes.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["contained", "outlined", "text"]), PropTypes.string])
  } : void 0;
  "use client";
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }
  const FormControlContext = /* @__PURE__ */ React__namespace.createContext(void 0);
  if (process.env.NODE_ENV !== "production") {
    FormControlContext.displayName = "FormControlContext";
  }
  "use client";
  function useFormControl() {
    return React__namespace.useContext(FormControlContext);
  }
  "use client";
  function GlobalStyles(props) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$1, _extends({}, props, {
      defaultTheme: defaultTheme$2,
      themeId: THEME_ID
    }));
  }
  process.env.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The styles you want to apply globally.
     */
    styles: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool])
  } : void 0;
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  const inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  "use client";
  const _excluded$k = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  const rootOverridesResolver = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.formControl && styles2.formControl, ownerState.startAdornment && styles2.adornedStart, ownerState.endAdornment && styles2.adornedEnd, ownerState.error && styles2.error, ownerState.size === "small" && styles2.sizeSmall, ownerState.multiline && styles2.multiline, ownerState.color && styles2[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles2.fullWidth, ownerState.hiddenLabel && styles2.hiddenLabel];
  };
  const inputOverridesResolver = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.input, ownerState.size === "small" && styles2.inputSizeSmall, ownerState.multiline && styles2.inputMultiline, ownerState.type === "search" && styles2.inputTypeSearch, ownerState.startAdornment && styles2.inputAdornedStart, ownerState.endAdornment && styles2.inputAdornedEnd, ownerState.hiddenLabel && styles2.inputHiddenLabel];
  };
  const useUtilityClasses$h = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size: size2,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size2 && size2 !== "medium" && `size${capitalize(size2)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size2 === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  const InputBaseRoot = styled("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  const InputBaseComponent = styled("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = _extends({
      color: "currentColor"
    }, theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      // Fix IE11 width issue
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&:-ms-input-placeholder": placeholder,
      // IE11
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholderHidden,
        // IE11
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus:-ms-input-placeholder": placeholderVisible,
        // IE11
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        // Fix opacity Safari bug
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      // Improve type search style.
      MozAppearance: "textfield"
    });
  });
  const inputGlobalStyles = /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  const InputBase = /* @__PURE__ */ React__namespace.forwardRef(function InputBase2(inProps, ref) {
    var _slotProps$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$k);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const inputRef = React__namespace.useRef();
    const handleInputRefWarning = React__namespace.useCallback((instance) => {
      if (process.env.NODE_ENV !== "production") {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React__namespace.useState(false);
    const muiFormControl = useFormControl();
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React__namespace.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React__namespace.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur2 = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React__namespace.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (process.env.NODE_ENV !== "production") {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React__namespace.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses$h(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input2 = slots.input || components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext.Provider, {
          value: null,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent(Input2) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur2,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  process.env.NODE_ENV !== "production" ? InputBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    "aria-describedby": PropTypes.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: elementTypeAcceptingRef$1,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * @ignore
     */
    renderSuffix: PropTypes.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The size of the component.
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  "use client";
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  const inputClasses = _extends({}, inputBaseClasses, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
  "use client";
  const _excluded$j = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  const useUtilityClasses$g = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const InputRoot = styled(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme.vars) {
      bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
    }
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${inputClasses.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${inputClasses.disabled}, .${inputClasses.error}):before`]: {
        borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  const InputInput = styled(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  const Input = /* @__PURE__ */ React__namespace.forwardRef(function Input2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$j);
    const classes = useUtilityClasses$g(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  process.env.NODE_ENV !== "production" ? Input.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: PropTypes.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  Input.muiName = "Input";
  "use client";
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  const filledInputClasses = _extends({}, inputBaseClasses, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
  "use client";
  const _excluded$i = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  const useUtilityClasses$f = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const FilledInputRoot = styled(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends({
      position: "relative",
      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        }
      },
      [`&.${filledInputClasses.focused}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
      },
      [`&.${filledInputClasses.disabled}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${filledInputClasses.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${filledInputClasses.disabled}, .${filledInputClasses.error}):before`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
      },
      [`&.${filledInputClasses.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.hiddenLabel && ownerState.size === "small" && {
      paddingTop: 8,
      paddingBottom: 9
    }));
  });
  const FilledInputInput = styled(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }));
  const FilledInput = /* @__PURE__ */ React__namespace.forwardRef(function FilledInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$i);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses$f(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(filledInputComponentsProps, slotProps != null ? slotProps : componentsPropsProp) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  process.env.NODE_ENV !== "production" ? FilledInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: PropTypes.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  FilledInput.muiName = "Input";
  "use client";
  "use client";
  var _span$2;
  const _excluded$h = ["children", "classes", "className", "label", "notched"];
  const NotchedOutlineRoot$1 = styled("fieldset", {
    shouldForwardProp: rootShouldForwardProp
  })({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  const NotchedOutlineLegend = styled("legend", {
    shouldForwardProp: rootShouldForwardProp
  })(({
    ownerState,
    theme
  }) => _extends({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    // sync with `height` in `legend` styles
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends({
    display: "block",
    // Fix conflict with normalize.css and sanitize.css
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$h);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineRoot$1, _extends({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span$2 || (_span$2 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: "notranslate",
            children: "​"
          }))
        )
      })
    }));
  }
  process.env.NODE_ENV !== "production" ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The label.
     */
    label: PropTypes.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: PropTypes.bool.isRequired,
    /**
     * @ignore
     */
    style: PropTypes.object
  } : void 0;
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  const outlinedInputClasses = _extends({}, inputBaseClasses, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  "use client";
  const _excluded$g = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  const useUtilityClasses$e = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const OutlinedInputRoot = styled(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      [`&:hover .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses.notchedOutline}`]: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
        }
      },
      [`&.${outlinedInputClasses.focused} .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses.error} .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.error.main
      },
      [`&.${outlinedInputClasses.disabled} .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  const NotchedOutlineRoot = styled(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles2) => styles2.notchedOutline
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
    };
  });
  const OutlinedInputInput = styled(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: "16.5px 14px"
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  const OutlinedInput = /* @__PURE__ */ React__namespace.forwardRef(function OutlinedInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useThemeProps({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$g);
    const classes = useUtilityClasses$e(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineRoot, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [label, " ", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  process.env.NODE_ENV !== "production" ? OutlinedInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: PropTypes.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: PropTypes.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: PropTypes.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  "use client";
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  const formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  "use client";
  const _excluded$f = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  const useUtilityClasses$d = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  const FormLabelRoot = styled("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles2) => {
      return _extends({}, styles2.root, ownerState.color === "secondary" && styles2.colorSecondary, ownerState.filled && styles2.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses.focused}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${formLabelClasses.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formLabelClasses.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  const AsteriskComponent = styled("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles2) => styles2.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  const FormLabel = /* @__PURE__ */ React__namespace.forwardRef(function FormLabel2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$f);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses$d(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ jsxRuntimeExports.jsxs(AsteriskComponent, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: [" ", "*"]
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? FormLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: PropTypes.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: PropTypes.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  const inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
  "use client";
  const _excluded$e = ["disableAnimation", "margin", "shrink", "variant", "className"];
  const useUtilityClasses$c = (ownerState) => {
    const {
      classes,
      formControl,
      size: size2,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size2 && size2 !== "normal" && `size${capitalize(size2)}`, variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };
  const InputLabelRoot = styled(FormLabel, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses.asterisk}`]: styles2.asterisk
      }, styles2.root, ownerState.formControl && styles2.formControl, ownerState.size === "small" && styles2.sizeSmall, ownerState.shrink && styles2.shrink, !ownerState.disableAnimation && styles2.animated, ownerState.focused && styles2.focused, styles2[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    // Theoretically, we should have (8+5)*2/0.75 = 34px
    // but it feels a better when it bleeds a bit on the left, so 32px.
    maxWidth: "calc(133% - 32px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  const InputLabel = /* @__PURE__ */ React__namespace.forwardRef(function InputLabel2(inProps, ref) {
    const props = useThemeProps({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$e);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required", "focused"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required,
      focused: fcs.focused
    });
    const classes = useUtilityClasses$c(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx(classes.root, className)
    }, other, {
      classes
    }));
  });
  process.env.NODE_ENV !== "production" ? InputLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), PropTypes.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: PropTypes.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: PropTypes.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: PropTypes.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: PropTypes.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["normal", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  "use client";
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  const formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
  "use client";
  const _excluded$d = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  const useUtilityClasses$b = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  const FormControlRoot = styled("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles2) => {
      return _extends({}, styles2.root, styles2[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles2.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  const FormControl = /* @__PURE__ */ React__namespace.forwardRef(function FormControl2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size: size2 = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$d);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size: size2,
      variant
    });
    const classes = useUtilityClasses$b(ownerState);
    const [adornedStart, setAdornedStart] = React__namespace.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React__namespace.Children.forEach(children, (child) => {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React__namespace.useState(() => {
      let initialFilled = false;
      if (children) {
        React__namespace.Children.forEach(children, (child) => {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React__namespace.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (process.env.NODE_ENV !== "production") {
      const registeredInput = React__namespace.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React__namespace.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color2,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size: size2,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size2, variant]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext.Provider, {
      value: childContext,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? FormControl.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: PropTypes.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: PropTypes.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: PropTypes.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: PropTypes.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  "use client";
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  const formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  "use client";
  var _span$1;
  const _excluded$c = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  const useUtilityClasses$a = (ownerState) => {
    const {
      classes,
      contained,
      size: size2,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size2 && `size${capitalize(size2)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  const FormHelperTextRoot = styled("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.size && styles2[`size${capitalize(ownerState.size)}`], ownerState.contained && styles2.contained, ownerState.filled && styles2.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formHelperTextClasses.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  const FormHelperText = /* @__PURE__ */ React__namespace.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$c);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses$a(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx(classes.root, className),
      ref
    }, other, {
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span$1 || (_span$1 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          className: "notranslate",
          children: "​"
        }))
      ) : children
    }));
  });
  process.env.NODE_ENV !== "production" ? FormHelperText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: PropTypes.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: PropTypes.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: PropTypes.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["filled", "outlined", "standard"]), PropTypes.string])
  } : void 0;
  "use client";
  "use client";
  const ListContext = /* @__PURE__ */ React__namespace.createContext({});
  if (process.env.NODE_ENV !== "production") {
    ListContext.displayName = "ListContext";
  }
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  const listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);
  "use client";
  const _excluded$b = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  const useUtilityClasses$9 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  const ListRoot = styled("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.disablePadding && styles2.padding, ownerState.dense && styles2.dense, ownerState.subheader && styles2.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  const List = /* @__PURE__ */ React__namespace.forwardRef(function List2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$b);
    const context = React__namespace.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses$9(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext.Provider, {
      value: context,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ListRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? List.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: PropTypes.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: PropTypes.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  "use client";
  const _excluded$a = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  const MenuList = /* @__PURE__ */ React__namespace.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$a);
    const listRef = React__namespace.useRef(null);
    const textCriteriaRef = React__namespace.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React__namespace.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, theme) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
          listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown2 = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef(listRef, ref);
    let activeItemIndex = -1;
    React__namespace.Children.forEach(children, (child, index2) => {
      if (!/* @__PURE__ */ React__namespace.isValidElement(child)) {
        if (activeItemIndex === index2) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        if (reactIsExports.isFragment(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index2;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index2;
        }
      }
      if (activeItemIndex === index2 && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React__namespace.Children.map(children, (child, index2) => {
      if (index2 === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React__namespace.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(List, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  process.env.NODE_ENV !== "production" ? MenuList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: PropTypes.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: PropTypes.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: PropTypes.bool,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: PropTypes.oneOf(["menu", "selectedMenu"])
  } : void 0;
  "use client";
  "use client";
  const _excluded$9 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${__pow(value, 2)})`;
  }
  const styles = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  const isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  const Grow = /* @__PURE__ */ React__namespace.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$9);
    const timer = React__namespace.useRef();
    const autoTimeout = React__namespace.useRef();
    const theme = useTheme();
    const nodeRef = React__namespace.useRef(null);
    const handleRef = useForkRef(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout === "auto") {
        timer.current = setTimeout(next2, autoTimeout.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout === "auto" ? null : timeout
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React__namespace.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles[state], style2, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  process.env.NODE_ENV !== "production" ? Grow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: PropTypes.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  "use client";
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  const popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);
  "use client";
  const _excluded$8 = ["onEntering"], _excluded2$2 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"], _excluded3 = ["slotProps"];
  function getOffsetTop(rect, vertical) {
    let offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  const useUtilityClasses$8 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  const PopoverRoot = styled(Modal, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({});
  const PopoverPaper = styled(Paper, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles2) => styles2.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  const Popover = /* @__PURE__ */ React__namespace.forwardRef(function Popover2(inProps, ref) {
    var _slotProps$paper, _slots$root, _slots$paper;
    const props = useThemeProps({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps: PaperPropsProp = {},
      slots,
      slotProps,
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {},
      disableScrollLock = false
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$8), other = _objectWithoutPropertiesLoose(props, _excluded2$2);
    const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
    const paperRef = React__namespace.useRef();
    const handlePaperRef = useForkRef(paperRef, externalPaperSlotProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      externalPaperSlotProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses$8(ownerState);
    const getAnchorOffset = React__namespace.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (process.env.NODE_ENV !== "production") {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (process.env.NODE_ENV !== "production") {
        const box = anchorElement.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React__namespace.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React__namespace.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top2 = anchorOffset.top - elemTransformOrigin.vertical;
      let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom2 = top2 + elemRect.height;
      const right2 = left2 + elemRect.width;
      const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (marginThreshold !== null && top2 < marginThreshold) {
        const diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (marginThreshold !== null && bottom2 > heightThreshold) {
        const diff = bottom2 - heightThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (process.env.NODE_ENV !== "production") {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (marginThreshold !== null && left2 < marginThreshold) {
        const diff = left2 - marginThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right2 > widthThreshold) {
        const diff = right2 - widthThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top2)}px`,
        left: `${Math.round(left2)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React__namespace.useState(open);
    const setPositioningStyles = React__namespace.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    React__namespace.useEffect(() => {
      if (disableScrollLock) {
        window.addEventListener("scroll", setPositioningStyles);
      }
      return () => window.removeEventListener("scroll", setPositioningStyles);
    }, [anchorEl, disableScrollLock, setPositioningStyles]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React__namespace.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React__namespace.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React__namespace.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce$1(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : void 0);
    const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
    const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
    const paperProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: _extends({}, externalPaperSlotProps, {
        style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
          opacity: 0
        })
      }),
      additionalProps: {
        elevation,
        ref: handlePaperRef
      },
      ownerState,
      className: clsx(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
    });
    const _useSlotProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
      externalForwardedProps: other,
      additionalProps: {
        ref,
        slotProps: {
          backdrop: {
            invisible: true
          }
        },
        container,
        open
      },
      ownerState,
      className: clsx(classes.root, className)
    }), {
      slotProps: rootSlotPropsProp
    } = _useSlotProps, rootProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded3);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(RootSlot, _extends({}, rootProps, !isHostComponent(RootSlot) && {
      slotProps: rootSlotPropsProp,
      disableScrollLock
    }, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(PaperSlot, _extends({}, paperProps, {
          children
        }))
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Popover.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: refType,
    /**
     * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
     * or a function that returns either.
     * It's used to set the position of the popover.
     */
    anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: PropTypes.shape({
      horizontal: PropTypes.oneOfType([PropTypes.oneOf(["center", "left", "right"]), PropTypes.number]).isRequired,
      vertical: PropTypes.oneOfType([PropTypes.oneOf(["bottom", "center", "top"]), PropTypes.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: PropTypes.shape({
      left: PropTypes.number.isRequired,
      top: PropTypes.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: PropTypes.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: PropTypes.bool,
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: integerPropType,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * If null, the popover will not be constrained by the window.
     * @default 16
     */
    marginThreshold: PropTypes.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     *
     * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.paper` instead.
     *
     * @default {}
     */
    PaperProps: PropTypes.shape({
      component: elementTypeAcceptingRef$1
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      paper: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: PropTypes.shape({
      horizontal: PropTypes.oneOfType([PropTypes.oneOf(["center", "left", "right"]), PropTypes.number]).isRequired,
      vertical: PropTypes.oneOfType([PropTypes.oneOf(["bottom", "center", "top"]), PropTypes.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: PropTypes.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: PropTypes.object
  } : void 0;
  "use client";
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  const menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);
  "use client";
  const _excluded$7 = ["onEntering"], _excluded2$1 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
  const RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  const LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  const useUtilityClasses$7 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  const MenuRoot = styled(Popover, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({});
  const MenuPaper = styled(PopoverPaper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles2) => styles2.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tappable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  const MenuMenuList = styled(MenuList, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles2) => styles2.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  const Menu = /* @__PURE__ */ React__namespace.forwardRef(function Menu2(inProps, ref) {
    var _slots$paper, _slotProps$paper;
    const props = useThemeProps({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      className,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu",
      slots = {},
      slotProps = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$7), other = _objectWithoutPropertiesLoose(props, _excluded2$1);
    const theme = useTheme();
    const isRtl = theme.direction === "rtl";
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses$7(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React__namespace.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React__namespace.Children.map(children, (child, index2) => {
      if (!/* @__PURE__ */ React__namespace.isValidElement(child)) {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        if (reactIsExports.isFragment(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index2;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index2;
        }
      }
    });
    const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
    const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
    const rootSlotProps = useSlotProps({
      elementType: slots.root,
      externalSlotProps: slotProps.root,
      ownerState,
      className: [classes.root, className]
    });
    const paperSlotProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: paperExternalSlotProps,
      ownerState,
      className: classes.paper
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRoot, _extends({
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      slots: {
        paper: PaperSlot,
        root: slots.root
      },
      slotProps: {
        root: rootSlotProps,
        paper: paperSlotProps
      },
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Menu.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: PropTypes.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: PropTypes.bool,
    /**
     * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: PropTypes.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: PropTypes.object,
    /**
     * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
     */
    PopoverClasses: PropTypes.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      paper: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: PropTypes.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: PropTypes.oneOf(["menu", "selectedMenu"])
  } : void 0;
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  const nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  "use client";
  const _excluded$6 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
  const useUtilityClasses$6 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  const nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    borderRadius: 0,
    // Reset
    cursor: "pointer",
    "&:focus": _extends({}, theme.vars ? {
      backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
      // Reset Chrome style
    }),
    // Remove IE11 arrow
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme.vars || theme).palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    "&&&": {
      paddingRight: 24,
      minWidth: 16
      // So it doesn't collapse.
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme.vars || theme).shape.borderRadius
      // Reset the reset for Chrome style
    },
    "&&&": {
      paddingRight: 32
    }
  });
  const NativeSelectSelect = styled("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp,
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.select, styles2[ownerState.variant], ownerState.error && styles2.error, {
        [`&.${nativeSelectClasses.multiple}`]: styles2.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  const nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    // Center vertically, height is 1em
    pointerEvents: "none",
    // Don't block pointer events on the select under the icon.
    color: (theme.vars || theme).palette.action.active,
    [`&.${nativeSelectClasses.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  const NativeSelectIcon = styled("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
    }
  })(nativeSelectIconStyles);
  const NativeSelectInput = /* @__PURE__ */ React__namespace.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$6);
    const ownerState = _extends({}, props, {
      disabled,
      variant,
      error
    });
    const classes = useUtilityClasses$6(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectSelect, _extends({
        ownerState,
        className: clsx(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  process.env.NODE_ENV !== "production" ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * The CSS class name of the select element.
     */
    className: PropTypes.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: PropTypes.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: PropTypes.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: refType,
    /**
     * @ignore
     */
    multiple: PropTypes.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The input value.
     */
    value: PropTypes.any,
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  const selectClasses = generateUtilityClasses("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  "use client";
  var _span;
  const _excluded$5 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  const SelectSelect = styled("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses.select}`]: styles2.select
        },
        {
          [`&.${selectClasses.select}`]: styles2[ownerState.variant]
        },
        {
          [`&.${selectClasses.error}`]: styles2.error
        },
        {
          [`&.${selectClasses.multiple}`]: styles2.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  const SelectIcon = styled("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
    }
  })(nativeSelectIconStyles);
  const SelectNativeInput = styled("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles2) => styles2.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty(display2) {
    return display2 == null || typeof display2 === "string" && !display2.trim();
  }
  const useUtilityClasses$5 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  const SelectInput = /* @__PURE__ */ React__namespace.forwardRef(function SelectInput2(props, ref) {
    var _MenuProps$slotProps;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$5);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React__namespace.useRef(null);
    const displayRef = React__namespace.useRef(null);
    const [displayNode, setDisplayNode] = React__namespace.useState(null);
    const {
      current: isOpenControlled
    } = React__namespace.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React__namespace.useState();
    const handleRef = useForkRef(ref, inputRefProp);
    const handleDisplayRef = React__namespace.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React__namespace.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React__namespace.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React__namespace.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React__namespace.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React__namespace.Children.toArray(children);
    const handleChange = (event) => {
      const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
      if (child === void 0) {
        return;
      }
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur2 = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display2;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display2 = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React__namespace.isValidElement(child)) {
        return null;
      }
      if (process.env.NODE_ENV !== "production") {
        if (reactIsExports.isFragment(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : formatMuiErrorMessage(2));
        }
        selected = value.some((v) => areEqualValues(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React__namespace.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values2 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values2.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display2 = null;
        } else {
          display2 = displayMultiple.reduce((output, child, index2) => {
            output.push(child);
            if (index2 < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display2 = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open,
      error
    });
    const classes = useUtilityClasses$5(ownerState);
    const paperProps = _extends({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
    const listboxId = useId();
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "combobox",
        "aria-controls": listboxId,
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown2,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur2,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx(SelectDisplayProps.className, classes.select, className),
        id: buttonId,
        children: isEmpty(display2) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span || (_span = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: "notranslate",
            children: "​"
          }))
        ) : display2
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(SelectNativeInput, _extends({
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ jsxRuntimeExports.jsx(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ jsxRuntimeExports.jsx(Menu, _extends({
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          "aria-multiselectable": multiple ? "true" : void 0,
          disableListWrap: true,
          id: listboxId
        }, MenuProps.MenuListProps),
        slotProps: _extends({}, MenuProps.slotProps, {
          paper: _extends({}, paperProps, {
            style: _extends({
              minWidth: menuMinWidth
            }, paperProps != null ? paperProps.style : null)
          })
        }),
        children: items
      }))]
    });
  });
  process.env.NODE_ENV !== "production" ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": PropTypes.string,
    /**
     * @ignore
     */
    "aria-label": PropTypes.string,
    /**
     * @ignore
     */
    autoFocus: PropTypes.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: PropTypes.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * The CSS class name of the select element.
     */
    className: PropTypes.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: PropTypes.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: PropTypes.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: PropTypes.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: PropTypes.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: refType,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: PropTypes.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: PropTypes.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: PropTypes.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool,
    /**
     * @ignore
     */
    readOnly: PropTypes.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: PropTypes.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: PropTypes.object,
    /**
     * @ignore
     */
    tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * @ignore
     */
    type: PropTypes.any,
    /**
     * The input value.
     */
    value: PropTypes.any,
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  "use client";
  const ArrowDropDownIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");
  "use client";
  const _excluded$4 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"], _excluded2 = ["root"];
  const useUtilityClasses$4 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  const styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles2) => styles2.root,
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) && prop !== "variant",
    slot: "Root"
  };
  const StyledInput = styled(Input, styledRootConfig)("");
  const StyledOutlinedInput = styled(OutlinedInput, styledRootConfig)("");
  const StyledFilledInput = styled(FilledInput, styledRootConfig)("");
  const Select = /* @__PURE__ */ React__namespace.forwardRef(function Select2(inProps, ref) {
    const props = useThemeProps({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDownIcon,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$4);
    const inputComponent = native ? NativeSelectInput : SelectInput;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = _extends({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses$4(ownerState);
    const restOfClasses = _objectWithoutPropertiesLoose(classes, _excluded2);
    const InputComponent = input || {
      standard: /* @__PURE__ */ jsxRuntimeExports.jsx(StyledInput, {
        ownerState
      }),
      outlined: /* @__PURE__ */ jsxRuntimeExports.jsx(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: /* @__PURE__ */ jsxRuntimeExports.jsx(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef(ref, InputComponent.ref);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: /* @__PURE__ */ React__namespace.cloneElement(InputComponent, _extends({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extends({
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps: _extends({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? deepmerge(restOfClasses, inputProps.classes) : restOfClasses
        }, input ? input.props.inputProps : {})
      }, multiple && native && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx(InputComponent.props.className, className, classes.root)
      }, !input && {
        variant
      }, other))
    });
  });
  process.env.NODE_ENV !== "production" ? Select.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: PropTypes.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: PropTypes.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: PropTypes.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: PropTypes.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: PropTypes.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: PropTypes.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: PropTypes.object,
    /**
     * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
     */
    label: PropTypes.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: PropTypes.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: PropTypes.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: PropTypes.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: PropTypes.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<Value>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: PropTypes.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: PropTypes.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: PropTypes.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: PropTypes.oneOfType([PropTypes.oneOf([""]), PropTypes.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  "use client";
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  const textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);
  "use client";
  const _excluded$3 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  const variantComponent = {
    standard: Input,
    filled: FilledInput,
    outlined: OutlinedInput
  };
  const useUtilityClasses$3 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  const TextFieldRoot = styled(FormControl, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({});
  const TextField = /* @__PURE__ */ React__namespace.forwardRef(function TextField2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$3);
    const ownerState = _extends({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses$3(ownerState);
    if (process.env.NODE_ENV !== "production") {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ jsxRuntimeExports.jsx(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(TextFieldRoot, _extends({
      className: clsx(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ jsxRuntimeExports.jsx(Select, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  process.env.NODE_ENV !== "production" ? TextField.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: PropTypes.bool,
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: PropTypes.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The helper text content.
     */
    helperText: PropTypes.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: PropTypes.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: PropTypes.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * The label content.
     */
    label: PropTypes.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: PropTypes.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: PropTypes.bool,
    /**
     * Props applied to the [`Select`](/material-ui/api/select/) element.
     */
    SelectProps: PropTypes.object,
    /**
     * The size of the component.
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  "use client";
  const boxClasses = generateUtilityClasses("MuiBox", ["root"]);
  "use client";
  const defaultTheme = createTheme();
  const Box = createBox({
    themeId: THEME_ID,
    defaultTheme,
    defaultClassName: boxClasses.root,
    generateClassName: ClassNameGenerator.generate
  });
  process.env.NODE_ENV !== "production" ? Box.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass("MuiTypography", slot);
  }
  const typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
  "use client";
  const _excluded$2 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  const useUtilityClasses$2 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };
  const TypographyRoot = styled("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.variant && styles2[ownerState.variant], ownerState.align !== "inherit" && styles2[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles2.noWrap, ownerState.gutterBottom && styles2.gutterBottom, ownerState.paragraph && styles2.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant === "inherit" && {
    // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
    font: "inherit"
  }, ownerState.variant !== "inherit" && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  const defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  const colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  const transformDeprecatedColors = (color2) => {
    return colorTransformations[color2] || color2;
  };
  const Typography = /* @__PURE__ */ React__namespace.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiTypography"
    });
    const color2 = transformDeprecatedColors(themeProps.color);
    const props = extendSxProp(_extends({}, themeProps, {
      color: color2
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$2);
    const ownerState = _extends({}, props, {
      align,
      color: color2,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses$2(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TypographyRoot, _extends({
      as: Component,
      ref,
      ownerState,
      className: clsx(classes.root, className)
    }, other));
  });
  process.env.NODE_ENV !== "production" ? Typography.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: PropTypes.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: PropTypes.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: PropTypes.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), PropTypes.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: PropTypes.object
  } : void 0;
  "use client";
  "use client";
  const Container = createContainer({
    createStyledComponent: styled("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles2.fixed, ownerState.disableGutters && styles2.disableGutters];
      }
    }),
    useThemeProps: (inProps) => useThemeProps({
      props: inProps,
      name: "MuiContainer"
    })
  });
  process.env.NODE_ENV !== "production" ? Container.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: PropTypes.bool,
    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: PropTypes.bool,
    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: PropTypes.oneOfType([PropTypes.oneOf(["xs", "sm", "md", "lg", "xl", false]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getContainerUtilityClass(slot) {
    return generateUtilityClass("MuiContainer", slot);
  }
  const containerClasses = generateUtilityClasses("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
  "use client";
  function getAlertUtilityClass(slot) {
    return generateUtilityClass("MuiAlert", slot);
  }
  const alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass("MuiIconButton", slot);
  }
  const iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  "use client";
  const _excluded$1 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  const useUtilityClasses$1 = (ownerState) => {
    const {
      classes,
      disabled,
      color: color2,
      edge,
      size: size2
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize(color2)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size2)}`]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };
  const IconButtonRoot = styled(ButtonBase, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    // Explicitly set the default value to solve a bug on IE11.
    color: (theme.vars || theme).palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => {
    var _palette;
    const palette2 = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
      color: palette2 == null ? void 0 : palette2.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends({}, palette2 && {
        backgroundColor: theme.vars ? `rgba(${palette2.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette2.main, theme.palette.action.hoverOpacity)
      }, {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    });
  });
  const IconButton = /* @__PURE__ */ React__namespace.forwardRef(function IconButton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size: size2 = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1);
    const ownerState = _extends({}, props, {
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      size: size2
    });
    const classes = useUtilityClasses$1(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(IconButtonRoot, _extends({
      className: clsx(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref,
      ownerState
    }, other, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? IconButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The icon to display.
     */
    children: chainPropTypes(PropTypes.node, (props) => {
      const found = React__namespace.Children.toArray(props.children).some((child) => /* @__PURE__ */ React__namespace.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: PropTypes.oneOf(["end", "start", false]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["small", "medium", "large"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  "use client";
  const SuccessOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");
  "use client";
  const ReportProblemOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");
  "use client";
  const ErrorOutlineIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");
  "use client";
  const InfoOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");
  "use client";
  const CloseIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");
  "use client";
  const _excluded = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
  const useUtilityClasses = (ownerState) => {
    const {
      variant,
      color: color2,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${variant}${capitalize(color2 || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return composeClasses(slots, getAlertUtilityClass, classes);
  };
  const AlertRoot = styled(Paper, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const getColor = theme.palette.mode === "light" ? darken : lighten;
    const getBackgroundColor = theme.palette.mode === "light" ? lighten : darken;
    const color2 = ownerState.color || ownerState.severity;
    return _extends({}, theme.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px"
    }, color2 && ownerState.variant === "standard" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
      backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color2}StandardBg`] : getBackgroundColor(theme.palette[color2].light, 0.9),
      [`& .${alertClasses.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color2}IconColor`]
      } : {
        color: theme.palette[color2].main
      }
    }, color2 && ownerState.variant === "outlined" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
      border: `1px solid ${(theme.vars || theme).palette[color2].light}`,
      [`& .${alertClasses.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color2}IconColor`]
      } : {
        color: theme.palette[color2].main
      }
    }, color2 && ownerState.variant === "filled" && _extends({
      fontWeight: theme.typography.fontWeightMedium
    }, theme.vars ? {
      color: theme.vars.palette.Alert[`${color2}FilledColor`],
      backgroundColor: theme.vars.palette.Alert[`${color2}FilledBg`]
    } : {
      backgroundColor: theme.palette.mode === "dark" ? theme.palette[color2].dark : theme.palette[color2].main,
      color: theme.palette.getContrastText(theme.palette[color2].main)
    }));
  });
  const AlertIcon = styled("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles2) => styles2.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  const AlertMessage = styled("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles2) => styles2.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  const AlertAction = styled("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles2) => styles2.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  const defaultIconMapping = {
    success: /* @__PURE__ */ jsxRuntimeExports.jsx(SuccessOutlinedIcon, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ jsxRuntimeExports.jsx(ReportProblemOutlinedIcon, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorOutlineIcon, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ jsxRuntimeExports.jsx(InfoOutlinedIcon, {
      fontSize: "inherit"
    })
  };
  const Alert = /* @__PURE__ */ React__namespace.forwardRef(function Alert2(inProps, ref) {
    var _ref, _slots$closeButton, _ref2, _slots$closeIcon, _slotProps$closeButto, _slotProps$closeIcon;
    const props = useThemeProps({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color: color2,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      slotProps = {},
      slots = {},
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
    const ownerState = _extends({}, props, {
      color: color2,
      severity,
      variant
    });
    const classes = useUtilityClasses(ownerState);
    const AlertCloseButton = (_ref = (_slots$closeButton = slots.closeButton) != null ? _slots$closeButton : components.CloseButton) != null ? _ref : IconButton;
    const AlertCloseIcon = (_ref2 = (_slots$closeIcon = slots.closeIcon) != null ? _slots$closeIcon : components.CloseIcon) != null ? _ref2 : CloseIcon;
    const closeButtonProps = (_slotProps$closeButto = slotProps.closeButton) != null ? _slotProps$closeButto : componentsProps.closeButton;
    const closeIconProps = (_slotProps$closeIcon = slotProps.closeIcon) != null ? _slotProps$closeIcon : componentsProps.closeIcon;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertRoot, _extends({
      role,
      elevation: 0,
      ownerState,
      className: clsx(classes.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertIcon, {
        ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(AlertMessage, {
        ownerState,
        className: classes.message,
        children
      }), action != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
        ownerState,
        className: classes.action,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
        ownerState,
        className: classes.action,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCloseButton, _extends({
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose
        }, closeButtonProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCloseIcon, _extends({
            fontSize: "small"
          }, closeIconProps))
        }))
      }) : null]
    }));
  });
  process.env.NODE_ENV !== "production" ? Alert.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: PropTypes.node,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: PropTypes.string,
    /**
     * The color of the component. Unless provided, the value is taken from the `severity` prop.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      CloseButton: PropTypes.elementType,
      CloseIcon: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      closeButton: PropTypes.object,
      closeIcon: PropTypes.object
    }),
    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: PropTypes.node,
    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: PropTypes.shape({
      error: PropTypes.node,
      info: PropTypes.node,
      success: PropTypes.node,
      warning: PropTypes.node
    }),
    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: PropTypes.string,
    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: PropTypes.oneOf(["error", "info", "success", "warning"]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      closeButton: PropTypes.object,
      closeIcon: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      closeButton: PropTypes.elementType,
      closeIcon: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["filled", "outlined", "standard"]), PropTypes.string])
  } : void 0;
  "use client";
  console.log("BasicAuth 1");
  function BasicAuth(props) {
    const { spec, ctx } = props;
    const seneca = ctx().seneca;
    const [signinStatus, setSigninStatus] = React.useState("none");
    const handleSignin = React.useCallback((event) => {
      event.preventDefault();
      const data = new FormData(event.currentTarget);
      const email = data.get("email");
      const password = data.get("password");
      seneca.act(
        "aim:req,on:auth,signin:user",
        { email, password },
        function(err, out) {
          if (null == err && null != out && out.ok && !spec.signin.debug) {
            document.location.href = document.location.origin + "/view/" + spec.signin.view;
            return;
          } else if (null == err && !out.ok) {
            setSigninStatus("invalid");
            return;
          } else if (null == err && out.ok && spec.signin.debug) {
            setSigninStatus("debug");
            return;
          }
          if (null != err) {
            console.warn("BasicAuth", "signin", email, err);
          }
          setSigninStatus("unavailable");
        }
      );
    }, []);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { component: "main", maxWidth: "xs", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Box,
      {
        sx: {
          marginTop: 8,
          display: "flex",
          flexDirection: "column",
          alignItems: "center"
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("img", { style: { width: 400 }, src: spec.img.logo }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Typography,
            {
              sx: { mt: 4, color: "primary.main" },
              variant: "h3",
              children: spec.title
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Box,
            {
              component: "form",
              onSubmit: handleSignin,
              noValidate: true,
              sx: { mt: 1 },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  TextField,
                  {
                    margin: "normal",
                    required: true,
                    fullWidth: true,
                    id: "email",
                    label: "Email Address",
                    name: "email",
                    autoComplete: "email",
                    autoFocus: true
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  TextField,
                  {
                    margin: "normal",
                    required: true,
                    fullWidth: true,
                    name: "password",
                    label: "Password",
                    type: "password",
                    id: "password",
                    autoComplete: "current-password"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    fullWidth: true,
                    variant: "contained",
                    sx: { mt: 3, mb: 2 },
                    children: "Sign In"
                  }
                ),
                "invalid" == signinStatus && /* @__PURE__ */ jsxRuntimeExports.jsx(Alert, { severity: "warning", children: "Invalid email or password" }),
                "debug" == signinStatus && /* @__PURE__ */ jsxRuntimeExports.jsx(Alert, { severity: "warning", children: "Signin debug" }),
                "unavailable" == signinStatus && /* @__PURE__ */ jsxRuntimeExports.jsx(Alert, { severity: "error", children: "Signin unavailable" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("br", {})
                ] })
              ]
            }
          )
        ]
      }
    ) });
  }
  exports2.BasicAccountTool = BasicAccountTool;
  exports2.BasicAdmin = BasicAdmin;
  exports2.BasicAppBar = BasicAppBar;
  exports2.BasicAuth = BasicAuth;
  exports2.BasicButton = BasicButton;
  exports2.BasicDrawer = BasicDrawer;
  exports2.BasicDrawerHeader = BasicDrawerHeader;
  exports2.BasicEdit = BasicEdit;
  exports2.BasicFoot = BasicFoot;
  exports2.BasicHead = BasicHead;
  exports2.BasicHeadTool = BasicHeadTool;
  exports2.BasicLed = BasicLed;
  exports2.BasicList = BasicList;
  exports2.BasicLoading = BasicLoading;
  exports2.BasicMain = BasicMain;
  exports2.BasicSide = BasicSide;
  exports2.Vxg = Vxg;
  Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
});
